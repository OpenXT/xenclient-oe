--- a/src/wireless-security/ws-wpa-psk.c
+++ b/src/wireless-security/ws-wpa-psk.c
@@ -36,6 +36,24 @@ struct _WirelessSecurityWPAPSK {
 };
 
 static void
+setCheckboxVisibility (GtkBuilder *builder, gboolean visible)
+{
+	GSList *objects;
+	const char showCheckbuttonPrefix[] = "show_checkbutton_";
+
+	for (objects = gtk_builder_get_objects (builder); objects != NULL; objects = objects->next) {
+		const gchar *id = gtk_buildable_get_name (objects->data);
+		if (id && strncmp (id, showCheckbuttonPrefix, sizeof (showCheckbuttonPrefix) - 1) == 0) {
+			if (visible)
+				gtk_widget_show (GTK_WIDGET (objects->data));
+			else
+				gtk_widget_hide (GTK_WIDGET (objects->data));
+		}
+	}
+	g_slist_free(objects);
+}
+
+static void
 show_toggled_cb (GtkCheckButton *button, WirelessSecurity *sec)
 {
 	GtkWidget *widget;
@@ -61,8 +79,6 @@ validate (WirelessSecurity *parent, cons
 
 	key = gtk_entry_get_text (GTK_ENTRY (entry));
 	len = strlen (key);
-	if ((len < 8) || (len > 64))
-		return FALSE;
 
 	if (len == 64) {
 		/* Hex PSK */
@@ -70,7 +86,13 @@ validate (WirelessSecurity *parent, cons
 			if (!isxdigit (key[i]))
 				return FALSE;
 		}
+		setCheckboxVisibility(parent->builder, FALSE);
 	}
+	else
+		setCheckboxVisibility(parent->builder, TRUE);
+
+	if ((len < 8) || (len > 64))
+		return FALSE;
 
 	/* passphrase can be between 8 and 63 characters inclusive */
 
