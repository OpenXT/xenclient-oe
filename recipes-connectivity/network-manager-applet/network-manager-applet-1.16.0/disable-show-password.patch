--- a/src/wireless-security/ws-wpa-psk.c
+++ b/src/wireless-security/ws-wpa-psk.c
@@ -41,6 +41,24 @@ struct _WirelessSecurityWPAPSK {
 };
 
 static void
+setCheckboxVisibility (GtkBuilder *builder, gboolean visible)
+{
+	GSList *objects;
+	const char showCheckbuttonPrefix[] = "show_checkbutton_";
+
+	for (objects = gtk_builder_get_objects (builder); objects != NULL; objects = objects->next) {
+	        const gchar *id = gtk_buildable_get_name (objects->data);
+	        if (id && strncmp (id, showCheckbuttonPrefix, sizeof (showCheckbuttonPrefix) - 1) == 0) {
+	                if (visible)
+	                        gtk_widget_show (GTK_WIDGET (objects->data));
+	                else
+	                        gtk_widget_hide (GTK_WIDGET (objects->data));
+	        }
+	}
+	g_slist_free(objects);
+}
+
+static void
 show_toggled_cb (GtkCheckButton *button, WirelessSecurity *sec)
 {
 	GtkWidget *widget;
@@ -72,10 +90,6 @@ validate (WirelessSecurity *parent, GErr
         if (   secret_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED
             || secret_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED) {
 		/* All good. */
-	} else if ((len < 8) || (len > 64)) {
-		widget_set_error (entry);
-		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, _("invalid wpa-psk: invalid key-length %zu. Must be [8,63] bytes or 64 hex digits"), len);
-		return FALSE;
 	} else if (len == 64) {
 		/* Hex PSK */
 		for (i = 0; i < len; i++) {
@@ -85,6 +99,15 @@ validate (WirelessSecurity *parent, GErr
 				return FALSE;
 			}
 		}
+		setCheckboxVisibility(parent->builder, FALSE);
+	}
+	else
+		setCheckboxVisibility(parent->builder, TRUE);
+
+	if ((len < 8) || (len > 64)) {
+		widget_set_error (entry);
+		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, _("invalid wpa-psk: invalid key-length %zu. Must be [8,63] bytes or 64 hex digits"), len);
+		return FALSE;
 	}
 	widget_unset_error (entry);
 
