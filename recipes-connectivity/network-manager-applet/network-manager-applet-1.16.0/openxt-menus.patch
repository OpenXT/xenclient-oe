#OpenXT:Customize nm-applet menu for OpenXT to discard displaying of unnecessary information.
--- a/src/applet.c
+++ b/src/applet.c
@@ -45,6 +45,7 @@
 #include "nma-wifi-dialog.h"
 #include "applet-vpn-request.h"
 #include "utils.h"
+#include "popup-menu.h"
 
 #if WITH_WWAN
 # include "applet-device-broadband.h"
@@ -64,6 +65,32 @@ extern gboolean with_appindicator;
 
 G_DEFINE_TYPE (NMApplet, nma, G_TYPE_APPLICATION)
 
+GDBusConnection *menu_bus;
+
+enum {
+       POPUP_NETWORK_MENU,
+       CLOSE_NETWORK_MENU,
+       LAST_SIGNAL
+};
+static guint signals[LAST_SIGNAL] = { 0 };
+
+static void on_name_acquired(GDBusConnection *connection, const gchar *name, gpointer user_data);
+
+static gboolean on_handle_popup_network_menu (
+    OpenXTNmapplet *object,
+    GDBusMethodInvocation *invocation,
+    const guint x_ordinate,
+    const guint y_ordinate,
+    gpointer user_data);
+
+static gboolean on_handle_close_network_menu (
+    OpenXTNmapplet *object,
+    GDBusMethodInvocation *invocation,
+    gpointer user_data);
+
+static void nma_context_menu_populate (GtkMenuShell *menu, NMApplet *applet);
+static void nma_context_menu_update (NMApplet *applet);
+
 /********************************************************************/
 
 static gboolean
@@ -1319,14 +1346,19 @@ nma_menu_device_get_menu_item (NMDevice
 	case NM_DEVICE_STATE_ACTIVATED:
 	{
 		struct AppletDeviceMenuInfo *info = g_new0 (struct AppletDeviceMenuInfo, 1);
+		NMDeviceType devtype = nm_device_get_device_type (device);
+
 		info->device = g_object_ref (device);
 		info->applet = applet;
-		item = gtk_menu_item_new_with_label (_("Disconnect"));
-		g_signal_connect_data (item, "activate",
-		                       G_CALLBACK (applet_device_disconnect_db),
-		                       info,
-		                       applet_device_info_destroy, 0);
-		gtk_widget_set_sensitive (item, TRUE);
+
+		if (devtype != NM_DEVICE_TYPE_ETHERNET) {
+			item = gtk_menu_item_new_with_label (_("Disconnect"));
+			g_signal_connect_data (item, "activate",
+			                       G_CALLBACK (applet_device_disconnect_db),
+			                       info,
+			                       (GClosureNotify) applet_device_info_destroy, 0);
+			gtk_widget_set_sensitive (item, TRUE);
+		}
 		break;
 	}
 	default:
@@ -1458,6 +1490,9 @@ nma_menu_add_vpn_submenu (GtkWidget *men
 	GPtrArray *list;
 	int i;
 
+	/* Don't show VPN menu */
+	return;
+
 	vpn_menu = GTK_MENU (gtk_menu_new ());
 
 	item = GTK_MENU_ITEM (gtk_menu_item_new_with_mnemonic (_("_VPN Connections")));
@@ -1550,30 +1585,6 @@ nma_set_networking_enabled_cb (GtkWidget
 	nm_client_networking_set_enabled (applet->nm_client, state, NULL);
 }
 
-
-static void
-nma_set_notifications_enabled_cb (GtkWidget *widget, NMApplet *applet)
-{
-	gboolean state;
-
-	g_return_if_fail (applet != NULL);
-
-	state = gtk_check_menu_item_get_active (GTK_CHECK_MENU_ITEM (widget));
-
-	g_settings_set_boolean (applet->gsettings,
-	                        PREF_DISABLE_CONNECTED_NOTIFICATIONS,
-	                        !state);
-	g_settings_set_boolean (applet->gsettings,
-	                        PREF_DISABLE_DISCONNECTED_NOTIFICATIONS,
-	                        !state);
-	g_settings_set_boolean (applet->gsettings,
-	                        PREF_DISABLE_VPN_NOTIFICATIONS,
-	                        !state);
-	g_settings_set_boolean (applet->gsettings,
-	                        PREF_SUPPRESS_WIFI_NETWORKS_AVAILABLE,
-	                        !state);
-}
-
 static gboolean
 has_usable_wifi (NMApplet *applet)
 {
@@ -1619,18 +1630,19 @@ static void nma_menu_show_cb (GtkWidget
 
 	if (nm_client_get_state (applet->nm_client) == NM_STATE_ASLEEP) {
 		nma_menu_add_text_item (menu, _("Networking disabled"));
-		return;
+	} else {
+		nma_menu_add_devices (menu, applet);
+		if (has_usable_wifi (applet)) {
+			/* Add the "Hidden Wi-Fi network..." entry */
+			nma_menu_add_hidden_network_item (menu, applet);
+			nma_menu_add_create_network_item (menu, applet);
+			nma_menu_add_separator_item (menu);
+		}
+		nma_menu_add_vpn_submenu (menu, applet);
 	}
 
-	nma_menu_add_devices (menu, applet);
-
-	if (has_usable_wifi (applet)) {
-		/* Add the "Hidden Wi-Fi network..." entry */
-		nma_menu_add_hidden_network_item (menu, applet);
-		nma_menu_add_create_network_item (menu, applet);
-		nma_menu_add_separator_item (menu);
-	}
-	nma_menu_add_vpn_submenu (menu, applet);
+	nma_context_menu_populate (GTK_MENU_SHELL (menu), applet);
+	nma_context_menu_update (applet);
 
 	if (!INDICATOR_ENABLED (applet))
 		gtk_widget_show_all (menu);
@@ -1808,16 +1820,13 @@ applet_connection_info_cb (NMApplet *app
  * Populate the contextual popup menu.
  *
  */
-static void nma_context_menu_populate (NMApplet *applet, GtkMenu *menu)
+static void nma_context_menu_populate (GtkMenuShell *menu_shell, NMApplet *applet)
 {
-	GtkMenuShell *menu_shell;
 	guint id;
 	static gboolean icons_shown = FALSE;
 
 	g_return_if_fail (applet != NULL);
 
-	menu_shell = GTK_MENU_SHELL (menu);
-
 	if (G_UNLIKELY (icons_shown == FALSE)) {
 		GtkSettings *settings = gtk_widget_get_settings (GTK_WIDGET (menu_shell));
 
@@ -1826,6 +1835,7 @@ static void nma_context_menu_populate (N
 			g_object_set (G_OBJECT (settings), "gtk-menu-images", TRUE, NULL);
 		icons_shown = TRUE;
 	}
+	nma_menu_add_separator_item (GTK_WIDGET (menu_shell));
 
 	/* 'Enable Networking' item */
 	applet->networking_enabled_item = gtk_check_menu_item_new_with_mnemonic (_("Enable _Networking"));
@@ -1856,19 +1866,6 @@ static void nma_context_menu_populate (N
 
 	nma_menu_add_separator_item (GTK_WIDGET (menu_shell));
 
-	if (!INDICATOR_ENABLED (applet)) {
-		/* Toggle notifications item */
-		applet->notifications_enabled_item = gtk_check_menu_item_new_with_mnemonic (_("Enable N_otifications"));
-		id = g_signal_connect (applet->notifications_enabled_item,
-			                   "toggled",
-			                   G_CALLBACK (nma_set_notifications_enabled_cb),
-			                   applet);
-		applet->notifications_enabled_toggled_id = id;
-		gtk_menu_shell_append (menu_shell, applet->notifications_enabled_item);
-
-		nma_menu_add_separator_item (GTK_WIDGET (menu_shell));
-	}
-
 	/* 'Connection Information' item */
 	applet->info_menu_item = gtk_menu_item_new_with_mnemonic (_("Connection _Information"));
 	g_signal_connect_swapped (applet->info_menu_item,
@@ -1885,19 +1882,6 @@ static void nma_context_menu_populate (N
 				   applet);
 	gtk_menu_shell_append (menu_shell, applet->connections_menu_item);
 
-	/* Separator */
-	nma_menu_add_separator_item (GTK_WIDGET (menu_shell));
-
-	if (!INDICATOR_ENABLED (applet)) {
-		/* About item */
-		GtkWidget *menu_item;
-
-		menu_item = gtk_menu_item_new_with_mnemonic (_("_About"));
-		g_signal_connect_swapped (menu_item, "activate", G_CALLBACK (applet_about_dialog_show), applet);
-		gtk_menu_shell_append (menu_shell, menu_item);
-	}
-
-	gtk_widget_show_all (GTK_WIDGET (menu_shell));
 }
 
 typedef struct {
@@ -2034,7 +2018,7 @@ applet_update_menu (gpointer user_data)
 	if (INDICATOR_ENABLED (applet)) {
 		nma_menu_show_cb (GTK_WIDGET (menu), applet);
 		nma_menu_add_separator_item (GTK_WIDGET (menu));
-		nma_context_menu_populate (applet, menu);
+		nma_context_menu_populate (GTK_MENU_SHELL (menu), applet);
 		nma_context_menu_update (applet);
 	} else
 		nma_menu_show_cb (GTK_WIDGET (menu), applet);
@@ -2989,6 +2973,54 @@ applet_agent_cancel_secrets_cb (AppletAg
 	}
 }
 
+typedef struct _MenuPosition {
+	unsigned int x;
+	unsigned int y;
+} MenuPosition;
+
+static void
+set_popup_position (GtkMenu *menu, gint *x, gint *y, gboolean *push_in, MenuPosition *menuPosition)
+{
+	*x = (gint)menuPosition->x;
+	*y = (gint)menuPosition->y;
+}
+
+static void
+popup_network_menu_cb (NMApplet  *agent, unsigned int x, unsigned int y, gpointer user_data)
+{
+	NMApplet *applet = NM_APPLET (user_data);
+	MenuPosition menuPosition;
+
+	menuPosition.x = x;
+	menuPosition.y = y;
+
+	applet_clear_notify (applet);
+	if (applet->menu)
+		g_object_unref (applet->menu);
+
+	/* And make a fresh new one */
+	applet->menu = gtk_menu_new ();
+	/* Sink the ref so we can explicitly destroy the menu later */
+	g_object_ref_sink (G_OBJECT (applet->menu));
+
+	gtk_container_set_border_width (GTK_CONTAINER (applet->menu), 0);
+	g_signal_connect (applet->menu, "show", G_CALLBACK (nma_menu_show_cb), applet);
+	g_signal_connect (applet->menu, "deactivate", G_CALLBACK (nma_menu_deactivate_cb), applet);
+
+	g_warning ("popup_network_menu");
+	/* Display the new menu */
+	gtk_menu_popup (GTK_MENU (applet->menu), NULL, NULL,
+			(GtkMenuPositionFunc)set_popup_position, (gpointer)&menuPosition,
+			1, gtk_get_current_event_time ());
+}
+
+static void
+close_network_menu_cb (NMApplet *agent, gpointer user_data)
+{
+	NMApplet *applet = NM_APPLET (user_data);
+	gtk_menu_popdown (GTK_MENU (applet->menu));
+}
+
 /*****************************************************************************/
 
 static void nma_icons_free (NMApplet *applet)
@@ -3174,11 +3206,6 @@ status_icon_popup_menu_cb (GtkStatusIcon
 	 * of the notification.
 	 */
 	applet_clear_notify (applet);
-
-	nma_context_menu_update (applet);
-	gtk_menu_popup (GTK_MENU (applet->context_menu), NULL, NULL,
-			gtk_status_icon_position_menu, icon,
-			button, activate_time);
 }
 
 static gboolean
@@ -3213,12 +3240,6 @@ setup_widgets (NMApplet *applet)
 				  G_CALLBACK (status_icon_activate_cb), applet);
 		g_signal_connect (applet->status_icon, "popup-menu",
 				  G_CALLBACK (status_icon_popup_menu_cb), applet);
-
-		menu = GTK_MENU (gtk_menu_new ());
-		nma_context_menu_populate (applet, menu);
-		applet->context_menu = GTK_WIDGET (menu);
-		if (!applet->context_menu)
-			return FALSE;
 	}
 
 	return TRUE;
@@ -3234,6 +3255,108 @@ applet_embedded_cb (GObject *object, GPa
 }
 
 static void
+on_name_acquired(GDBusConnection *connection,
+                 const gchar *name,
+                 gpointer user_data)
+{
+	GError *error = NULL;
+	NMApplet *applet = user_data;
+	OpenXTNmapplet *openxt_nmapplet;
+
+	openxt_nmapplet = open_xt_nmapplet_skeleton_new();
+	g_signal_connect(openxt_nmapplet, "handle-popup-network-menu", G_CALLBACK(on_handle_popup_network_menu), applet);
+	g_signal_connect(openxt_nmapplet, "handle-close-network-menu", G_CALLBACK(on_handle_close_network_menu), applet);
+	g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(openxt_nmapplet), connection, "/", &error);
+}
+
+static gboolean on_handle_popup_network_menu(OpenXTNmapplet *interface,
+                                             GDBusMethodInvocation *invocation,
+                                             const guint x_ordinate,
+                                             const guint y_ordinate,
+                                             gpointer user_data)
+{
+	NMApplet *applet = user_data;
+
+	if (applet != NULL)
+		g_signal_emit (applet, signals[POPUP_NETWORK_MENU], 0, x_ordinate, y_ordinate);
+	else
+		g_warning("OpenXT: Couldn't popup network menu: applet is NULL");
+
+	open_xt_nmapplet_complete_popup_network_menu(interface, invocation);
+
+	return TRUE;
+}
+
+static gboolean on_handle_close_network_menu(OpenXTNmapplet *interface,
+                                             GDBusMethodInvocation *invocation,
+                                             gpointer user_data)
+{
+	NMApplet *applet = user_data;
+
+	if (applet != NULL)
+		g_signal_emit (applet, signals[CLOSE_NETWORK_MENU], 0);
+
+	open_xt_nmapplet_complete_close_network_menu(interface, invocation);
+
+	return TRUE;
+}
+
+static void
+dbus_setup (NMApplet *applet)
+{
+	if (applet != NULL) {
+		gchar *address = NULL;
+		GDBusConnectionFlags flags =0;
+		GIOStream *stream;
+		GError *error = NULL;
+
+		flags |= G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION;
+		flags |= G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT;
+
+		address = g_dbus_address_get_for_bus_sync (G_BUS_TYPE_SYSTEM,
+							   NULL,
+							   &error);
+
+		if (address == NULL) {
+			if(error != NULL)
+				g_warning ("OpenXT: address error %d:%s ", error->code, error->message);
+			return;
+		}
+
+		stream = g_dbus_address_get_stream_sync (address,
+							 NULL,
+							 NULL,
+							 &error);
+
+		if (stream == NULL) {
+			if(error != NULL)
+				g_warning ("OpenXT: stream error %d:%s ", error->code, error->message);
+			return;
+		}
+
+		menu_bus = g_dbus_connection_new_sync(stream,
+						      NULL,
+						      flags,
+						      NULL,
+						      NULL,
+						      &error);
+
+		if (menu_bus != NULL) {
+			g_bus_own_name_on_connection(menu_bus,
+						     "org.openxt",
+						     0,
+						     on_name_acquired,
+						     NULL,
+						     applet,
+						     NULL);
+		} else {
+			if(error != NULL)
+				g_warning ("OpenXT: system bus connection error %d:%s ", error->code, error->message);
+		}
+	}
+}
+
+static void
 register_agent (NMApplet *applet)
 {
 	GError *error = NULL;
@@ -3329,6 +3452,11 @@ applet_startup (GApplication *app, gpoin
 	if (!notify_is_initted ())
 		notify_init ("NetworkManager");
 
+	dbus_setup(applet);
+
+	g_signal_connect (applet, APPLET_POPUP_NETWORK_MENU, G_CALLBACK (popup_network_menu_cb), applet);
+	g_signal_connect (applet, APPLET_CLOSE_NETWORK_MENU, G_CALLBACK (close_network_menu_cb), applet);
+
 	/* Initialize device classes */
 	applet->ethernet_class = applet_device_ethernet_get_class (applet);
 	g_assert (applet->ethernet_class);
@@ -3423,5 +3551,23 @@ static void nma_class_init (NMAppletClas
 	GObjectClass *oclass = G_OBJECT_CLASS (klass);
 
 	oclass->finalize = finalize;
+
+	g_warning("register openxt signals");
+	/* Signals */
+	signals[POPUP_NETWORK_MENU] =
+		g_signal_new (APPLET_POPUP_NETWORK_MENU,
+			      G_OBJECT_CLASS_TYPE (oclass),
+			      G_SIGNAL_RUN_FIRST,
+			      G_STRUCT_OFFSET (NMAppletClass, popup_network_menu),
+			      NULL, NULL, NULL,
+			      G_TYPE_NONE, 2, G_TYPE_UINT, G_TYPE_UINT);
+
+	signals[CLOSE_NETWORK_MENU] =
+		g_signal_new (APPLET_CLOSE_NETWORK_MENU,
+			      G_OBJECT_CLASS_TYPE (oclass),
+			      G_SIGNAL_RUN_FIRST,
+			      G_STRUCT_OFFSET (NMAppletClass, close_network_menu),
+			      NULL, NULL, g_cclosure_marshal_VOID__VOID,
+			      G_TYPE_NONE, 0);
 }
 
--- a/src/applet.h
+++ b/src/applet.h
@@ -56,6 +56,8 @@
 
 typedef struct {
 	GApplicationClass parent_class;
+	void (*popup_network_menu) (AppletAgent *self, unsigned int x, unsigned int y);
+	void (*close_network_menu) (AppletAgent *self);
 } NMAppletClass;
 
 #define APPLET_PREFS_SCHEMA                       "org.gnome.nm-applet"
@@ -70,6 +72,9 @@ typedef struct {
 #define ICON_LAYER_VPN                            1
 #define ICON_LAYER_MAX                            ICON_LAYER_VPN
 
+#define APPLET_CLOSE_NETWORK_MENU "close-network-menu"
+#define APPLET_POPUP_NETWORK_MENU "popup-network-menu"
+
 typedef struct NMADeviceClass NMADeviceClass;
 
 /*
--- a/Makefile.am
+++ b/Makefile.am
@@ -945,6 +945,8 @@ nm_applet_hc_real = \
 	src/main.c \
 	src/applet.c \
 	src/applet.h \
+	src/popup-menu.c \
+	src/popup-menu.h \
 	src/applet-agent.c \
 	src/applet-agent.h \
 	src/applet-vpn-request.c \
