--- a/src/dns-manager/nm-dns-manager.c
+++ b/src/dns-manager/nm-dns-manager.c
@@ -47,7 +47,7 @@
 #include "nm-dns-dnsmasq.h"
 
 #ifndef RESOLV_CONF
-#define RESOLV_CONF "/etc/resolv.conf"
+#define RESOLV_CONF "/var/volatile/etc/resolv.conf"
 #endif
 
 G_DEFINE_TYPE(NMDnsManager, nm_dns_manager, G_TYPE_OBJECT)
@@ -442,7 +442,8 @@ dispatch_resolvconf (const char *domain,
 #endif
 
 static gboolean
-update_resolv_conf (const char *domain,
+update_resolv_conf (const char *resolv_path,
+                    const char *domain,
                     char **searches,
                     char **nameservers,
                     GError **error)
@@ -457,9 +458,9 @@ update_resolv_conf (const char *domain,
 	g_return_val_if_fail (error != NULL, FALSE);
 
 	/* Find the real path of resolv.conf; it could be a symlink to something */
-	resolv_conf_realpath = realpath (RESOLV_CONF, NULL);
+	resolv_conf_realpath = realpath (resolv_path, NULL);
 	if (!resolv_conf_realpath)
-		resolv_conf_realpath = strdup (RESOLV_CONF);
+		resolv_conf_realpath = strdup (resolv_path);
 
 	/* Build up the real path for the temp resolv.conf that we're about to
 	 * write out.
@@ -751,7 +752,7 @@ update_dns (NMDnsManager *self,
 #endif
 
 	if (success == FALSE)
-		success = update_resolv_conf (domain, searches, nameservers, error);
+		success = update_resolv_conf (RESOLV_CONF, domain, searches, nameservers, error);
 
 	/* signal that resolv.conf was changed */
 	if (success)
@@ -786,6 +787,86 @@ plugin_failed (NMDnsPlugin *plugin, gpoi
 	}
 }
 
+static gboolean
+xc_rewrite_resolv_conf (NMDnsManager *self,
+            const char *iface,
+            NMIP4Config *config,
+            gboolean no_caching,
+            GError **error)
+{
+	NMDnsManagerPrivate *priv;
+	NMResolvConfData rc;
+	GSList *iter, *vpn_configs = NULL, *dev_configs = NULL, *other_configs = NULL;
+	const char *domain = NULL;
+	const char *nis_domain = NULL;
+	char **searches = NULL;
+	char **nameservers = NULL;
+	char **nis_servers = NULL;
+	int num, i, len;
+	gboolean success = FALSE, caching = FALSE;
+        char resolv_path[PATH_MAX];
+
+
+	rc.nameservers = g_ptr_array_new ();
+	rc.domain = NULL;
+	rc.searches = g_ptr_array_new ();
+	rc.nis_domain = NULL;
+	rc.nis_servers = g_ptr_array_new ();
+
+	if (config)
+		merge_one_ip4_config (&rc, config);
+
+	domain = rc.domain;
+
+	/* Per 'man resolv.conf', the search list is limited to 6 domains
+	 * totalling 256 characters.
+	 */
+	num = MIN (rc.searches->len, 6);
+	for (i = 0, len = 0; i < num; i++) {
+		len += strlen (rc.searches->pdata[i]) + 1; /* +1 for spaces */
+		if (len > 256)
+			break;
+	}
+	g_ptr_array_set_size (rc.searches, i);
+	if (rc.searches->len) {
+		g_ptr_array_add (rc.searches, NULL);
+		searches = (char **) g_ptr_array_free (rc.searches, FALSE);
+	} else
+		g_ptr_array_free (rc.searches, TRUE);
+
+	if (rc.nameservers->len) {
+		g_ptr_array_add (rc.nameservers, NULL);
+		nameservers = (char **) g_ptr_array_free (rc.nameservers, FALSE);
+	} else
+		g_ptr_array_free (rc.nameservers, TRUE);
+
+	if (rc.nis_servers->len) {
+		g_ptr_array_add (rc.nis_servers, NULL);
+		nis_servers = (char **) g_ptr_array_free (rc.nis_servers, FALSE);
+	} else
+		g_ptr_array_free (rc.nis_servers, TRUE);
+
+	nis_domain = rc.nis_domain;
+
+	strcpy(resolv_path, RESOLV_CONF);
+	strcat(resolv_path, ".");
+	strcat(resolv_path, iface);
+
+
+	if (success == FALSE)
+		success = update_resolv_conf (resolv_path, domain, searches, nameservers, error);
+
+	if (searches)
+		g_strfreev (searches);
+	if (nameservers)
+		g_strfreev (nameservers);
+	if (nis_servers)
+		g_strfreev (nis_servers);
+
+	return success;
+}
+
+
 gboolean
 nm_dns_manager_add_ip4_config (NMDnsManager *mgr,
                                const char *iface,
@@ -825,6 +906,13 @@ nm_dns_manager_add_ip4_config (NMDnsMana
 		g_clear_error (&error);
 	}
 
+        if (!xc_rewrite_resolv_conf (mgr, iface, config, FALSE, &error)) {
+                nm_log_warn ("LOGD_DNS, Could not commit DNS changes: (%d) %s",
+		             error ? error->code : -1,
+		             error && error->message ? error->message : "(unknown)");
+                g_clear_error (&error);
+        }
+
 	return TRUE;
 }
 
--- a/src/nm-policy.c
+++ b/src/nm-policy.c
@@ -95,6 +95,69 @@ enum {
 
 static void schedule_activate_all (NMPolicy *policy);
 
+static gboolean
+device_suitable_for_default_route (NMDevice *dev, gboolean fully_activated)
+{
+	NMDeviceType devtype = nm_device_get_device_type (dev);
+	NMDeviceState state = nm_device_get_state (dev);
+	NMActRequest *req;
+	NMConnection *connection;
+	NMIP4Config *ip4_config;
+	NMSettingIP4Config *s_ip4;
+	guint i;
+	gboolean can_default = FALSE;
+	const char *method = NULL;
+
+	if (   state <= NM_DEVICE_STATE_DISCONNECTED
+	    || state >= NM_DEVICE_STATE_DEACTIVATING)
+		return FALSE;
+
+	if (fully_activated && state < NM_DEVICE_STATE_SECONDARIES)
+		return FALSE;
+
+	ip4_config = nm_device_get_ip4_config (dev);
+	if(!ip4_config)
+		return FALSE;
+	if (ip4_config) {
+		/* Make sure at least one of this device's IP addresses has a gateway */
+		for (i = 0; i < nm_ip4_config_get_num_addresses (ip4_config); i++) {
+			NMIP4Address *addr;
+
+			addr = nm_ip4_config_get_address (ip4_config, i);
+			if (nm_ip4_address_get_gateway (addr)) {
+				can_default = TRUE;
+				break;
+			}
+		}
+
+		if (!can_default && (devtype != NM_DEVICE_TYPE_MODEM))
+			return FALSE;
+
+		/* 'never-default' devices can't ever be the default */
+		if (nm_ip4_config_get_never_default (ip4_config))
+			return FALSE;
+	} else if (fully_activated)
+		return FALSE;
+
+	req = nm_device_get_act_request (dev);
+	g_assert (req);
+	connection = nm_act_request_get_connection (req);
+	g_assert (connection);
+
+	s_ip4 = nm_connection_get_setting_ip4_config (connection);
+	if (s_ip4) {
+		/* Never set the default route through an IPv4LL-addressed device */
+		method = nm_setting_ip4_config_get_method (s_ip4);
+		if (!strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL))
+			return FALSE;
+
+		/* 'never-default' devices can't ever be the default */
+		if (nm_setting_ip4_config_get_never_default (s_ip4))
+			return FALSE;
+	}
+
+	return TRUE;
+}
 
 static NMDevice *
 get_best_ip4_device (NMPolicy *self, gboolean fully_activated)
@@ -107,63 +170,11 @@ get_best_ip4_device (NMPolicy *self, gbo
 	devices = nm_manager_get_devices (priv->manager);
 	for (iter = devices; iter; iter = g_slist_next (iter)) {
 		NMDevice *dev = NM_DEVICE (iter->data);
-		NMDeviceType devtype = nm_device_get_device_type (dev);
-		NMDeviceState state = nm_device_get_state (dev);
-		NMActRequest *req;
-		NMConnection *connection;
-		NMIP4Config *ip4_config;
-		NMSettingIP4Config *s_ip4;
 		int prio;
-		guint i;
-		gboolean can_default = FALSE;
-		const char *method = NULL;
-
-		if (   state <= NM_DEVICE_STATE_DISCONNECTED
-		    || state >= NM_DEVICE_STATE_DEACTIVATING)
-			continue;
-
-		if (fully_activated && state < NM_DEVICE_STATE_SECONDARIES)
-			continue;
 
-		ip4_config = nm_device_get_ip4_config (dev);
-		if (ip4_config) {
-			/* Make sure at least one of this device's IP addresses has a gateway */
-			for (i = 0; i < nm_ip4_config_get_num_addresses (ip4_config); i++) {
-				NMIP4Address *addr;
-
-				addr = nm_ip4_config_get_address (ip4_config, i);
-				if (nm_ip4_address_get_gateway (addr)) {
-					can_default = TRUE;
-					break;
-				}
-			}
-
-			if (!can_default && (devtype != NM_DEVICE_TYPE_MODEM))
-				continue;
-
-			/* 'never-default' devices can't ever be the default */
-			if (nm_ip4_config_get_never_default (ip4_config))
-				continue;
-		} else if (fully_activated)
+		if (!device_suitable_for_default_route(dev, fully_activated))
 			continue;
 
-		req = nm_device_get_act_request (dev);
-		g_assert (req);
-		connection = nm_act_request_get_connection (req);
-		g_assert (connection);
-
-		s_ip4 = nm_connection_get_setting_ip4_config (connection);
-		if (s_ip4) {
-			/* Never set the default route through an IPv4LL-addressed device */
-			method = nm_setting_ip4_config_get_method (s_ip4);
-			if (!strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL))
-				continue;
-
-			/* 'never-default' devices can't ever be the default */
-			if (nm_setting_ip4_config_get_never_default (s_ip4))
-				continue;
-		}
-
 		prio = nm_device_get_priority (dev);
 		if (   prio < best_prio
 		    || (priv->default_device4 == dev && prio == best_prio)
@@ -653,8 +664,10 @@ update_ip4_routing (NMPolicy *policy, gb
 	}
 	g_assert ((best || vpn) && best_ac);
 
+#if 0 /*JMM force the update so the xc-nutty-network gets a shot at doing the crazy stuffs*/
 	if (!force_update && best && (best == priv->default_device4))
 		return;
+#endif
 
 	/* We set the default route to the first gateway we find.  If we don't find
 	 * a gateway (WWAN, point-to-point, etc) then we just use 0.0.0.0
@@ -682,6 +695,26 @@ update_ip4_routing (NMPolicy *policy, gb
 		                                         parent_mss);
 		default_device = parent;
 	} else {
+		/*JMM - Actually cycle through all of them, so that xc-nutty-network gets to fixup the other tables*/
+		GSList *devices, *iter;
+		devices = nm_manager_get_devices (priv->manager);
+		for (iter = devices; iter; iter = g_slist_next (iter)) {
+			NMDevice *dev = NM_DEVICE (iter->data);
+			NMIP4Address *ip4addr;
+			NMIP4Config *ip4config = NULL;
+
+			if (!device_suitable_for_default_route(dev, TRUE))
+				continue;
+
+			ip4config = nm_device_get_ip4_config (dev);
+			g_assert (ip4config);
+			ip4addr = nm_ip4_config_get_address (ip4config, 0);
+
+			nm_system_replace_default_ip4_route (nm_device_get_ip_ifindex (dev),
+							     nm_ip4_address_get_gateway (ip4addr),
+							     nm_ip4_config_get_mss (ip4config));
+		}
+
 		nm_system_replace_default_ip4_route (ip_ifindex,
 		                                     gw_addr,
 		                                     nm_ip4_config_get_mss (ip4_config));
--- a/src/nm-system.c
+++ b/src/nm-system.c
@@ -96,6 +96,80 @@ ip4_dest_in_same_subnet (NMIP4Config *co
 	return FALSE;
 }
 
+static int
+xc_netlink_route_delete(int ifindex,
+        struct rtnl_route * route)
+{
+        int ret;
+        uint32_t table, aux_table = 30 + ifindex; /* network daemon maps these routing table indices */
+        struct nl_sock *nlh;
+
+        ret = nm_netlink_route_delete(route);
+        g_return_val_if_fail (route != NULL, FALSE);
+        nlh = nm_netlink_get_default_handle ();
+        g_return_val_if_fail (nlh != NULL, FALSE);
+
+        table = rtnl_route_get_table(route);
+        rtnl_route_set_table(route,aux_table);
+        (void) rtnl_route_delete(nlh, route, 0);
+        rtnl_route_set_table(route,table);
+
+        return ret;
+}
+
+static void
+xc_route_add (int ifindex,
+        struct nl_sock *nlh,
+        struct rtnl_route *route,
+        int flags)
+{
+        guint32 table;
+        guint32 aux_table = 30 + ifindex; /* network daemon maps these routing table indices */
+
+        if (route && nlh)
+        {
+            table = rtnl_route_get_table(route);
+            rtnl_route_set_table(route, aux_table);
+            (void) rtnl_route_add(nlh, route, flags);
+            rtnl_route_set_table(route, table);
+        }
+}
+
+static int
+xc_netlink_route_add(int ifindex,
+        struct rtnl_route * route,
+        guint32 *dest, /* in_addr */
+        int dest_prefix,
+        guint32 *gateway, /* in_addr */
+        int flags)
+{
+        int ret;
+        char *iface = nm_netlink_index_to_iface (ifindex);
+        uint32_t metric;
+        struct nl_sock *nlh = nm_netlink_get_default_handle ();
+
+        g_return_val_if_fail (nlh != NULL, FALSE);
+
+        if (!iface)
+        {
+                ret = nm_netlink_route4_add(route, dest, dest_prefix, gateway, flags);
+                return ret;
+        }
+        metric = rtnl_route_get_priority(route);
+
+        if (strncmp(iface, "brbridged", 9) != 0)
+                rtnl_route_set_priority(route,metric+1);
+
+        ret = nm_netlink_route4_add(route, dest, dest_prefix, gateway, flags);
+        xc_route_add(ifindex, nlh, route, flags);
+
+        if (strncmp(iface, "brbridged", 9) != 0)
+                rtnl_route_set_priority(route,metric);
+
+        g_free (iface);
+        return ret;
+}
+
 static struct rtnl_route *
 nm_system_device_set_ip4_route (int ifindex, 
                                 guint32 ip4_dest,
@@ -119,7 +193,7 @@ nm_system_device_set_ip4_route (int ifin
 	g_return_val_if_fail (route != NULL, NULL);
 
 	/* Add the route */
-	err = nm_netlink_route4_add (route, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
+	err = xc_netlink_route_add (ifindex, route, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
 	if (err == -NLE_OBJ_NOTFOUND && ip4_gateway) {
 		/* Gateway might be over a bridge; try adding a route to gateway first */
 		struct rtnl_route *route2;
@@ -127,11 +201,11 @@ nm_system_device_set_ip4_route (int ifin
 		route2 = nm_netlink_route_new (ifindex, AF_INET, mss, NULL);
 		if (route2) {
 			/* Add route to gateway over bridge */
-			err = nm_netlink_route4_add (route2, &ip4_gateway, 32, NULL, 0);
+			err = xc_netlink_route_add (ifindex, route2, &ip4_gateway, 32, NULL, 0);
 			if (!err) {
-				err = nm_netlink_route4_add (route, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
+				err = xc_netlink_route_add (ifindex, route, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
 				if (err)
-					nm_netlink_route_delete (route2);
+					xc_netlink_route_delete (ifindex, route2);
 			}
 			rtnl_route_put (route2);
 		}
@@ -956,7 +1030,7 @@ add_ip4_route_to_gateway (int ifindex, g
 	g_return_val_if_fail (route != NULL, NULL);
 
 	/* Add direct route to the gateway */
-	err = nm_netlink_route4_add (route, &gw, 32, NULL, 0);
+	err = xc_netlink_route_add (ifindex, route, &gw, 32, NULL, 0);
 	if (err) {
 		char *iface = nm_netlink_index_to_iface (ifindex);
 
@@ -994,7 +1068,7 @@ replace_default_ip4_route (int ifindex,
 	g_return_val_if_fail (route != NULL, -ENOMEM);
 
 	/* Add the new default route */
-	err = nm_netlink_route4_add (route, &dst, 0, &gw, NLM_F_REPLACE);
+	err = xc_netlink_route_add (ifindex, route, &dst, 0, &gw, NLM_F_REPLACE);
 	if (err == -NLE_EXIST)
 		err = 0;
 
@@ -1048,7 +1122,7 @@ nm_system_replace_default_ip4_route_vpn
 	/* Try adding the original route again */
 	err = replace_default_ip4_route (ifindex, int_gw, mss);
 	if (err != 0) {
-		nm_netlink_route_delete (gw_route);
+		xc_netlink_route_delete (ifindex, gw_route);
 		nm_log_err (LOGD_DEVICE | LOGD_VPN | LOGD_IP4,
 		            "(%s): failed to set IPv4 default route (pass #2): %d",
 		            iface, err);
@@ -1099,7 +1173,7 @@ nm_system_replace_default_ip4_route (int
 	/* Try adding the original route again */
 	err = replace_default_ip4_route (ifindex, gw, mss);
 	if (err != 0) {
-		nm_netlink_route_delete (gw_route);
+		xc_netlink_route_delete (ifindex, gw_route);
 		nm_log_err (LOGD_DEVICE | LOGD_IP4,
 		            "(%s): failed to set IPv4 default route (pass #2): %d",
 		            iface, err);
@@ -1364,9 +1438,10 @@ delete_one_route (struct rtnl_route *rou
                   gpointer user_data)
 {
 	guint32 log_level = GPOINTER_TO_UINT (user_data);
+	gint32 ifindex = nm_netlink_iface_to_index (iface);
 
 	nm_log_dbg (log_level, "   deleting route");
-	if (!nm_netlink_route_delete (route))
+	if (!xc_netlink_route_delete (ifindex, route))
 		nm_log_err (LOGD_DEVICE, "(%s): failed to delete route", iface);
 
 	return NULL;
@@ -1455,9 +1530,11 @@ nm_system_device_set_priority (int ifind
 	found = nm_netlink_foreach_route (ifindex, AF_INET, RT_SCOPE_LINK, FALSE,  find_route, config);
 	if (found) {
 		nlh = nm_netlink_get_default_handle ();
+		xc_netlink_route_delete (ifindex, found);
 		nm_netlink_route_delete (found);
 		rtnl_route_set_priority (found, priority);
 		rtnl_route_add (nlh, found, 0);
+		xc_route_add (ifindex, nlh, found, 0);
 		rtnl_route_put (found);
 	}
 }
