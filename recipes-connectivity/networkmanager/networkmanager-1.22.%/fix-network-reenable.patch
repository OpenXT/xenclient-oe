#OpenXT: Disabling network by unchecking the 'Enable Network' checkbox in nm-applet causes
#        brbridged to detach eth0 interface and go down to unmanaged state. This is a problem
#        when network is re-enabled as eth0 cannot be added back to brbridged as a slave and
#        brbridged is no longer managed by networkmanager.
#
#        This patch prevents brbridged to detach eth0 and also prevents its state change to
#        unmanaged when network is disabled.
--- a/src/devices/nm-device.c
+++ b/src/devices/nm-device.c
@@ -14509,9 +14509,11 @@ nm_device_cleanup (NMDevice *self, NMDev
 {
 	NMDevicePrivate *priv;
 	int ifindex;
+	const char *iface = NULL;
 
 	g_return_if_fail (NM_IS_DEVICE (self));
 
+	iface = nm_device_get_ip_iface (self);
 	if (reason == NM_DEVICE_STATE_REASON_NOW_MANAGED)
 		_LOGD (LOGD_DEVICE, "preparing device");
 	else
@@ -14537,7 +14539,8 @@ nm_device_cleanup (NMDevice *self, NMDev
 
 	if (cleanup_type == CLEANUP_TYPE_DECONFIGURE) {
 		/* master: release slaves */
-		nm_device_master_release_slaves (self);
+		if(strncmp (iface, "brbridged", 9))
+			nm_device_master_release_slaves (self);
 
 		/* Take out any entries in the routing table and any IP address the device had. */
 		if (ifindex > 0) {
@@ -14561,7 +14564,8 @@ nm_device_cleanup (NMDevice *self, NMDev
 	/* slave: mark no longer enslaved */
 	if (   priv->master
 	    && priv->ifindex > 0
-	    && nm_platform_link_get_master (nm_device_get_platform (self), priv->ifindex) <= 0)
+	    && nm_platform_link_get_master (nm_device_get_platform (self), priv->ifindex) <= 0
+	    && strncmp (iface, "eth", 3))
 		nm_device_master_release_one_slave (priv->master, self, FALSE, NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED);
 
 	if (priv->lldp_listener)
@@ -14977,7 +14981,7 @@ _set_state_full (NMDevice *self,
 	case NM_DEVICE_STATE_UNMANAGED:
 		nm_device_set_firmware_missing (self, FALSE);
 		if (old_state > NM_DEVICE_STATE_UNMANAGED) {
-			if (priv->sys_iface_state != NM_DEVICE_SYS_IFACE_STATE_MANAGED) {
+			if (priv->sys_iface_state != NM_DEVICE_SYS_IFACE_STATE_MANAGED && strncmp (iface, "eth", 3)) {
 				nm_device_cleanup (self, reason,
 				                   priv->sys_iface_state == NM_DEVICE_SYS_IFACE_STATE_REMOVED
 				                       ? CLEANUP_TYPE_REMOVED
--- a/src/nm-manager.c
+++ b/src/nm-manager.c
@@ -5826,13 +5826,17 @@ device_sleep_cb (NMDevice *device,
                  GParamSpec *pspec,
                  NMManager *self)
 {
+	const char *iface = nm_device_get_ip_iface (device);
+
 	switch (nm_device_get_state (device)) {
 	case NM_DEVICE_STATE_DISCONNECTED:
-		_LOGD (LOGD_SUSPEND, "sleep: unmanaging device %s", nm_device_get_ip_iface (device));
-		nm_device_set_unmanaged_by_flags_queue (device,
-		                                        NM_UNMANAGED_SLEEPING,
-		                                        TRUE,
-		                                        NM_DEVICE_STATE_REASON_SLEEPING);
+		if (strncmp (iface, "brbridged", 9)) {
+			_LOGD (LOGD_SUSPEND, "sleep: unmanaging device %s", nm_device_get_ip_iface (device));
+			nm_device_set_unmanaged_by_flags_queue (device,
+			       	                                NM_UNMANAGED_SLEEPING,
+			                                        TRUE,
+			                                        NM_DEVICE_STATE_REASON_SLEEPING);
+		}
 		break;
 	case NM_DEVICE_STATE_UNMANAGED:
 		_LOGD (LOGD_SUSPEND, "sleep: device %s is ready", nm_device_get_ip_iface (device));
