#OpenXT:Update the routing tables for different bridges as setup by network-slave.
#       These routing tables are reffered when routing packets for different networks.
--- a/src/nm-policy.c
+++ b/src/nm-policy.c
@@ -995,11 +995,6 @@ update_ip4_routing (NMPolicy *self, gboo
 	}
 	g_assert ((best || vpn) && best_ac);
 
-	if (   !force_update
-	    && best_ac
-	    && best_ac == priv->default_ac4)
-		return;
-
 	if (best) {
 		nm_manager_for_each_active_connection (priv->manager, ac, tmp_list) {
 			if (   NM_IS_VPN_CONNECTION (ac)
--- a/src/platform/nm-linux-platform.c
+++ b/src/platform/nm-linux-platform.c
@@ -3983,13 +3983,13 @@ ip_route_get_lock_flag (const NMPlatform
 static struct nl_msg *
 _nl_msg_new_route (int nlmsg_type,
                    guint16 nlmsgflags,
-                   const NMPObject *obj)
+                   const NMPObject *obj,
+                   const guint32 table)
 {
 	nm_auto_nlmsg struct nl_msg *msg = NULL;
 	const NMPClass *klass = NMP_OBJECT_GET_CLASS (obj);
 	gboolean is_v4 = klass->addr_family == AF_INET;
 	const guint32 lock = ip_route_get_lock_flag (NMP_OBJECT_CAST_IP_ROUTE (obj));
-	const guint32 table = nm_platform_route_table_uncoerce (NMP_OBJECT_CAST_IP_ROUTE (obj)->table_coerced, TRUE);
 	const struct rtmsg rtmsg = {
 		.rtm_family = klass->addr_family,
 		.rtm_tos = is_v4
@@ -8047,6 +8047,30 @@ ip6_address_delete (NMPlatform *platform
 
 /*****************************************************************************/
 
+static void
+oxt_route_add (NMPlatform *platform,
+               NMPNlmFlags flags,
+               int addr_family,
+               const NMPlatformIPRoute *route)
+{
+	nm_auto_nlmsg struct nl_msg *nlmsg = NULL;
+	NMPObject obj;
+	guint32 table;
+
+	nmp_object_stackinit (&obj, NMP_OBJECT_TYPE_IP4_ROUTE, (const NMPlatformObject *) route);
+	nm_platform_ip_route_normalize (addr_family, NMP_OBJECT_CAST_IP_ROUTE (&obj));
+
+	table = 30 + obj.ip_route.ifindex;
+	nlmsg = _nl_msg_new_route (RTM_NEWROUTE, flags & NMP_NLM_FLAG_FMASK, &obj, table);
+	if (!nlmsg)
+		_LOGW ("OpenXT: couldn't add routing table entry for ifindex %d", obj.ip_route.ifindex);
+
+	do_add_addrroute (platform,
+	                  &obj,
+	                  nlmsg,
+	                  NM_FLAGS_HAS (flags, NMP_NLM_FLAG_SUPPRESS_NETLINK_FAILURE));
+}
+
 static int
 ip_route_add (NMPlatform *platform,
               NMPNlmFlags flags,
@@ -8055,9 +8079,11 @@ ip_route_add (NMPlatform *platform,
 {
 	nm_auto_nlmsg struct nl_msg *nlmsg = NULL;
 	NMPObject obj;
+	guint32 table;
 
 	switch (addr_family) {
 	case AF_INET:
+		oxt_route_add (platform, flags, addr_family, route);
 		nmp_object_stackinit (&obj, NMP_OBJECT_TYPE_IP4_ROUTE, (const NMPlatformObject *) route);
 		break;
 	case AF_INET6:
@@ -8068,8 +8094,9 @@ ip_route_add (NMPlatform *platform,
 	}
 
 	nm_platform_ip_route_normalize (addr_family, NMP_OBJECT_CAST_IP_ROUTE (&obj));
+	table = nm_platform_route_table_uncoerce (NMP_OBJECT_CAST_IP_ROUTE (&obj)->table_coerced, TRUE);
 
-	nlmsg = _nl_msg_new_route (RTM_NEWROUTE, flags & NMP_NLM_FLAG_FMASK, &obj);
+	nlmsg = _nl_msg_new_route (RTM_NEWROUTE, flags & NMP_NLM_FLAG_FMASK, &obj, table);
 	if (!nlmsg)
 		g_return_val_if_reached (-NME_BUG);
 	return do_add_addrroute (platform,
@@ -8078,20 +8105,39 @@ ip_route_add (NMPlatform *platform,
 	                         NM_FLAGS_HAS (flags, NMP_NLM_FLAG_SUPPRESS_NETLINK_FAILURE));
 }
 
+static void
+oxt_route_delete (NMPlatform *platform,
+                  const NMPObject* obj)
+{
+	nm_auto_nlmsg struct nl_msg *nlmsg = NULL;
+	guint32 table;
+
+	table = 30 + obj->ip_route.ifindex;
+	nlmsg = _nl_msg_new_route (RTM_DELROUTE, 0, obj, table);
+
+	if (!nlmsg)
+		_LOGW ("OpenXT: couldn't delete routing table entry for ifindex %d", obj->ip_route.ifindex);
+	else
+		do_delete_object (platform, obj, nlmsg);
+}
+
 static gboolean
 object_delete (NMPlatform *platform,
                const NMPObject *obj)
 {
 	nm_auto_nmpobj const NMPObject *obj_keep_alive = NULL;
 	nm_auto_nlmsg struct nl_msg *nlmsg = NULL;
+	guint32 table;
 
 	if (!NMP_OBJECT_IS_STACKINIT (obj))
 		obj_keep_alive = nmp_object_ref (obj);
 
 	switch (NMP_OBJECT_GET_TYPE (obj)) {
 	case NMP_OBJECT_TYPE_IP4_ROUTE:
+		oxt_route_delete (platform, obj);
 	case NMP_OBJECT_TYPE_IP6_ROUTE:
-		nlmsg = _nl_msg_new_route (RTM_DELROUTE, 0, obj);
+		table = nm_platform_route_table_uncoerce (NMP_OBJECT_CAST_IP_ROUTE (obj)->table_coerced, TRUE);
+		nlmsg = _nl_msg_new_route (RTM_DELROUTE, 0, obj, table);
 		break;
 	case NMP_OBJECT_TYPE_ROUTING_RULE:
 		nlmsg = _nl_msg_new_routing_rule (RTM_DELRULE, 0, NMP_OBJECT_CAST_ROUTING_RULE (obj));
