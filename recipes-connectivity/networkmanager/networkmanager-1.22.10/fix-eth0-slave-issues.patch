#OpenXT:
#       * Don't disconnect eth0 from brbridged when ethernet cable is unplugged.
#       NetworkManager disconnects the slave (eth0) from its master (brbridged) when ethernet cable is unplugged.
#       Disconnecting eth0 causes problem to bring network back up when cable is plugged back.
#
#       * Don't create default 'Wired connection %d' ethernet connection.
#       Initially on boot up this connection is created, but not used at alle. When ethernet cable is
#       unplugged and plugged back, eth0 assumes this existing connection instead of being a slave.
#
#       * Update eth0 device state on failure to detect carrier during startup.
--- a/src/devices/nm-device-ethernet-utils.c
+++ b/src/devices/nm-device-ethernet-utils.c
@@ -25,17 +25,6 @@
 char *
 nm_device_ethernet_utils_get_default_wired_name (GHashTable *existing_ids)
 {
-	char *temp;
-	int i;
-
-	/* Find the next available unique connection name */
-	for (i = 1; i < G_MAXINT; i++) {
-		temp = g_strdup_printf (_("Wired connection %d"), i);
-		if (   !existing_ids
-		    || !g_hash_table_contains (existing_ids, temp))
-			return temp;
-		g_free (temp);
-	}
 	return NULL;
 }
 
--- a/src/devices/nm-device.c
+++ b/src/devices/nm-device.c
@@ -3484,7 +3484,7 @@ carrier_changed (NMDevice *self, gboolea
 			return;
 		}
 		/* fall-through and change state of device */
-	} else if (priv->is_enslaved && !carrier) {
+	} else if (priv->is_enslaved && !carrier && strncmp (priv->iface, "eth", 3)) {
 		/* Slaves don't deactivate when they lose carrier; for
 		 * bonds/teams in particular that would be actively
 		 * counterproductive.
@@ -3511,7 +3511,10 @@ carrier_changed (NMDevice *self, gboolea
 			nm_device_update_dynamic_ip_setup (self);
 		}
 	} else {
-		if (priv->state == NM_DEVICE_STATE_UNAVAILABLE) {
+		if (strncmp (priv->iface, "eth", 3) == 0) {
+			nm_device_queue_state (self, NM_DEVICE_STATE_DISCONNECTED,
+			                       NM_DEVICE_STATE_REASON_CARRIER);
+		} else if (priv->state == NM_DEVICE_STATE_UNAVAILABLE) {
 			if (   priv->queued_state.id
 			    && priv->queued_state.state >= NM_DEVICE_STATE_DISCONNECTED)
 				queued_state_clear (self);
@@ -4709,6 +4712,7 @@ slave_state_changed (NMDevice *slave,
 	NMDevicePrivate *priv = NM_DEVICE_GET_PRIVATE (self);
 	gboolean release = FALSE;
 	gboolean configure;
+	const char *iface = nm_device_get_iface (slave);
 
 	_LOGD (LOGD_DEVICE, "slave %s state change %d (%s) -> %d (%s)",
 	       nm_device_get_iface (slave),
@@ -4731,7 +4735,7 @@ slave_state_changed (NMDevice *slave,
 		release = TRUE;
 	}
 
-	if (release) {
+	if (release && strncmp (iface, "eth", 3)) {
 		configure =    priv->sys_iface_state == NM_DEVICE_SYS_IFACE_STATE_MANAGED
 		            && nm_device_sys_iface_state_get (slave) != NM_DEVICE_SYS_IFACE_STATE_EXTERNAL;
 
@@ -12651,11 +12655,15 @@ carrier_wait_timeout (gpointer user_data
 {
 	NMDevice *self = NM_DEVICE (user_data);
 	NMDevicePrivate *priv = NM_DEVICE_GET_PRIVATE (self);
+	const char *iface = NULL;
 
 	priv->carrier_wait_id = 0;
 	nm_device_remove_pending_action (self, NM_PENDING_ACTION_CARRIER_WAIT, FALSE);
 	if (!priv->carrier)
 		_carrier_wait_check_queued_act_request (self);
+	iface = nm_device_get_ip_iface (self);
+	if(strncmp (iface, "eth", 3) == 0)
+		nm_device_queue_state (self, NM_DEVICE_STATE_DISCONNECTED, NM_DEVICE_STATE_REASON_CARRIER);
 	return G_SOURCE_REMOVE;
 }
 
