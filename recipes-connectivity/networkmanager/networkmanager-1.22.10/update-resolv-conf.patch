#OpenXT:Update resolv.conf for different interfaces as dnsmasq script running on different bridges makes use of it.
#       resolv.conf for different interfaces is done by appending the interface name to 'resolv.conf.' file.
#       For example: resolv.conf for interface wlan0 would be resolv.conf.wlan0
--- a/src/dns/nm-dns-manager.c
+++ b/src/dns/nm-dns-manager.c
@@ -142,6 +142,10 @@ struct _NMDnsManagerClass {
 	NMDBusObjectClass parent;
 };
 
+#ifndef RESOLV_CONF
+#define RESOLV_CONF "/var/volatile/etc/resolv.conf"
+#endif
+
 G_DEFINE_TYPE (NMDnsManager, nm_dns_manager, NM_TYPE_DBUS_OBJECT)
 
 #define NM_DNS_MANAGER_GET_PRIVATE(self) _NM_GET_PRIVATE(self, NMDnsManager, NM_IS_DNS_MANAGER)
@@ -830,6 +834,7 @@ update_resolv_conf_no_stub (NMDnsManager
 
 static SpawnResult
 update_resolv_conf (NMDnsManager *self,
+                    const char *resolv_path,
                     const char *const*searches,
                     const char *const*nameservers,
                     const char *const*options,
@@ -848,25 +853,25 @@ update_resolv_conf (NMDnsManager *self,
 
 	if (   rc_manager == NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE
 	    || (   rc_manager == NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK
-	        && !_read_link_cached (_PATH_RESCONF, &resconf_link_cached, &resconf_link))) {
+	        && !_read_link_cached (resolv_path, &resconf_link_cached, &resconf_link))) {
 		gs_free char *rc_path_syml = NULL;
 		nm_auto_free char *rc_path_real = NULL;
-		const char *rc_path = _PATH_RESCONF;
+		const char *rc_path = resolv_path;
 		GError *local = NULL;
 
 		if (rc_manager == NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE) {
-			rc_path_real = realpath (_PATH_RESCONF, NULL);
+			rc_path_real = realpath (resolv_path, NULL);
 			if (rc_path_real)
 				rc_path = rc_path_real;
 			else {
 				/* realpath did not resolve a path-name. That either means,
-				 * _PATH_RESCONF:
+				 * resolv_path:
 				 *   - does not exist
 				 *   - is a plain file
 				 *   - is a dangling symlink
 				 *
 				 * Handle the case, where it is a dangling symlink... */
-				rc_path_syml = nm_utils_read_link_absolute (_PATH_RESCONF, NULL);
+				rc_path_syml = nm_utils_read_link_absolute (resolv_path, NULL);
 				if (rc_path_syml)
 					rc_path = rc_path_syml;
 			}
@@ -885,6 +890,7 @@ update_resolv_conf (NMDnsManager *self,
 			_LOGT ("update-resolv-conf: write to %s succeeded (rc-manager=%s)",
 			       rc_path, _rc_manager_to_string (rc_manager));
 		}
+		return write_file_result;
 	}
 
 	if ((f = fopen (MY_RESOLV_CONF_TMP, "we")) == NULL) {
@@ -1508,11 +1514,12 @@ update_dns (NMDnsManager *self,
 		case NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK:
 		case NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE:
 			result = update_resolv_conf (self,
+			                             MY_RESOLV_CONF,
 			                             NM_CAST_STRV_CC (searches),
 			                             NM_CAST_STRV_CC (nameservers),
 			                             NM_CAST_STRV_CC (options),
 			                             error,
-			                             priv->rc_manager);
+			                             NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE);
 			resolv_conf_updated = TRUE;
 			/* If we have ended with no nameservers avoid updating again resolv.conf
 			 * on stop, as some external changes may be applied to it in the meanwhile */
@@ -1538,11 +1545,12 @@ update_dns (NMDnsManager *self,
 			_LOGD ("update-dns: program not available, writing to resolv.conf");
 			g_clear_error (error);
 			result = update_resolv_conf (self,
+			                             MY_RESOLV_CONF,
 			                             NM_CAST_STRV_CC (searches),
 			                             NM_CAST_STRV_CC (nameservers),
 			                             NM_CAST_STRV_CC (options),
 			                             error,
-			                             NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK);
+			                             NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE);
 			resolv_conf_updated = TRUE;
 		}
 	}
@@ -1551,6 +1559,7 @@ update_dns (NMDnsManager *self,
 	   ignoring any errors */
 	if (!resolv_conf_updated) {
 		update_resolv_conf (self,
+		                    MY_RESOLV_CONF,
 		                    NM_CAST_STRV_CC (searches),
 		                    NM_CAST_STRV_CC (nameservers),
 		                    NM_CAST_STRV_CC (options),
@@ -1640,6 +1649,69 @@ _ip_config_dns_priority_changed (gpointe
 }
 
 gboolean
+xc_rewrite_resolv_conf (NMDnsManager *self,
+                        const char *iface,
+                        int ifindex,
+                        NMIPConfig *config,
+                        GError **error)
+{
+	NMResolvConfData rc;
+	const char *nis_domain = NULL;
+	gs_strfreev char **searches = NULL;
+	gs_strfreev char **nameservers = NULL;
+	gs_strfreev char **nis_servers = NULL;
+	gs_strfreev char **options = NULL;
+	int num, i, len;
+	SpawnResult success;
+	char resolv_path[PATH_MAX];
+
+	rc.nameservers = g_ptr_array_new ();
+	rc.searches = g_ptr_array_new ();
+	rc.options = g_ptr_array_new ();
+	rc.nis_domain = NULL;
+	rc.nis_servers = g_ptr_array_new ();
+
+	if (config)
+		merge_one_ip_config (&rc, ifindex, config);
+
+	if (rc.searches->len)
+		searches = _ptrarray_to_strv (rc.searches);
+	else
+		g_ptr_array_free (rc.searches, TRUE);
+
+	if (rc.nameservers->len)
+		nameservers = _ptrarray_to_strv (rc.nameservers);
+	else
+		g_ptr_array_free (rc.nameservers, TRUE);
+
+	if (rc.nis_servers->len)
+		nis_servers = _ptrarray_to_strv (rc.nis_servers);
+	else
+		g_ptr_array_free (rc.nis_servers, TRUE);
+
+	if (rc.options->len)
+		options = _ptrarray_to_strv (rc.options);
+	else
+		g_ptr_array_free (rc.options, TRUE);
+
+	nis_domain = rc.nis_domain;
+
+	strcpy(resolv_path, RESOLV_CONF);
+	strcat(resolv_path, ".");
+	strcat(resolv_path, iface);
+
+	success = update_resolv_conf (self,
+	                              resolv_path,
+	                              NM_CAST_STRV_CC (searches),
+	                              NM_CAST_STRV_CC (nameservers),
+	                              NM_CAST_STRV_CC (options),
+	                              error,
+	                              NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE);
+
+	return success == SR_SUCCESS;
+}
+
+gboolean
 nm_dns_manager_set_ip_config (NMDnsManager *self,
                               NMIPConfig *ip_config,
                               NMDnsIPConfigType ip_config_type)
@@ -1648,6 +1720,7 @@ nm_dns_manager_set_ip_config (NMDnsManag
 	GError *error = NULL;
 	NMDnsIPConfigData *ip_data;
 	NMDnsConfigData *data;
+	const char *iface;
 	int ifindex;
 	NMDnsIPConfigData **p_best;
 
@@ -1657,6 +1730,7 @@ nm_dns_manager_set_ip_config (NMDnsManag
 	ifindex = nm_ip_config_get_ifindex (ip_config);
 	g_return_val_if_fail (ifindex > 0, FALSE);
 
+	iface = nm_platform_link_get_name (NM_PLATFORM_GET, ifindex);
 	priv = NM_DNS_MANAGER_GET_PRIVATE (self);
 
 	data = g_hash_table_lookup (priv->configs, GINT_TO_POINTER (ifindex));
@@ -1724,6 +1798,13 @@ changed:
 		g_clear_error (&error);
 	}
 
+	if (!xc_rewrite_resolv_conf (self, iface, ifindex, ip_config, &error)) {
+		_LOGW ("Could not commit DNS changes: (%d) %s",
+			error ? error->code : -1,
+			error && error->message ? error->message : "(unknown)");
+		g_clear_error (&error);
+	}
+
 	return TRUE;
 }
 
--- a/src/nm-policy.c
+++ b/src/nm-policy.c
@@ -1871,9 +1871,6 @@ device_state_changed (NMDevice *device,
 		ip4_config = nm_device_get_ip4_config (device);
 		if (ip4_config)
 			_dns_manager_set_ip_config (priv->dns_manager, NM_IP_CONFIG_CAST (ip4_config), NM_DNS_IP_CONFIG_TYPE_DEFAULT, device);
-		ip6_config = nm_device_get_ip6_config (device);
-		if (ip6_config)
-			_dns_manager_set_ip_config (priv->dns_manager, NM_IP_CONFIG_CAST (ip6_config), NM_DNS_IP_CONFIG_TYPE_DEFAULT, device);
 
 		update_routing_and_dns (self, FALSE);
 
