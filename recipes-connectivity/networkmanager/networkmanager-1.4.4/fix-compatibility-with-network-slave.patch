#OpenXT:Modify .xml files to help xc-rpcgen generate rpc stubs used by network-slave
#
#Reason for modifying these .xml files:
#       * The new version of networkmanager introduces a different 'type' for variables which is
#         currently not handled by xc-rpcgen.
#       * The convention used in xc-rpcgen causes duplicate symbols to be generated which results in an error.
#
#The proper way of handling the above issue is to fix xc-rpcgen to properly generate rpc stubs with given input files.
#This is a separate task in its own. The current fix is just a workaround.
--- a/introspection/nm-device.xml
+++ b/introspection/nm-device.xml
@@ -84,15 +84,6 @@
     <property name="State" type="u" access="read"/>
 
     <!--
-        StateReason:
-
-        The current state and reason for changing to that state.
-
-        Returns: A tuple of  <link linkend="NMDeviceState">NMDeviceState</link> and  <link linkend="NMDeviceStateReason">NMDeviceStateReason</link>.
-    -->
-    <property name="StateReason" type="(uu)" access="read"/>
-
-    <!--
         ActiveConnection:
 
         Object path of an ActiveConnection object that "owns" this device during
@@ -317,5 +308,448 @@
       <arg name="old_state" type="u"/>
       <arg name="reason" type="u"/>
     </signal>
+
+    <tp:enum name="NM_DEVICE_STATE" type="u">
+      <tp:enumvalue suffix="UNKNOWN" value="0">
+        <tp:docstring>
+          The device is in an unknown state.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="UNMANAGED" value="10">
+        <tp:docstring>
+          The device is recognized but not managed by NetworkManager.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="UNAVAILABLE" value="20">
+        <tp:docstring>
+          The device cannot be used (carrier off, rfkill, etc).
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DISCONNECTED" value="30">
+        <tp:docstring>
+          The device is not connected.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="PREPARE" value="40">
+        <tp:docstring>
+          The device is preparing to connect.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONFIG" value="50">
+        <tp:docstring>
+          The device is being configured.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="NEED_AUTH" value="60">
+        <tp:docstring>
+          The device is awaiting secrets necessary to continue connection.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="IP_CONFIG" value="70">
+        <tp:docstring>
+          The IP settings of the device are being requested and configured.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="IP_CHECK" value="80">
+        <tp:docstring>
+          The device's IP connectivity ability is being determined.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SECONDARIES" value="90">
+        <tp:docstring>
+          The device is waiting for secondary connections to be activated.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="ACTIVATED" value="100">
+        <tp:docstring>
+          The device is active.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DEACTIVATING" value="110">
+        <tp:docstring>
+          The device's network connection is being torn down.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="FAILED" value="120">
+        <tp:docstring>
+          The device is in a failure state following an attempt to activate it.
+        </tp:docstring>
+      </tp:enumvalue>
+    </tp:enum>
+
+    <tp:enum name="NM_DEVICE_TYPE" type="u">
+      <tp:enumvalue suffix="UNKNOWN" value="0">
+        <tp:docstring>
+          The device type is unknown.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="ETHERNET" value="1">
+        <tp:docstring>
+          The device is wired Ethernet device.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="WIFI" value="2">
+        <tp:docstring>
+          The device is an 802.11 WiFi device.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="UNUSED1" value="3">
+        <tp:docstring>Unused</tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="UNUSED2" value="4">
+        <tp:docstring>Unused</tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="BT" value="5">
+        <tp:docstring>
+          The device is Bluetooth device that provides PAN or DUN capabilities.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="OLPC_MESH" value="6">
+        <tp:docstring>
+          The device is an OLPC mesh networking device.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="WIMAX" value="7">
+        <tp:docstring>
+          The device is an 802.16e Mobile WiMAX device.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM" value="8">
+        <tp:docstring>
+          The device is a modem supporting one or more of analog telephone,
+          CDMA/EVDO, GSM/UMTS/HSPA, or LTE standards to access a cellular or
+          wireline data network.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="INFINIBAND" value="9">
+        <tp:docstring>
+          The device is an IP-capable InfiniBand interface.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="BOND" value="10">
+        <tp:docstring>
+          The device is a bond master interface.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="VLAN" value="11">
+        <tp:docstring>
+          The device is a VLAN interface.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="ADSL" value="12">
+        <tp:docstring>
+          The device is an ADSL device supporting PPPoE and PPPoATM protocols.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="BRIDGE" value="13">
+        <tp:docstring>
+          The device is a bridge interface.
+        </tp:docstring>
+      </tp:enumvalue>
+    </tp:enum>
+
+    <tp:flags name="NM_DEVICE_CAP" value-prefix="NM_DEVICE_CAP" type="u">
+      <tp:flag suffix="NONE" value="0x0">
+        <tp:docstring>Null capability.</tp:docstring>
+      </tp:flag>
+      <tp:flag suffix="NM_SUPPORTED" value="0x1">
+        <tp:docstring>The device is supported by NetworkManager.</tp:docstring>
+      </tp:flag>
+      <tp:flag suffix="CARRIER_DETECT" value="0x2">
+        <tp:docstring>The device supports carrier detection.</tp:docstring>
+      </tp:flag>
+    </tp:flags>
+
+    <tp:enum name="NM_DEVICE_STATE_REASON" type="u">
+      <tp:enumvalue suffix="UNKNOWN" value="0">
+        <tp:docstring>
+          The reason for the device state change is unknown.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="NONE" value="1">
+        <tp:docstring>
+          The state change is normal.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="NOW_MANAGED" value="2">
+        <tp:docstring>
+          The device is now managed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="NOW_UNMANAGED" value="3">
+        <tp:docstring>
+          The device is no longer managed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONFIG_FAILED" value="4">
+        <tp:docstring>
+          The device could not be readied for configuration.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONFIG_UNAVAILABLE" value="5">
+        <tp:docstring>
+          IP configuration could not be reserved (no available address, timeout, etc).
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONFIG_EXPIRED" value="6">
+        <tp:docstring>
+          The IP configuration is no longer valid.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="NO_SECRETS" value="7">
+        <tp:docstring>
+          Secrets were required, but not provided.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SUPPLICANT_DISCONNECT" value="8">
+        <tp:docstring>
+          The 802.1X supplicant disconnected from the access point or authentication server.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SUPPLICANT_CONFIG_FAILED" value="9">
+        <tp:docstring>
+          Configuration of the 802.1X supplicant failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SUPPLICANT_FAILED" value="10">
+        <tp:docstring>
+          The 802.1X supplicant quit or failed unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SUPPLICANT_TIMEOUT" value="11">
+        <tp:docstring>
+          The 802.1X supplicant took too long to authenticate.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="PPP_START_FAILED" value="12">
+        <tp:docstring>
+          The PPP service failed to start within the allowed time.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="PPP_DISCONNECT" value="13">
+        <tp:docstring>
+          The PPP service disconnected unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="PPP_FAILED" value="14">
+        <tp:docstring>
+          The PPP service quit or failed unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DHCP_START_FAILED" value="15">
+        <tp:docstring>
+          The DHCP service failed to start within the allowed time.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DHCP_ERROR" value="16">
+        <tp:docstring>
+          The DHCP service reported an unexpected error.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DHCP_FAILED" value="17">
+        <tp:docstring>
+          The DHCP service quit or failed unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SHARED_START_FAILED" value="18">
+        <tp:docstring>
+          The shared connection service failed to start.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SHARED_FAILED" value="19">
+        <tp:docstring>
+          The shared connection service quit or failed unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="AUTOIP_START_FAILED" value="20">
+        <tp:docstring>
+          The AutoIP service failed to start.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="AUTOIP_ERROR" value="21">
+        <tp:docstring>
+          The AutoIP service reported an unexpected error.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="AUTOIP_FAILED" value="22">
+        <tp:docstring>
+          The AutoIP service quit or failed unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_BUSY" value="23">
+        <tp:docstring>
+          Dialing failed because the line was busy.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_NO_DIAL_TONE" value="24">
+        <tp:docstring>
+          Dialing failed because there was no dial tone.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_NO_CARRIER" value="25">
+        <tp:docstring>
+          Dialing failed because there was carrier.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_DIAL_TIMEOUT" value="26">
+        <tp:docstring>
+          Dialing timed out.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_DIAL_FAILED" value="27">
+        <tp:docstring>
+          Dialing failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_INIT_FAILED" value="28">
+        <tp:docstring>
+          Modem initialization failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_APN_FAILED" value="29">
+        <tp:docstring>
+          Failed to select the specified GSM APN.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_REGISTRATION_NOT_SEARCHING" value="30">
+        <tp:docstring>
+          Not searching for networks.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_REGISTRATION_DENIED" value="31">
+        <tp:docstring>
+          Network registration was denied.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_REGISTRATION_TIMEOUT" value="32">
+        <tp:docstring>
+          Network registration timed out.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_REGISTRATION_FAILED" value="33">
+        <tp:docstring>
+          Failed to register with the requested GSM network.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_PIN_CHECK_FAILED" value="34">
+        <tp:docstring>
+          PIN check failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="FIRMWARE_MISSING" value="35">
+        <tp:docstring>
+          Necessary firmware for the device may be missing.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="REMOVED" value="36">
+        <tp:docstring>
+          The device was removed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SLEEPING" value="37">
+        <tp:docstring>
+          NetworkManager went to sleep.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONNECTION_REMOVED" value="38">
+        <tp:docstring>
+          The device's active connection was removed or disappeared.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="USER_REQUESTED" value="39">
+        <tp:docstring>
+          A user or client requested the disconnection.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CARRIER" value="40">
+        <tp:docstring>
+          The device's carrier/link changed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="CONNECTION_ASSUMED" value="41">
+        <tp:docstring>
+          The device's existing connection was assumed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SUPPLICANT_AVAILABLE" value="42">
+        <tp:docstring>
+          The 802.1x supplicant is now available.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_NOT_FOUND" value="43">
+        <tp:docstring>
+          The modem could not be found.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="BT_FAILED" value="44">
+        <tp:docstring>
+          The Bluetooth connection timed out or failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_SIM_NOT_INSERTED" value="45">
+        <tp:docstring>
+          GSM Modem's SIM Card not inserted.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_SIM_PIN_REQUIRED" value="46">
+        <tp:docstring>
+          GSM Modem's SIM Pin required.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_SIM_PUK_REQUIRED" value="47">
+        <tp:docstring>
+          GSM Modem's SIM Puk required.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="GSM_SIM_WRONG" value="48">
+        <tp:docstring>
+          GSM Modem's SIM wrong
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="INFINIBAND_MODE" value="49">
+        <tp:docstring>
+          InfiniBand device does not support connected mode.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DEPENDENCY_FAILED" value="50">
+        <tp:docstring>
+          A dependency of the connection failed.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="BR2684_FAILED" value="51">
+        <tp:docstring>
+          Problem with the RFC 2684 Ethernet over ADSL bridge.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="MODEM_MANAGER_UNAVAILABLE" value="52">
+        <tp:docstring>
+          ModemManager was not running or quit unexpectedly.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SSID_NOT_FOUND" value="53">
+        <tp:docstring>
+          The 802.11 Wi-Fi network could not be found.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="SECONDARY_CONNECTION_FAILED" value="54">
+        <tp:docstring>
+          A secondary connection of the base connection failed.
+        </tp:docstring>
+      </tp:enumvalue>
+    </tp:enum>
+
+    <tp:struct name="NM_DEVICE_STATE_REASON_STRUCT">
+      <tp:member type="u" name="state" tp:type="NM_DEVICE_STATE">
+        <tp:docstring>
+          The device state.
+        </tp:docstring>
+      </tp:member>
+      <tp:member type="u" name="reason" tp:type="NM_DEVICE_STATE_REASON">
+        <tp:docstring>
+          The reason for originally changing to the device state.
+        </tp:docstring>
+      </tp:member>
+    </tp:struct>
+
   </interface>
 </node>
--- a/introspection/nmdbus-device-org.freedesktop.NetworkManager.Device.xml
+++ b/introspection/nmdbus-device-org.freedesktop.NetworkManager.Device.xml
@@ -38,7 +38,6 @@
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.Capabilities">Capabilities</link>          readable   u
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.Ip4Address">Ip4Address</link>            readable   u
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.State">State</link>                 readable   u
-<link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.StateReason">StateReason</link>           readable   (uu)
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.ActiveConnection">ActiveConnection</link>      readable   o
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.Ip4Config">Ip4Config</link>             readable   o
 <link linkend="gdbus-property-org-freedesktop-NetworkManager-Device.Dhcp4Config">Dhcp4Config</link>           readable   o
@@ -180,10 +179,6 @@ StateChanged (u new_state,
   <term><literal>u <parameter>old_state</parameter></literal>:</term>
   <listitem><para>(<link linkend="NMDeviceState">NMDeviceState</link>) The previous state of the device.</para></listitem>
 </varlistentry>
-<varlistentry>
-  <term><literal>u <parameter>reason</parameter></literal>:</term>
-  <listitem><para>(<link linkend="NMDeviceStateReason">NMDeviceStateReason</link>) A reason for the state transition.</para></listitem>
-</varlistentry>
 </variablelist>
 </refsect2>
 </refsect1>
@@ -286,16 +281,6 @@ State  readable   u
 </para><para>        Returns: <link linkend="NMDeviceState">NMDeviceState</link>
 </para>
 </refsect2>
-<refsect2 role="property" id="gdbus-property-org-freedesktop-NetworkManager-Device.StateReason">
-  <title>The "StateReason" property</title>
-  <indexterm zone="gdbus-property-org-freedesktop-NetworkManager-Device.StateReason"><primary sortas=".Device:StateReason">org.freedesktop.NetworkManager.Device:StateReason</primary></indexterm>
-<programlisting>
-StateReason  readable   (uu)
-</programlisting>
-<para>        The current state and reason for changing to that state.
-</para><para>        Returns: A tuple of  <link linkend="NMDeviceState">NMDeviceState</link> and  <link linkend="NMDeviceStateReason">NMDeviceStateReason</link>.
-</para>
-</refsect2>
 <refsect2 role="property" id="gdbus-property-org-freedesktop-NetworkManager-Device.ActiveConnection">
   <title>The "ActiveConnection" property</title>
   <indexterm zone="gdbus-property-org-freedesktop-NetworkManager-Device.ActiveConnection"><primary sortas=".Device:ActiveConnection">org.freedesktop.NetworkManager.Device:ActiveConnection</primary></indexterm>
--- a/introspection/nm-active-connection.xml
+++ b/introspection/nm-active-connection.xml
@@ -154,5 +154,33 @@
     <signal name="PropertiesChanged">
       <arg name="properties" type="a{sv}"/>
     </signal>
+
+    <tp:enum name="NM_ACTIVE_CONNECTION_STATE" type="u">
+      <tp:enumvalue suffix="UNKNOWN" value="0">
+        <tp:docstring>
+          The active connection is in an unknown state.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="ACTIVATING" value="1">
+        <tp:docstring>
+          The connection is activating.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="ACTIVATED" value="2">
+        <tp:docstring>
+          The connection is activated.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DEACTIVATING" value="3">
+        <tp:docstring>
+          The connection is being torn down and cleaned up.
+        </tp:docstring>
+      </tp:enumvalue>
+      <tp:enumvalue suffix="DEACTIVATED" value="4">
+        <tp:docstring>
+          The connection is no longer active.
+        </tp:docstring>
+      </tp:enumvalue>
+    </tp:enum>
   </interface>
 </node>
--- /dev/null
+++ b/openxt/nm-device-wifi.xml
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<node name="/">
+  <interface name="org.freedesktop.NetworkManager.Device.Wireless">
+    <annotation name="org.gtk.GDBus.C.Name" value="DeviceWifi"/>
+
+    <!--
+        GetAccessPoints:
+        @access_points: List of access point object paths.
+
+        DEPRECATED. Get the list of access points visible to this device. Note
+        that this list does not include access points which hide their SSID. To
+        retrieve a list of all access points (including hidden ones) use the
+        GetAllAccessPoints() method.
+    -->
+    <method name="GetAccessPoints">
+      <arg name="access_points" type="ao" direction="out"/>
+      </method>
+
+    <!--
+        GetAllAccessPoints:
+        @access_points: List of access point object paths.
+
+        Get the list of all access points visible to this device, including hidden
+        ones for which the SSID is not yet known.
+    -->
+    <method name="GetAllAccessPoints">
+      <arg name="access_points" type="ao" direction="out"/>
+      </method>
+
+    <!--
+        RequestScan:
+        @options: Options of scan. Currently 'ssids' option with value of "aay" type is supported.
+
+        Request the device to scan
+    -->
+    <method name="RequestScan">
+      <arg name="options" type="a{sv}" direction="in"/>
+      </method>
+
+    <!--
+        HwAddress:
+
+        The active hardware address of the device.
+    -->
+    <property name="HwAddress" type="s" access="read"/>
+
+    <!--
+        PermHwAddress:
+
+        The permanent hardware address of the device.
+    -->
+    <property name="PermHwAddress" type="s" access="read"/>
+
+    <!--
+        Mode:
+
+        The operating mode of the wireless device.
+
+        Returns: <link linkend="NM80211Mode">NM80211Mode</link>
+    -->
+    <property name="Mode" type="u" access="read"/>
+
+    <!--
+        Bitrate:
+
+        The bit rate currently used by the wireless device, in kilobits/second
+        (Kb/s).
+    -->
+    <property name="Bitrate" type="u" access="read"/>
+
+    <!--
+        ActiveAccessPoint:
+
+        Object path of the access point currently used by the wireless device.
+    -->
+    <property name="ActiveAccessPoint" type="o" access="read"/>
+
+    <!--
+        WirelessCapabilities:
+
+        The capabilities of the wireless device.
+
+        Returns: <link linkend="NMDeviceWifiCapabilities">NMDeviceWifiCapabilities</link>
+    -->
+    <property name="WirelessCapabilities" type="u" access="read"/>
+
+    <!--
+        PropertiesChanged:
+        @properties: A dictionary containing the changed parameters.
+
+        DEPRECATED. Use the standard "PropertiesChanged" signal from "org.freedesktop.DBus.Properties" instead which exists since version NetworkManager 1.2.0.
+    -->
+    <signal name="PropertiesChanged">
+        <arg name="properties" type="a{sv}"/>
+        </signal>
+
+    <!--
+        AccessPointAdded:
+        @access_point: The object path of the newly found access point.
+
+        Emitted when a new access point is found by the device.
+    -->
+    <signal name="AccessPointAdded">
+        <arg name="access_point" type="o"/>
+        </signal>
+
+    <!--
+        AccessPointRemoved:
+        @access_point: The object path of the access point that has disappeared.
+
+        Emitted when an access point disappears from view of the device.
+    -->
+    <signal name="AccessPointRemoved">
+      <arg name="access_point" type="o"/>
+    </signal>
+  </interface>
+</node>
--- /dev/null
+++ b/openxt/nm-manager.xml
@@ -0,0 +1,437 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<node name="/org/freedesktop/NetworkManager">
+  <interface name="org.freedesktop.NetworkManager">
+    <annotation name="org.gtk.GDBus.C.Name" value="Manager"/>
+
+    <!--
+        Reload:
+        @flags: optional flags to specify which parts shall be reloaded.
+
+        Reload NetworkManager's configuration and perform certain updates, like flushing a cache or
+        rewriting external state to disk. This is similar to sending SIGHUP to NetworkManager but it
+        allows for more fine-grained control over what to reload (see @flags). It also allows
+        non-root access via PolicyKit and contrary to signals it is synchronous.
+
+        No flags (0x00) means to reload everything that is supported which is identical to
+        sending a SIGHUP.
+        (0x01) means to reload the NetworkManager.conf configuration from disk. Note that this
+        does not include connections, which can be reloaded via Setting's ReloadConnections.
+        (0x02) means to update DNS configuration, which usually involves writing /etc/resolv.conf
+        anew.
+        (0x04) means to restart the DNS plugin. This is for example useful when using
+        dnsmasq plugin, which uses additional configuration in /etc/NetworkManager/dnsmasq.d.
+        If you edit those files, you can restart the DNS plugin. This action shortly interrupts
+        name resolution.
+        Note that flags may affect each other. For example, restarting the DNS plugin (0x04)
+        implicitly updates DNS too (0x02). Or when reloading the configuration (0x01), changes
+        to DNS setting also cause a DNS update (0x02). However, (0x01) does not involve restarting
+        the DNS plugin (0x04) or update resolv.conf (0x02), unless the DNS related configuration
+        changes in NetworkManager.conf.
+    -->
+    <method name="Reload">
+      <arg name="flags" type="u" direction="in"/>
+    </method>
+
+    <!--
+        GetDevices:
+        @devices: List of object paths of network devices known to the system. This list does not include device placeholders (see GetAllDevices()).
+
+        Get the list of realized network devices.
+    -->
+    <method name="GetDevices">
+      <arg name="devices" type="ao" direction="out"/>
+    </method>
+
+    <!--
+        GetAllDevices:
+        @devices: List of object paths of network devices and device placeholders (eg, devices that do not yet exist but which can be automatically created by NetworkManager if one of their AvailableConnections was activated).
+
+        Get the list of all network devices.
+    -->
+    <method name="GetAllDevices">
+      <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="impl_manager_get_all_devices"/>
+      <arg name="devices" type="ao" direction="out"/>
+    </method>
+
+    <!--
+        GetDeviceByIpIface:
+        @iface: Interface name of the device to find.
+        @device: Object path of the network device.
+
+        Return the object path of the network device referenced by its IP
+        interface name. Note that some devices (usually modems) only have an IP
+        interface name when they are connected.
+    -->
+    <method name="GetDeviceByIpIface">
+      <arg name="iface" type="s" direction="in"/>
+      <arg name="device" type="o" direction="out"/>
+    </method>
+
+    <!--
+        ActivateConnection:
+        @connection: The connection to activate. If "/" is given, a valid device path must be given, and NetworkManager picks the best connection to activate for the given device. VPN connections must always pass a valid connection path.
+        @device: The object path of device to be activated for physical connections. This parameter is ignored for VPN connections, because the specific_object (if provided) specifies the device to use.
+        @specific_object: The path of a connection-type-specific object this activation should use. This parameter is currently ignored for wired and mobile broadband connections, and the value of "/" should be used (ie, no specific object). For WiFi connections, pass the object path of a specific AP from the card's scan list, or "/" to pick an AP automatically. For VPN connections, pass the object path of an ActiveConnection object that should serve as the "base" connection (to which the VPN connections lifetime will be tied), or pass "/" and NM will automatically use the current default device.
+        @active_connection: The path of the active connection object representing this active connection.
+
+        Activate a connection using the supplied device.
+    -->
+    <method name="ActivateConnection">
+      <arg name="connection" type="o" direction="in"/>
+      <arg name="device" type="o" direction="in"/>
+      <arg name="specific_object" type="o" direction="in"/>
+      <arg name="active_connection" type="o" direction="out"/>
+    </method>
+
+    <!--
+        AddAndActivateConnection:
+        @connection: Connection settings and properties; if incomplete missing settings will be automatically completed using the given device and specific object.
+        @device: The object path of device to be activated using the given connection.
+        @specific_object: The path of a connection-type-specific object this activation should use. This parameter is currently ignored for wired and mobile broadband connections, and the value of "/" should be used (ie, no specific object). For WiFi connections, pass the object path of a specific AP from the card's scan list, which will be used to complete the details of the newly added connection.
+        @path: Object path of the new connection that was just added.
+        @active_connection: The path of the active connection object representing this active connection.
+
+        Adds a new connection using the given details (if any) as a template
+        (automatically filling in missing settings with the capabilities of the
+        given device and specific object), then activate the new connection.
+        Cannot be used for VPN connections at this time.
+    -->
+    <method name="AddAndActivateConnection">
+      <arg name="connection" type="a{sa{sv}}" direction="in"/>
+      <arg name="device" type="o" direction="in"/>
+      <arg name="specific_object" type="o" direction="in"/>
+      <arg name="path" type="o" direction="out"/>
+      <arg name="active_connection" type="o" direction="out"/>
+    </method>
+
+    <!--
+        DeactivateConnection:
+        @active_connection: The currently active connection to deactivate.
+
+        Deactivate an active connection.
+    -->
+    <method name="DeactivateConnection">
+      <arg name="active_connection" type="o" direction="in"/>
+    </method>
+
+    <!--
+        Sleep:
+        @sleep: Indicates whether the NetworkManager daemon should sleep or wake.
+
+        Control the NetworkManager daemon's sleep state. When asleep, all
+        interfaces that it manages are deactivated. When awake, devices are
+        available to be activated. This command should not be called directly by
+        users or clients; it is intended for system suspend/resume tracking.
+    -->
+    <method name="Sleep">
+      <arg name="sleep" type="b" direction="in"/>
+    </method>
+
+    <!--
+        Enable:
+        @enable: If FALSE, indicates that all networking should be disabled. If TRUE, indicates that NetworkManager should begin managing network devices.
+
+        Control whether overall networking is enabled or disabled. When disabled,
+        all interfaces that NM manages are deactivated. When enabled, all managed
+        interfaces are re-enabled and available to be activated. This command
+        should be used by clients that provide to users the ability to
+        enable/disable all networking.
+    -->
+    <method name="Enable">
+      <arg name="enable" type="b" direction="in"/>
+    </method>
+
+    <!--
+        GetPermissions:
+        @permissions: Dictionary of available permissions and results. Each permission is represented by a name (ie "org.freedesktop.NetworkManager.Foobar") and each result is one of the following values: "yes" (the permission is available), "auth" (the permission is available after a successful authentication), or "no" (the permission is denied). Clients may use these values in the UI to indicate the ability to perform certain operations.
+
+        Returns the permissions a caller has for various authenticated operations
+        that NetworkManager provides, like Enable/Disable networking, changing
+        WiFi, WWAN, and WiMAX state, etc.
+    -->
+    <method name="GetPermissions">
+      <arg name="permissions" type="a{ss}" direction="out"/>
+    </method>
+
+    <!--
+        CheckPermissions:
+
+        Emitted when system authorization details change, indicating that clients
+        may wish to recheck permissions with GetPermissions.
+    -->
+    <signal name="CheckPermissions"/>
+
+    <!--
+        SetLogging:
+        @level: One of [ERR, WARN, INFO, DEBUG, TRACE, OFF, KEEP]. This level is applied to the domains as specified in the domains argument. Except for the special level "KEEP", all unmentioned domains are disabled entirely. "KEEP" is special and allows not to change the current setting except for the specified domains. E.g. level=KEEP and domains=PLATFORM:DEBUG will only touch the platform domain.
+        @domains: A combination of logging domains separated by commas (','), or "NONE" to disable logging. Each domain enables logging for operations related to that domain. Available domains are: [PLATFORM, RFKILL, ETHER, WIFI, BT, MB, DHCP4, DHCP6, PPP, WIFI_SCAN, IP4, IP6, AUTOIP4, DNS, VPN, SHARING, SUPPLICANT, AGENTS, SETTINGS, SUSPEND, CORE, DEVICE, OLPC, WIMAX, INFINIBAND, FIREWALL, ADSL, BOND, VLAN, BRIDGE, DBUS_PROPS, TEAM, CONCHECK, DCB, DISPATCH, AUDIT]. In addition to these domains, the following special domains can be used: [NONE, ALL, DEFAULT, DHCP, IP]. You can also specify that some domains should log at a different level from the default by appending a colon (':') and a log level (eg, 'WIFI:DEBUG'). If an empty string is given, the log level is changed but the current set of log domains remains unchanged.
+
+        Set logging verbosity and which operations are logged.
+    -->
+    <method name="SetLogging">
+      <arg name="level" type="s" direction="in"/>
+      <arg name="domains" type="s" direction="in"/>
+    </method>
+
+    <!--
+        GetLogging:
+        @level: One of [ERR, WARN, INFO, DEBUG, TRACE].
+        @domains: For available domains see SetLogging() call.
+
+        Get current logging verbosity level and operations domains.
+    -->
+    <method name="GetLogging">
+      <arg name="level" type="s" direction="out"/>
+      <arg name="domains" type="s" direction="out"/>
+    </method>
+
+    <!--
+        CheckConnectivity:
+        @connectivity: (<link linkend="NMConnectivityState">NMConnectivityState</link>) The current connectivity state.
+
+        Re-check the network connectivity state.
+    -->
+    <method name="CheckConnectivity">
+      <arg name="connectivity" type="u" direction="out"/>
+    </method>
+
+    <!--
+        state:
+        @state: <link linkend="NMState">NMState</link>
+
+        The overall networking state as determined by the NetworkManager daemon,
+        based on the state of network devices under it's management.
+    -->
+    <method name="state">
+      <arg name="state" type="u" direction="out"/>
+    </method>
+
+    <!--
+        CheckpointCreate:
+
+        @devices: a list of device paths for which a checkpoint should be created. An empty list means all managed devices.
+        @rollback_timeout: the time in seconds until NetworkManager will automatically rollback to the checkpoint. Set to zero for infinite.
+        @flags: optional flags that influence the creation.
+        @checkpoint: on success, returns the path of the checkpoint.
+
+        Create a checkpoint of the current networking configuration
+        for given interfaces. If @rollback_timeout is not zero, a
+        rollback is automatically performed after the given timeout.
+    -->
+    <method name="CheckpointCreate">
+      <arg name="devices" type="ao" direction="in"/>
+      <arg name="rollback_timeout" type="u" direction="in"/>
+      <arg name="flags" type="u" direction="in"/>
+      <arg name="checkpoint" type="o" direction="out"/>
+    </method>
+
+    <!--
+        CheckpointDestroy:
+        @checkpoint: the checkpoint to be destroyed. Set to empty to cancel all pending checkpoints.
+
+        Destroy a previously created checkpoint.
+    -->
+    <method name="CheckpointDestroy">
+      <arg name="checkpoint" type="o" direction="in"/>
+    </method>
+
+    <!--
+        CheckpointRollback:
+        @checkpoint: the checkpoint to be rolled back.
+        @result: on return, a dictionary of devices and results. Devices are represented by their original D-Bus path; each result is a <link linkend="NMRollbackResult">RollbackResult</link>.
+
+        Rollback a checkpoint before the timeout is reached.
+    -->
+    <method name="CheckpointRollback">
+      <arg name="checkpoint" type="o" direction="in"/>
+      <arg name="result" type="a{su}" direction="out" />
+    </method>
+
+    <!--
+        NetworkingEnabled:
+
+        Indicates if overall networking is currently enabled or not. See the
+        Enable() method.
+    -->
+    <property name="NetworkingEnabled" type="b" access="read"/>
+
+    <!--
+        WirelessEnabled:
+
+        Indicates if wireless is currently enabled or not.
+    -->
+    <property name="WirelessEnabled" type="b" access="readwrite"/>
+
+    <!--
+        WirelessHardwareEnabled:
+
+        Indicates if the wireless hardware is currently enabled, i.e. the state of
+        the RF kill switch.
+    -->
+    <property name="WirelessHardwareEnabled" type="b" access="read"/>
+
+    <!--
+        WwanEnabled:
+
+        Indicates if mobile broadband devices are currently enabled or not.
+    -->
+    <property name="WwanEnabled" type="b" access="readwrite"/>
+
+    <!--
+        WwanHardwareEnabled:
+
+        Indicates if the mobile broadband hardware is currently enabled, i.e. the
+        state of the RF kill switch.
+    -->
+    <property name="WwanHardwareEnabled" type="b" access="read"/>
+
+    <!--
+        WimaxEnabled:
+
+        Indicates if WiMAX devices are currently enabled or not.
+    -->
+    <property name="WimaxEnabled" type="b" access="readwrite"/>
+
+    <!--
+        WimaxHardwareEnabled:
+
+        Indicates if the WiMAX hardware is currently enabled, i.e. the state of
+        the RF kill switch.
+    -->
+    <property name="WimaxHardwareEnabled" type="b" access="read"/>
+
+    <!--
+        ActiveConnections:
+
+        List of active connection object paths.
+    -->
+    <property name="ActiveConnections" type="ao" access="read"/>
+
+    <!--
+        PrimaryConnection:
+
+        The object path of the "primary" active connection being used to access
+        the network. In particular, if there is no VPN active, or the VPN does not
+        have the default route, then this indicates the connection that has the
+        default route. If there is a VPN active with the default route, then this
+        indicates the connection that contains the route to the VPN endpoint.
+    -->
+    <property name="PrimaryConnection" type="o" access="read"/>
+
+    <!--
+        PrimaryConnectionType:
+
+        The connection type of the "primary" active connection being used to
+        access the network. This is the same as the Type property on the object
+        indicated by PrimaryConnection.
+    -->
+    <property name="PrimaryConnectionType" type="s" access="read"/>
+
+    <!--
+        Metered:
+
+        Indicates whether the connectivity is metered. This is equivalent to the
+        metered property of the device associated with the primary connection.
+
+        Returns: <link linkend="NMMetered">NMMetered</link>
+    -->
+    <property name="Metered" type="u" access="read"/>
+
+    <!--
+        ActivatingConnection:
+
+        The object path of an active connection that is currently being activated
+        and which is expected to become the new PrimaryConnection when it finishes
+        activating.
+    -->
+    <property name="ActivatingConnection" type="o" access="read"/>
+
+    <!--
+        Startup:
+
+        Indicates whether NM is still starting up; this becomes FALSE when NM has
+        finished attempting to activate every connection that it might be able to
+        activate at startup.
+    -->
+    <property name="Startup" type="b" access="read"/>
+
+    <!--
+        Version:
+
+        NetworkManager version.
+    -->
+    <property name="Version" type="s" access="read"/>
+
+    <!--
+        State:
+
+        The overall state of the NetworkManager daemon.
+
+        Returns: <link linkend="NMState">NMState</link>
+    -->
+    <property name="State" type="u" access="read"/>
+
+    <!--
+        StateChanged:
+        @state: (<link linkend="NMState">NMState</link>) The new state of NetworkManager.
+
+        NetworkManager's state changed.
+    -->
+    <signal name="StateChanged">
+      <arg name="state" type="u"/>
+    </signal>
+
+    <!--
+        Connectivity:
+
+        The network connectivity state.
+
+        Returns: <link linkend="NMConnectivityState">NMConnectivityState</link>
+    -->
+    <property name="Connectivity" type="u" access="read"/>
+
+    <!--
+        GlobalDnsConfiguration:
+
+        Dictionary of global DNS settings where the key is one of "searches",
+        "options" and "domains". The values for the "searches" and "options" keys
+        are string arrays describing the list of search domains and resolver
+        options, respectively. The value of the "domains" key is a second-level
+        dictionary, where each key is a domain name, and each key's value is a
+        third-level dictionary with the keys "servers" and "options". "servers" is
+        a string array of DNS servers, "options" is a string array of
+        domain-specific options.
+    -->
+    <property name="GlobalDnsConfiguration" type="a{sv}" access="readwrite"/>
+
+    <!--
+        PropertiesChanged:
+        @properties: The changed properties.
+
+        DEPRECATED. Use the standard "PropertiesChanged" signal from "org.freedesktop.DBus.Properties" instead which exists since version NetworkManager 1.2.0.
+    -->
+    <signal name="PropertiesChanged">
+      <arg name="properties" type="a{sv}"/>
+    </signal>
+
+    <!--
+        DeviceAdded:
+        @device_path: The object path of the newly added device.
+
+        A device was added to the system
+    -->
+    <signal name="DeviceAdded">
+      <arg name="device_path" type="o"/>
+    </signal>
+
+    <!--
+        DeviceRemoved:
+        @device_path: The object path of the device that was just removed.
+
+        A device was removed from the system, and is no longer available.
+    -->
+    <signal name="DeviceRemoved">
+      <arg name="device_path" type="o"/>
+    </signal>
+  </interface>
+</node>
