#OpenXT:This fixes the device type property exposed to clients like nm-applet, nmcli, etc..,
#       Clients/libnm track most properties associated with devices via property_info exposed
#       over dbus, device-type associated with a device was missing in property info.
#       Device Type is useful while configuring network over nm-applet or other clients.
--- a/libnm/nm-device.c
+++ b/libnm/nm-device.c
@@ -226,6 +226,7 @@ init_dbus (NMObject *object)
 	const NMPropertiesInfo property_info[] = {
 		{ NM_DEVICE_UDI,               &priv->udi },
 		{ NM_DEVICE_INTERFACE,         &priv->iface },
+		{ NM_DEVICE_DEVICE_TYPE,       &priv->device_type },
 		{ NM_DEVICE_IP_INTERFACE,      &priv->ip_iface },
 		{ NM_DEVICE_DRIVER,            &priv->driver },
 		{ NM_DEVICE_DRIVER_VERSION,    &priv->driver_version },
@@ -251,7 +252,6 @@ init_dbus (NMObject *object)
 
 		/* Properties that exist in D-Bus but that we don't track */
 		{ "ip4-address", NULL },
-		{ "device-type", NULL },
 
 		{ NULL },
 	};
@@ -395,6 +395,36 @@ constructed (GObject *object)
 	g_warn_if_fail (G_OBJECT_TYPE (object) == _nm_device_gtype_from_dtype (priv->device_type));
 }
 
+static NMDeviceType
+coerce_type (NMDeviceType type)
+{
+	switch (type) {
+	case NM_DEVICE_TYPE_ETHERNET:
+	case NM_DEVICE_TYPE_WIFI:
+	case NM_DEVICE_TYPE_BT:
+	case NM_DEVICE_TYPE_OLPC_MESH:
+	case NM_DEVICE_TYPE_WIMAX:
+	case NM_DEVICE_TYPE_MODEM:
+	case NM_DEVICE_TYPE_INFINIBAND:
+	case NM_DEVICE_TYPE_BOND:
+	case NM_DEVICE_TYPE_TEAM:
+	case NM_DEVICE_TYPE_BRIDGE:
+	case NM_DEVICE_TYPE_VLAN:
+	case NM_DEVICE_TYPE_ADSL:
+	case NM_DEVICE_TYPE_MACVLAN:
+	case NM_DEVICE_TYPE_VXLAN:
+	case NM_DEVICE_TYPE_IP_TUNNEL:
+	case NM_DEVICE_TYPE_TUN:
+	case NM_DEVICE_TYPE_VETH:
+	case NM_DEVICE_TYPE_GENERIC:
+	case NM_DEVICE_TYPE_UNUSED1:
+	case NM_DEVICE_TYPE_UNUSED2:
+	case NM_DEVICE_TYPE_UNKNOWN:
+		return type;
+	}
+	return NM_DEVICE_TYPE_UNKNOWN;
+}
+
 static void
 dispose (GObject *object)
 {
@@ -446,7 +476,7 @@ get_property (GObject *object,
 
 	switch (prop_id) {
 	case PROP_DEVICE_TYPE:
-		g_value_set_enum (value, nm_device_get_device_type (device));
+		g_value_set_enum (value, coerce_type (nm_device_get_device_type (device)));
 		break;
 	case PROP_UDI:
 		g_value_set_string (value, nm_device_get_udi (device));
@@ -543,10 +573,6 @@ set_property (GObject *object,
 	gboolean b;
 
 	switch (prop_id) {
-	case PROP_DEVICE_TYPE:
-		/* Construct only */
-		priv->device_type = g_value_get_enum (value);
-		break;
 	case PROP_MANAGED:
 		b = g_value_get_boolean (value);
 		if (priv->managed != b)
