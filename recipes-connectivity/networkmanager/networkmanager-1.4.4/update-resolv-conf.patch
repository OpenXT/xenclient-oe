#OpenXT:Update resolv.conf for different interfaces as dnsmasq script running on different bridges makes use of it.
#       resolv.conf for different interfaces is done by appending the interface name to 'resolv.conf.' file.
#       For example: resolv.conf for interface wlan0 would be resolv.conf.wlan0
--- a/src/dns-manager/nm-dns-manager.c
+++ b/src/dns-manager/nm-dns-manager.c
@@ -147,6 +147,10 @@ struct _NMDnsManagerClass {
 	GObjectClass parent;
 };
 
+#ifndef RESOLV_CONF
+#define RESOLV_CONF "/var/volatile/etc/resolv.conf"
+#endif
+
 G_DEFINE_TYPE (NMDnsManager, nm_dns_manager, G_TYPE_OBJECT)
 
 NM_DEFINE_SINGLETON_INSTANCE (NMDnsManager);
@@ -651,6 +655,7 @@ dispatch_resolvconf (NMDnsManager *self,
 
 static SpawnResult
 update_resolv_conf (NMDnsManager *self,
+                    const char *resolv_path,
                     char **searches,
                     char **nameservers,
                     char **options,
@@ -663,7 +668,7 @@ update_resolv_conf (NMDnsManager *self,
 	gs_free char *content = NULL;
 	SpawnResult write_file_result = SR_SUCCESS;
 	int errsv;
-	const char *rc_path = _PATH_RESCONF;
+	const char *rc_path = resolv_path;
 	nm_auto_free char *rc_path_real = NULL;
 
 	/* If we are not managing /etc/resolv.conf and it points to
@@ -1161,7 +1166,7 @@ update_dns (NMDnsManager *self,
 		switch (priv->rc_manager) {
 		case NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK:
 		case NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE:
-			result = update_resolv_conf (self, searches, nameservers, options, error, priv->rc_manager);
+			result = update_resolv_conf (self, MY_RESOLV_CONF, searches, nameservers, options, error, priv->rc_manager);
 			resolv_conf_updated = TRUE;
 			break;
 		case NM_DNS_MANAGER_RESOLV_CONF_MAN_RESOLVCONF:
@@ -1178,7 +1183,7 @@ update_dns (NMDnsManager *self,
 		if (result == SR_NOTFOUND) {
 			_LOGD ("update-dns: program not available, writing to resolv.conf");
 			g_clear_error (error);
-			result = update_resolv_conf (self, searches, nameservers, options, error, NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK);
+			result = update_resolv_conf (self, MY_RESOLV_CONF, searches, nameservers, options, error, NM_DNS_MANAGER_RESOLV_CONF_MAN_SYMLINK);
 			resolv_conf_updated = TRUE;
 		}
 	}
@@ -1186,7 +1191,7 @@ update_dns (NMDnsManager *self,
 	/* Unless we've already done it, update private resolv.conf in NMRUNDIR
 	   ignoring any errors */
 	if (!resolv_conf_updated)
-		update_resolv_conf (self, searches, nameservers, options, NULL, NM_DNS_MANAGER_RESOLV_CONF_MAN_UNMANAGED);
+		update_resolv_conf (self, MY_RESOLV_CONF, searches, nameservers, options, NULL, NM_DNS_MANAGER_RESOLV_CONF_MAN_UNMANAGED);
 
 	/* signal that resolv.conf was changed */
 	if (update && result == SR_SUCCESS)
@@ -1286,6 +1291,89 @@ forget_data (NMDnsManager *self, NMDnsIP
 }
 
 static gboolean
+xc_rewrite_resolv_conf (NMDnsManager *self,
+            const char *iface,
+            gpointer config,
+            gboolean no_caching,
+            GError **error)
+{
+       NMDnsManagerPrivate *priv;
+       NMResolvConfData rc;
+       GSList *iter, *vpn_configs = NULL, *dev_configs = NULL, *other_configs = NULL;
+       const char *nis_domain = NULL;
+       char **searches = NULL;
+       char **nameservers = NULL;
+       char **nis_servers = NULL;
+       char **options = NULL;
+       int num, i, len;
+       SpawnResult success;
+       gboolean caching = FALSE;
+       char resolv_path[PATH_MAX];
+
+       rc.nameservers = g_ptr_array_new ();
+       rc.searches = g_ptr_array_new ();
+       rc.options = g_ptr_array_new ();
+       rc.nis_domain = NULL;
+       rc.nis_servers = g_ptr_array_new ();
+
+       if (config){
+              if (NM_IS_IP4_CONFIG (config))
+                     merge_one_ip4_config (&rc, (NMIP4Config *) config);
+       }
+
+       /* Per 'man resolv.conf', the search list is limited to 6 domains
+        * totalling 256 characters.
+       */
+       num = MIN (rc.searches->len, 6);
+       for (i = 0, len = 0; i < num; i++) {
+              len += strlen (rc.searches->pdata[i]) + 1; /* +1 for spaces */
+              if (len > 256)
+                      break;
+       }
+       g_ptr_array_set_size (rc.searches, i);
+       if (rc.searches->len) {
+               g_ptr_array_add (rc.searches, NULL);
+               searches = (char **) g_ptr_array_free (rc.searches, FALSE);
+       } else
+              g_ptr_array_free (rc.searches, TRUE);
+
+       if (rc.nameservers->len) {
+               g_ptr_array_add (rc.nameservers, NULL);
+               nameservers = (char **) g_ptr_array_free (rc.nameservers, FALSE);
+       } else
+               g_ptr_array_free (rc.nameservers, TRUE);
+
+       if (rc.nis_servers->len) {
+               g_ptr_array_add (rc.nis_servers, NULL);
+               nis_servers = (char **) g_ptr_array_free (rc.nis_servers, FALSE);
+       } else
+               g_ptr_array_free (rc.nis_servers, TRUE);
+
+       if (rc.options->len) {
+               g_ptr_array_add (rc.options, NULL);
+               options = (char **) g_ptr_array_free (rc.options, FALSE);
+       } else
+               g_ptr_array_free (rc.options, TRUE);
+
+       nis_domain = rc.nis_domain;
+
+       strcpy(resolv_path, RESOLV_CONF);
+       strcat(resolv_path, ".");
+       strcat(resolv_path, iface);
+
+       success = update_resolv_conf (self, resolv_path, searches, nameservers, options, error, NM_DNS_MANAGER_RESOLV_CONF_MAN_FILE);
+
+       if (searches)
+               g_strfreev (searches);
+       if (nameservers)
+               g_strfreev (nameservers);
+       if (nis_servers)
+               g_strfreev (nis_servers);
+
+       return success == SR_SUCCESS;
+}
+
+static gboolean
 nm_dns_manager_add_ip_config (NMDnsManager *self,
                               const char *iface,
                               gpointer config,
@@ -1344,6 +1432,13 @@ nm_dns_manager_add_ip_config (NMDnsManag
 		g_clear_error (&error);
 	}
 
+	if (!xc_rewrite_resolv_conf (self, iface, config, FALSE, &error)) {
+			_LOGW ("Could not commit DNS changes: (%d) %s",
+				error ? error->code : -1,
+				error && error->message ? error->message : "(unknown)");
+		g_clear_error (&error);
+	}
+
 	return TRUE;
 }
 
