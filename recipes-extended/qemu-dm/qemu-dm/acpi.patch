################################################################################
SHORT DESCRIPTION: 
################################################################################
ACPI support for S3/S4/S5.

################################################################################
LONG DESCRIPTION: 
################################################################################
The values for S3/S4/S5 are defined in a patch to Xen guest ACPI firmware so the
guests knows what values to write. When the guest write the specfic values to
the PM1a_CNT.SLP_TYP, QEMU handles the register write and takes the appropriate
action to shut the guest down.

################################################################################
CHANGELOG 
################################################################################
Port 2.6.2: Ross Philipson, philipsonr@ainfosec.com, 10/13/2016

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN 
################################################################################
No.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None

################################################################################
PATCHES 
################################################################################
--- a/hw/acpi/core.c
+++ b/hw/acpi/core.c
@@ -20,6 +20,11 @@
  */
 
 #include "qemu/osdep.h"
+#ifdef CONFIG_SYSLOG_LOGGING
+# include "logging.h"
+#else
+# include "stdio.h"
+#endif
 #include "sysemu/sysemu.h"
 #include "hw/hw.h"
 #include "hw/acpi/acpi.h"
@@ -31,6 +36,7 @@
 #include "qapi/qapi-visit-misc.h"
 #include "qemu/error-report.h"
 #include "qemu/option.h"
+#include "hw/xen/xen.h" /* needed for 'xenstore_update_power' */
 
 struct acpi_table_header {
     uint16_t _length;         /* our length, not actual part of the hdr */
@@ -49,6 +55,17 @@ struct acpi_table_header {
 #define ACPI_TABLE_HDR_SIZE sizeof(struct acpi_table_header)
 #define ACPI_TABLE_PFX_SIZE sizeof(uint16_t)  /* size of the extra prefix */
 
+/* OpenXT: ACPI
+ * Sleep state type codes as defined by the \_Sx objects in the DSDT.
+ * These must be kept in sync with the DSDT (hvmloader/acpi/dsdt.asl)
+ */
+#define SLP_TYP_S4_V0     (6)
+#define SLP_TYP_S3_V0     (5)
+#define SLP_TYP_S5_V0     (7)
+#define SLP_TYP_S4_V1     (0)
+#define SLP_TYP_S3_V1     (1)
+#define SLP_TYP_S5_V1     (0)
+
 static const char unsigned dfl_hdr[ACPI_TABLE_HDR_SIZE - ACPI_TABLE_PFX_SIZE] =
     "QEMU\0\0\0\0\1\0"       /* sig (4), len(4), revno (1), csum (1) */
     "QEMUQEQEMUQEMU\1\0\0\0" /* OEM id (6), table (8), revno (4) */
@@ -562,16 +579,29 @@ static void acpi_pm1_cnt_write(ACPIREGS
         /* change suspend type */
         uint16_t sus_typ = (val >> 10) & 7;
         switch(sus_typ) {
-        case 0: /* soft power off */
+        case SLP_TYP_S3_V0: /* S3: Suspend to RAM: Sleep */
+            /* Same code for V0 and V1 */
+        case SLP_TYP_S3_V1:
+            qemu_system_suspend_request();
+            xenstore_update_power(XENSTORE_PM_TYPE_SLEEP);
+            break;
+        case SLP_TYP_S4_V0: /* S4: Suspend to disk: Hibernation */
+            /* PRIOR: monitor_protocol_event(QEVENT_SUSPEND_DISK, NULL); */
+            qapi_event_send_suspend_disk();
             qemu_system_shutdown_request(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
+            xenstore_update_power(XENSTORE_PM_TYPE_HIBERNATE);
             break;
-        case 1:
-            qemu_system_suspend_request();
+        case SLP_TYP_S5_V0: /* S5: Shutdown */
+            /* Same code for V0 and V1 */
+        case SLP_TYP_S5_V1:
+            qemu_system_shutdown_request(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
+            xenstore_update_power(XENSTORE_PM_TYPE_SHUTDOWN);
             break;
         default:
             if (sus_typ == ar->pm1.cnt.s4_val) { /* S4 request */
                 qapi_event_send_suspend_disk();
                 qemu_system_shutdown_request(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
+                xenstore_update_power(XENSTORE_PM_TYPE_HIBERNATE);
             }
             break;
         }
--- a/hw/acpi/piix4.c
+++ b/hw/acpi/piix4.c
@@ -358,7 +358,15 @@ static void piix4_reset(void *opaque)
         /* Mark SMM as already inited (until KVM supports SMM). */
         pci_conf[0x5B] = 0x02;
     }
-    pm_io_space_update(s);
+
+    /*
+     * OpenXT: Do not update the PM IO space (basically the FADT register
+     * banks) on reset since that will effectively disable them preventing
+     * any further Sx transitions after an S3 is done. The bit in the PCI
+     * config space at 0x80 that enables the PM IO space is only set once
+     * by SeaBIOS at boot time.
+     */
+    /*pm_io_space_update(s);*/
     acpi_pcihp_reset(&s->acpi_pci_hotplug);
 }
 
@@ -501,6 +509,9 @@ static void piix4_pm_realize(PCIDevice *
     /* APM */
     apm_init(dev, &s->apm, apm_ctrl_changed, s);
 
+    /* OpenXT: Enable ACPI, QEMU doesn't enable it by default */
+    apm_ctrl_changed(ACPI_ENABLE, s);
+
     if (!s->smm_enabled) {
         /* Mark SMM as already inited to prevent SMM from running.  KVM does not
          * support SMM mode. */
--- a/hw/i386/xen/xen-hvm.c
+++ b/hw/i386/xen/xen-hvm.c
@@ -1510,6 +1510,15 @@ err:
     exit(1);
 }
 
+static void _xenstore_update_power(bool reboot)
+{
+    fprintf(stderr, "Issued domain %d %s\n", xen_domid,
+          reboot ? "reboot" : "poweroff");
+    if (reboot) {
+      xenstore_update_power(XENSTORE_PM_TYPE_REBOOT);
+    }
+}
+
 void destroy_hvm_domain(bool reboot)
 {
     xc_interface *xc_handle;
@@ -1521,6 +1530,7 @@ void destroy_hvm_domain(bool reboot)
     if (xen_dmod) {
         rc = xendevicemodel_shutdown(xen_dmod, xen_domid, reason);
         if (!rc) {
+            _xenstore_update_power(reboot);
             return;
         }
         if (errno != ENOTTY /* old Xen */) {
@@ -1539,8 +1549,7 @@ void destroy_hvm_domain(bool reboot)
                     "sts %d, %s\n", reboot ? "reboot" : "poweroff",
                     sts, strerror(errno));
         } else {
-            fprintf(stderr, "Issued domain %d %s\n", xen_domid,
-                    reboot ? "reboot" : "poweroff");
+            _xenstore_update_power(reboot);
         }
         xc_interface_close(xc_handle);
     }
--- a/hw/xen/xen_backend.c
+++ b/hw/xen/xen_backend.c
@@ -37,6 +37,9 @@
 
 #include <xen/grant_table.h>
 
+#include "ui/xen-input.h"
+#include "hw/xen/xen-dmbus.h"
+
 DeviceState *xen_sysdev;
 BusState *xen_sysbus;
 
@@ -955,3 +958,19 @@ int xenstore_generic_init(void)
 
     return 0;
 }
+
+/* OpenXT: Power Management Notification */
+int xenstore_update_power(enum xenstore_pm_type const type)
+{
+    char *dompath = NULL;
+
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+
+    if (NULL == dompath) {
+        return -1;
+    }
+
+    xen_input_send_shutdown(type);
+
+    return xenstore_write_int(dompath, "power-state", type);
+}
--- a/include/hw/xen/xen.h
+++ b/include/hw/xen/xen.h
@@ -48,4 +48,14 @@ void xen_hvm_modified_memory(ram_addr_t
 
 void xen_register_framebuffer(struct MemoryRegion *mr);
 
+/* Power Management */
+enum xenstore_pm_type {
+    XENSTORE_PM_TYPE_REBOOT = 0,
+    XENSTORE_PM_TYPE_SLEEP = 3,
+    XENSTORE_PM_TYPE_HIBERNATE = 4,
+    XENSTORE_PM_TYPE_SHUTDOWN = 5
+};
+
+int xenstore_update_power(enum xenstore_pm_type const type);
+
 #endif /* QEMU_HW_XEN_H */
