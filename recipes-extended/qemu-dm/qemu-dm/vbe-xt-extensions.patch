################################################################################
SHORT DESCRIPTION: 
################################################################################
VBE IO ports extension to synchronise QEMU, Surfman and VGABIOS requirements.

################################################################################
LONG DESCRIPTION: 
################################################################################
The way Surfman directly uses pages in the guest and scans a linear framebuffer
requires some condition to be met on stride alignment. IO ports make it easier
for VGABIOS exchange information with Surfman through QEMU.

Surfman and VGABIOS will use VBE extensions to exchange information about
display geometry early in the boot process.

Added VBE indexes are:
VBE_DISPI_EXT_INDEX_STRIDE          0xd     // Set the stride.
VBE_DISPI_EXT_INDEX_EDID_XRES       0xe     // RO: get the biggest resolution
VBE_DISPI_EXT_INDEX_EDID_YRES       0xf     //     possible yet with the
VBE_DISPI_EXT_INDEX_STRIDE_ALIGN    0x10    //     smallest stride alignment.
VBE_DISPI_EXT_INDEX_32BPP_ONLY      0x11    // RO: 32b depth requirement
VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY 0x12    // RO: Use only legacy resolutions.

################################################################################
CHANGELOG 
################################################################################
Documented: Eric Chanudet, chanudete@ainfosec.com, 17/03/2015
Ported to QEMU 1.4.0: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015
Ported to QEMU 2.6.2: Ross Philipson, philipsonr@ainfosec.com, 10/13/2016

################################################################################
REMOVAL 
################################################################################
This patch is required by Surfman.
This patch is required by VGABIOS: vbe-extensions.patch.
This patch is required by VGABIOS: vbe-edid-interface.patch.

################################################################################
UPSTREAM PLAN 
################################################################################
This is OpenXT specific. There is no plan to upstream this patch.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Implemented by VGABIOS: vbe-extensions.patch
Implemented by VGABIOS: vbe-edid-interface.patch
Depended on by QEMU: surfman-dcl.patch.

################################################################################
PATCHES
################################################################################
--- a/hw/display/vga.c
+++ b/hw/display/vga.c
@@ -560,6 +560,28 @@ void vga_ioport_write(void *opaque, uint
     }
 }
 
+static inline bool vbe_ext_index_emu(unsigned int index)
+{
+    return (index >= VBE_DISPI_EXT_INDEX_START &&
+            index < (VBE_DISPI_EXT_INDEX_START + VBE_DISPI_EXT_INDEX_NB));
+}
+
+static inline uint16_t vbe_ext_emu_read(VGACommonState *s, unsigned int index)
+{
+    assert(s != NULL);
+    assert(vbe_ext_index_emu(index));
+
+    return s->vbe_ext_regs[index - VBE_DISPI_EXT_INDEX_START];
+}
+
+static inline void vbe_ext_emu_write(VGACommonState *s,
+                                     unsigned int index, uint16_t val)
+{
+    assert(s != NULL);
+    assert(vbe_ext_index_emu(index));
+    s->vbe_ext_regs[index - VBE_DISPI_EXT_INDEX_START] = val;
+}
+
 /*
  * Sanity check vbe register writes.
  *
@@ -611,7 +633,10 @@ static void vbe_fixup_regs(VGACommonStat
     }
 
     /* check height */
-    linelength = r[VBE_DISPI_INDEX_VIRT_WIDTH] * bits / 8;
+    if (vbe_ext_emu_read(s, VBE_DISPI_EXT_INDEX_STRIDE))
+        linelength = vbe_ext_emu_read(s, VBE_DISPI_EXT_INDEX_STRIDE);
+    else
+        linelength = r[VBE_DISPI_INDEX_VIRT_WIDTH] * bits / 8;
     maxy = s->vbe_size / linelength;
     if (r[VBE_DISPI_INDEX_YRES] == 0) {
         r[VBE_DISPI_INDEX_YRES] = 1;
@@ -725,6 +750,30 @@ uint32_t vbe_ioport_read_data(void *opaq
         val = s->vbe_size / (64 * KiB);
     } else {
         val = 0;
+        if (!(s->vbe_regs[VBE_DISPI_INDEX_ENABLE] & VBE_DISPI_GETCAPS)) {
+            uint32_t u1, u2;
+            switch (s->vbe_index) {
+                case VBE_DISPI_EXT_INDEX_EDID_XRES:
+                    dpy_get_display_limits(s->con, &val, &u1, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_EDID_YRES:
+                    dpy_get_display_limits(s->con, &u1, &val, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_STRIDE_ALIGN:
+                    dpy_get_display_limits(s->con, &u1, &u2, &val);
+                    break;
+#ifdef CONFIG_XEN
+                case VBE_DISPI_EXT_INDEX_32BPP_ONLY:
+                    val = xenstore_is_32bpp_only();
+                    break;
+                case VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY:
+                    val = xenstore_is_legacy_res_only();
+                    break;
+#endif /* CONFIG_XEN */
+                default:
+                    break;
+            }
+        }
     }
     trace_vga_vbe_read(s->vbe_index, val);
     return val;
@@ -794,6 +843,15 @@ void vbe_ioport_write_data(void *opaque,
         default:
             break;
         }
+    } else if (vbe_ext_index_emu(s->vbe_index)) {
+        vbe_ext_emu_write(s, s->vbe_index, val);
+        switch (s->vbe_index) {
+            case VBE_DISPI_EXT_INDEX_STRIDE:
+                s->vbe_line_offset = val;
+                break;
+            default:
+                break;
+        }
     }
 }
 
--- a/hw/display/vga_int.h
+++ b/hw/display/vga_int.h
@@ -103,6 +103,7 @@ typedef struct VGACommonState {
     /* bochs vbe state */
     uint16_t vbe_index;
     uint16_t vbe_regs[VBE_DISPI_INDEX_NB];
+    uint16_t vbe_ext_regs[VBE_DISPI_EXT_INDEX_NB];
     uint32_t vbe_start_addr;
     uint32_t vbe_line_offset;
     uint32_t vbe_bank_mask;
--- a/hw/xen/xen_backend.c
+++ b/hw/xen/xen_backend.c
@@ -974,3 +974,35 @@ int xenstore_update_power(enum xenstore_
 
     return xenstore_write_int(dompath, "power-state", type);
 }
+
+/****************************************************
+ * OpenXT: VBE exstentions. */
+bool xenstore_is_32bpp_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplaydepth", &val)) {
+        return false;
+    }
+    return (val == 32);
+}
+
+bool xenstore_is_legacy_res_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplayres", &val)) {
+        return false;
+    }
+    return !!val;
+}
--- a/include/hw/xen/xen.h
+++ b/include/hw/xen/xen.h
@@ -57,5 +57,7 @@ enum xenstore_pm_type {
 };
 
 int xenstore_update_power(enum xenstore_pm_type const type);
+bool xenstore_is_32bpp_only(void);
+bool xenstore_is_legacy_res_only(void);
 
 #endif /* QEMU_HW_XEN_H */
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -210,6 +210,9 @@ typedef struct DisplayChangeListenerOps
 
     void (*dpy_mouse_set)(DisplayChangeListener *dcl,
                           int x, int y, int on);
+    void (*dpy_get_display_limits)(DisplayChangeListener *dcl, uint32_t *width,
+                                   uint32_t *height, uint32_t *stride_alignment);
+
     void (*dpy_cursor_define)(DisplayChangeListener *dcl,
                               QEMUCursor *cursor);
 
@@ -299,6 +302,9 @@ void dpy_text_cursor(QemuConsole *con, i
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
 void dpy_mouse_set(QemuConsole *con, int x, int y, int on);
+void dpy_get_display_limits(QemuConsole *con, uint32_t *width, uint32_t *height,
+                            uint32_t *stride_alignment);
+
 void dpy_cursor_define(QemuConsole *con, QEMUCursor *cursor);
 bool dpy_cursor_define_supported(QemuConsole *con);
 bool dpy_gfx_check_format(QemuConsole *con,
--- a/ui/console.c
+++ b/ui/console.c
@@ -1732,6 +1732,29 @@ void dpy_mouse_set(QemuConsole *con, int
     }
 }
 
+void dpy_get_display_limits(QemuConsole *con, uint32_t *width, uint32_t *height,
+                            uint32_t *stride_alignment)
+{
+    DisplayState *s = con->ds;
+    DisplayChangeListener *dcl;
+    uint32_t w, h, a;
+
+    *width = 1920;
+    *height = 1200;
+    *stride_alignment = 1;  /* HACK: Keep the biggest supported resolution and the smallest required stride alignment. */
+    QLIST_FOREACH(dcl, &s->listeners, next) {
+        if (dcl->ops->dpy_get_display_limits) {
+            dcl->ops->dpy_get_display_limits(dcl, &w, &h, &a);
+            if ((*width > w) || (*height > h)) {
+                *width = w;
+                *height = h;
+	    }
+            if (*stride_alignment < a)
+                *stride_alignment = a;
+        }
+    }
+}
+
 void dpy_cursor_define(QemuConsole *con, QEMUCursor *cursor)
 {
     DisplayState *s = con->ds;
--- a/include/hw/display/bochs-vbe.h
+++ b/include/hw/display/bochs-vbe.h
@@ -22,6 +22,15 @@
 #define VBE_DISPI_INDEX_NB              0xa /* size of vbe_regs[] */
 #define VBE_DISPI_INDEX_VIDEO_MEMORY_64K 0xa /* read-only, not in vbe_regs */
 
+#define VBE_DISPI_EXT_INDEX_START           0xd
+#define VBE_DISPI_EXT_INDEX_STRIDE          (VBE_DISPI_EXT_INDEX_START + 0x0) /* 0xd */
+#define VBE_DISPI_EXT_INDEX_NB              0x1 /* size of vbe_ext_regs[] */
+#define VBE_DISPI_EXT_INDEX_EDID_XRES       (VBE_DISPI_EXT_INDEX_START + 0x1) /* 0xe -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_EDID_YRES       (VBE_DISPI_EXT_INDEX_START + 0x2) /* 0xf -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_STRIDE_ALIGN    (VBE_DISPI_EXT_INDEX_START + 0x3) /* 0x10 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_32BPP_ONLY      (VBE_DISPI_EXT_INDEX_START + 0x4) /* 0x11 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY (VBE_DISPI_EXT_INDEX_START + 0x5) /* 0x12 -- read-only, not in vbe_regs */
+
 /* VBE_DISPI_INDEX_ID */
 #define VBE_DISPI_ID0                   0xB0C0
 #define VBE_DISPI_ID1                   0xB0C1
