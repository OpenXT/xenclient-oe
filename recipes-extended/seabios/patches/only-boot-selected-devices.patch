################################################################################
SHORT DESCRIPTION: 
################################################################################
Only devices present in the CMOS will be given boot entries by SeaBIOS.

################################################################################
LONG DESCRIPTION: 
################################################################################
On emulators, SeaBIOS reads the boot order from NVRAM to assign their priority,
then add any detected device to a boot entry.  This can add several seconds
to the VM boot time. This patch avoid that by not filling a boot entry for
devices that were not present in the NVRAM boot order.

Also disable the special-case CD-Rom query when QEMU is detected since the
assumption that it will not access a physical device is inaccurate for OpenXT.

################################################################################
CHANGELOG 
################################################################################
Ported to SeaBIOS 1.7.5: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015
Ported to SeaBIOS 1.13.0: Christopher Clark, christopher.w.clark@gmail.com, 2020

################################################################################
REMOVAL 
################################################################################
This patch can be removed safely if the feature is not wanted anymore.

################################################################################
UPSTREAM PLAN 
################################################################################
This is OpenXT specific. There is no plan to upstream this patch.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None.

################################################################################
PATCHES
################################################################################
diff --git a/src/boot.c b/src/boot.c
index 5194115..aed49ea 100644
--- a/src/boot.c
+++ b/src/boot.c
@@ -423,6 +423,10 @@ static int DefaultFloppyPrio = 101;
 static int DefaultCDPrio     = 102;
 static int DefaultHDPrio     = 103;
 static int DefaultBEVPrio    = 104;
+static int SelectedFloppy    = 0;
+static int SelectedCD        = 0;
+static int SelectedHD        = 0;
+static int SelectedBEV       = 0;
 
 void
 boot_init(void)
@@ -443,10 +447,10 @@ boot_init(void)
             u32 val = bootorder & 0x0f;
             bootorder >>= 4;
             switch (val) {
-            case 1: DefaultFloppyPrio = i; break;
-            case 2: DefaultHDPrio = i;     break;
-            case 3: DefaultCDPrio = i;     break;
-            case 4: DefaultBEVPrio = i;    break;
+            case 1: DefaultFloppyPrio = i; SelectedFloppy = 1; break;
+            case 2: DefaultHDPrio = i; SelectedHD = 1; break;
+            case 3: DefaultCDPrio = i; SelectedCD = 1; break;
+            case 4: DefaultBEVPrio = i; SelectedBEV = 1; break;
             }
         }
     }
@@ -530,57 +534,52 @@ static inline int defPrio(int priority, int defaultprio) {
 void
 boot_add_bev(u16 seg, u16 bev, u16 desc, int prio)
 {
-    bootentry_add(IPL_TYPE_BEV, defPrio(prio, DefaultBEVPrio)
-                  , SEGOFF(seg, bev).segoff
-                  , desc ? MAKE_FLATPTR(seg, desc) : "Unknown");
-    DefaultBEVPrio = DEFAULT_PRIO;
+    if (SelectedBEV) {
+        bootentry_add(IPL_TYPE_BEV, defPrio(prio, DefaultBEVPrio)
+                      , SEGOFF(seg, bev).segoff
+                      , desc ? MAKE_FLATPTR(seg, desc) : "Unknown");
+        DefaultBEVPrio = DEFAULT_PRIO;
+    }
 }
 
 // Add a bcv entry for an expansion card harddrive or legacy option rom
 void
 boot_add_bcv(u16 seg, u16 ip, u16 desc, int prio)
 {
-    bootentry_add(IPL_TYPE_BCV, defPrio(prio, DefaultHDPrio)
-                  , SEGOFF(seg, ip).segoff
-                  , desc ? MAKE_FLATPTR(seg, desc) : "Legacy option rom");
+    /* Disabled for OpenXT */
 }
 
 void
 boot_add_floppy(struct drive_s *drive, const char *desc, int prio)
 {
-    bootentry_add(IPL_TYPE_FLOPPY, defPrio(prio, DefaultFloppyPrio)
-                  , (u32)drive, desc);
+    if (SelectedFloppy)
+        bootentry_add(IPL_TYPE_FLOPPY, defPrio(prio, DefaultFloppyPrio)
+                      , (u32)drive, desc);
 }
 
 void
 boot_add_hd(struct drive_s *drive, const char *desc, int prio)
 {
-    bootentry_add(IPL_TYPE_HARDDISK, defPrio(prio, DefaultHDPrio)
-                  , (u32)drive, desc);
+    if (SelectedHD)
+        bootentry_add(IPL_TYPE_HARDDISK, defPrio(prio, DefaultHDPrio)
+                      , (u32)drive, desc);
 }
 
 void
 boot_add_cd(struct drive_s *drive, const char *desc, int prio)
 {
-    if (GET_GLOBAL(PlatformRunningOn) & PF_QEMU) {
-        // We want short boot times.  But on physical hardware even
-        // the test unit ready can take several seconds.  So do media
-        // access on qemu only, where we know it will be fast.
-        char *extra = cdrom_media_info(drive);
-        if (extra) {
-            desc = znprintf(MAXDESCSIZE, "%s (%s)", desc, extra);
-            free(extra);
-        }
-    }
-    bootentry_add(IPL_TYPE_CDROM, defPrio(prio, DefaultCDPrio)
-                  , (u32)drive, desc);
+    if (!desc)
+        desc = znprintf(MAXDESCSIZE, "%s", "CD/DVD");
+    if (SelectedCD)
+        bootentry_add(IPL_TYPE_CDROM, defPrio(prio, DefaultCDPrio)
+                      , (u32)drive, desc);
 }
 
 // Add a CBFS payload entry
 void
 boot_add_cbfs(void *data, const char *desc, int prio)
 {
-    bootentry_add(IPL_TYPE_CBFS, defPrio(prio, DEFAULT_PRIO), (u32)data, desc);
+    /* Disabled for OpenXT */
 }
 
 
@@ -801,10 +800,6 @@ bcv_prepboot(void)
             break;
         }
     }
-
-    // If nothing added a floppy/hd boot - add it manually.
-    add_bev(IPL_TYPE_FLOPPY, 0);
-    add_bev(IPL_TYPE_HARDDISK, 0);
 }
 
 
