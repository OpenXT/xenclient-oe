################################################################################
SHORT DESCRIPTION: 
################################################################################
Resolve compiler errors.

################################################################################
LONG DESCRIPTION: 
################################################################################
Upstream blktap3(xapi-project/blktap) cannot be compiled as it is, below changes
are needed for it to be compiled successfully.

################################################################################
CHANGELOG 
################################################################################
Author(s):
Mahantesh Salimath <salimathm@ainfosec.com>

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Yes, should be upstreamed.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/drivers/td-req.c
+++ b/drivers/td-req.c
@@ -541,16 +541,16 @@ tapdisk_xenblkif_complete_request(struct
 		xenio_blkif_put_response(blkif, tapreq, _err, final);
 	}
 
-    tapdisk_xenblkif_free_request(blkif, tapreq);
+        tapdisk_xenblkif_free_request(blkif, tapreq);
 
-    blkif->stats.reqs.out++;
-    if (final)
-        blkif->stats.kicks.out++;
+        blkif->stats.reqs.out++;
+        if (final)
+            blkif->stats.kicks.out++;
 
-	if (unlikely(processing_barrier_message))
-		blkif->barrier.msg = NULL;
+        if (unlikely(processing_barrier_message))
+            blkif->barrier.msg = NULL;
 
-    /*
+        /*
 	 * Schedule a ring check in case we left requests in it due to lack of
 	 * memory or in case we stopped processing it because of a barrier.
 	 *
--- a/drivers/tapdisk-vbd.c
+++ b/drivers/tapdisk-vbd.c
@@ -637,17 +637,17 @@ tapdisk_vbd_open_vdi(td_vbd_t *vbd, cons
 		}
 	}
 
-    err = vbd_stats_create(vbd);
-    if (err)
-        goto fail;
+        err = vbd_stats_create(vbd);
+        if (err)
+                goto fail;
 
-    err = td_metrics_vdi_start(vbd->tap->minor, &vbd->vdi_stats);
-    if (err)
-        goto fail;
-	if (tmp != vbd->name)
-		free(tmp);
+        err = td_metrics_vdi_start(vbd->tap->minor, &vbd->vdi_stats);
+        if (err)
+                goto fail;
+        if (tmp != vbd->name)
+                free(tmp);
 
-	return err;
+        return err;
 
 fail:
 	if (vbd->name != tmp) {
--- a/drivers/tapdisk-control.c
+++ b/drivers/tapdisk-control.c
@@ -960,8 +960,8 @@ tapdisk_control_close_image(struct tapdi
 
 out:
 	response->cookie = request->cookie;
-    if (!err)
-        response->type = TAPDISK_MESSAGE_CLOSE_RSP;
+        if (!err)
+                response->type = TAPDISK_MESSAGE_CLOSE_RSP;
 	return err;
 }
 
--- a/drivers/block-vhd.c
+++ b/drivers/block-vhd.c
@@ -444,8 +444,8 @@ find_next_free_block(struct vhd_state *s
 		if (entry != DD_BLK_UNUSED && entry >= s->next_db)
 			s->next_db = (uint64_t)entry + (uint64_t)s->spb
 				+ (uint64_t)s->bm_secs;
-			if (s->next_db > UINT_MAX)
-				break;
+                if (s->next_db > UINT_MAX)
+		        break;
 	}
 
 	return 0;
@@ -863,8 +863,8 @@ _vhd_open(td_driver_t *driver, const cha
 			      VHD_FLAG_OPEN_QUIET  |
 			      VHD_FLAG_OPEN_RDONLY |
 			      VHD_FLAG_OPEN_NO_CACHE);
-    if (flags & TD_OPEN_LOCAL_CACHE)
-        vhd_flags |= VHD_FLAG_OPEN_LOCAL_CACHE;
+        if (flags & TD_OPEN_LOCAL_CACHE)
+                vhd_flags |= VHD_FLAG_OPEN_LOCAL_CACHE;
 
 	/* pre-allocate for all but NFS and LVM storage */
 	driver->storage = tapdisk_storage_type(name);
--- a/drivers/td-blkif.c
+++ b/drivers/td-blkif.c
@@ -577,9 +577,9 @@ tapdisk_xenblkif_connect(domid_t domid,
         goto fail;
     }
 
-	td_blkif->chkrng_event = tapdisk_server_register_event(
-			SCHEDULER_POLL_TIMEOUT,	-1, TV_INF,
-			tapdisk_xenblkif_cb_chkrng, td_blkif);
+    td_blkif->chkrng_event = tapdisk_server_register_event(
+        SCHEDULER_POLL_TIMEOUT,	-1, TV_INF,
+        tapdisk_xenblkif_cb_chkrng, td_blkif);
     if (unlikely(td_blkif->chkrng_event < 0)) {
         err = td_blkif->chkrng_event;
         RING_ERR(td_blkif, "failed to register event: %s\n", strerror(-err));
@@ -590,9 +590,9 @@ tapdisk_xenblkif_connect(domid_t domid,
     if (unlikely(err))
         goto fail;
 
-	td_blkif->stoppolling_event = tapdisk_server_register_event(
-			SCHEDULER_POLL_TIMEOUT,	-1, TV_INF,
-			tapdisk_xenblkif_cb_stoppolling, td_blkif);
+    td_blkif->stoppolling_event = tapdisk_server_register_event(
+        SCHEDULER_POLL_TIMEOUT,	-1, TV_INF,
+        tapdisk_xenblkif_cb_stoppolling, td_blkif);
     if (unlikely(td_blkif->stoppolling_event < 0)) {
         err = td_blkif->stoppolling_event;
         RING_ERR(td_blkif, "failed to register event: %s\n", strerror(-err));
--- a/cbt/cbt-util.c
+++ b/cbt/cbt-util.c
@@ -283,7 +283,7 @@ int
 cbt_util_set(int argc, char **argv)
 {
 	char *name, *parent, *child, *buf;
-	int err, c, consistent, flag = 0, ret; 
+	int err, c, consistent = 0, flag = 0, ret;
 	FILE *f = NULL;
 	uint64_t size, bmsize, old_bmsize;
 
--- a/cbt/Makefile.am
+++ b/cbt/Makefile.am
@@ -9,6 +9,7 @@ sbin_PROGRAMS = cbt-util
 noinst_LTLIBRARIES = libcbtutil.la
 
 libcbtutil_la_SOURCES = cbt-util.c
+libcbtutil_la_LIBADD= -luuid
 
 cbt_util_SOURCES  = main.c
 cbt_util_LDADD  = -lrt -luuid libcbtutil.la
--- /dev/null
+++ b/VERSION
@@ -0,0 +1 @@
+3.20.0
\ No newline at end of file
