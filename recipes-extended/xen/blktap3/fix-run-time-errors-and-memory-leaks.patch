################################################################################
SHORT DESCRIPTION: 
################################################################################
Resolve run-time errors and memory leaks.

################################################################################
LONG DESCRIPTION: 
################################################################################
Resolve run-time errors and memory leaks.

################################################################################
CHANGELOG 
################################################################################
Author(s):
Mahantesh Salimath <salimathm@ainfosec.com>

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Yes, should be upstreamed.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/control/tap-ctl-free.c
+++ b/control/tap-ctl-free.c
@@ -33,6 +33,7 @@
 #endif
 
 #include <stdio.h>
+#include <string.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <stdlib.h>
@@ -48,6 +49,20 @@ tap_ctl_free(const int minor)
 {
 	int fd, err;
 
+	char *tapdev_name, *ring_name;
+	err = asprintf(&tapdev_name, "%s%d",
+		       BLKTAP2_IO_DEVICE, minor);
+	if(err == -1){
+		err = ENOMEM;
+		return err;
+	}
+	err = asprintf(&ring_name, "%s%d",
+		       BLKTAP2_RING_DEVICE, minor);
+	if(err == -1){
+		err = ENOMEM;
+		return err;
+	}
+
 	fd = open(BLKTAP2_CONTROL_DEVICE, O_RDONLY);
 	if (fd == -1) {
 		EPRINTF("failed to open control device: %d\n", errno);
@@ -58,5 +73,10 @@ tap_ctl_free(const int minor)
 	err = (err == -1) ? -errno : 0;
 	close(fd);
 
+	unlink(tapdev_name);
+	unlink(ring_name);
+	free(tapdev_name);
+	free(ring_name);
+
 	return err;
 }
--- a/control/tap-ctl-ipc.c
+++ b/control/tap-ctl-ipc.c
@@ -72,7 +72,7 @@ tap_ctl_read_raw(int fd, void *buf, size
 			err = errno;
 			break;
 		} else if (FD_ISSET(fd, &readfds)) {
-			eintr_retry(ret, read(fd, buf + offset, size - offset))
+			eintr_retry(ret, read(fd, (char*)buf + offset, size - offset))
 			if (ret <= 0) {
 				err = errno;
 				break;
--- a/tapback/tapback.c
+++ b/tapback/tapback.c
@@ -171,6 +171,7 @@ tapback_backend_destroy(backend_t *backe
         backend->xs = NULL;
     }
 
+    close(backend->ctrl_sock);
     unlink(backend->local.sun_path);
 
 	list_del(&backend->entry);
--- a/vhd/lib/libvhd.c
+++ b/vhd/lib/libvhd.c
@@ -1471,7 +1471,7 @@ vhd_find_parent(vhd_context_t *ctx, cons
 	location   = NULL;
 	*_location = NULL;
 
-	if (!parent)
+	if (!parent || !strcmp(parent, ""))
 		return -EINVAL;
 
 	if (parent[0] == '/') {
--- a/vhd/lib/vhd-util-read.c
+++ b/vhd/lib/vhd-util-read.c
@@ -216,6 +216,7 @@ vhd_print_parent(vhd_context_t *vhd, vhd
 	}
 
 	printf("       decoded name : %s\n", buf);
+	free(buf);
 }
 
 static void
@@ -524,8 +525,10 @@ vhd_test_bitmap(vhd_context_t *vhd, uint
 
 		if (vhd->bat.bat[blk] == DD_BLK_UNUSED)
 			bit = 0;
-		else
+		else {
+			/* Switch to sector, seems more in line with what -i does */
 			bit = vhd_bitmap_test(vhd, buf, sec);
+		}
 
 		printf("block %s: ", conv(hex, blk));
 		printf("sec: %s: %d\n", conv(hex, sec), bit);
@@ -639,8 +642,8 @@ vhd_test_batmap(vhd_context_t *vhd, uint
 
 	for (i = 0; i < count; i++) {
 		cur = block + i;
-		fprintf(stderr, "batmap for block %s: %d\n", conv(hex, cur),
-			vhd_batmap_test(vhd, &vhd->batmap, cur));
+		printf("batmap for block %s: %d\n", conv(hex, cur),
+		       vhd_batmap_test(vhd, &vhd->batmap, cur));
 	}
 
 	return 0;
