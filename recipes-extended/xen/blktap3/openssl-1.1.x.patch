--- a/tools/blktap3/drivers/crypto/xts_aes.c
+++ b/tools/blktap3/drivers/crypto/xts_aes.c
@@ -61,22 +61,22 @@ int xts_aes_setkey(struct crypto_blkciph
 	if (!type)
 		return -20;
 
-	EVP_CIPHER_CTX_init(&cipher->en_ctx);
-	EVP_CIPHER_CTX_init(&cipher->de_ctx);
+	cipher->en_ctx = EVP_CIPHER_CTX_new();
+	cipher->de_ctx = EVP_CIPHER_CTX_new();
 
 	/* TODO lazily initialize the encrypt context until doing an encryption,
 	 * since it's only needed for a writable node (top diff) */
-	if (!EVP_CipherInit_ex(&cipher->en_ctx, type, NULL, NULL, NULL, 1))
+	if (!EVP_CipherInit_ex(cipher->en_ctx, type, NULL, NULL, NULL, 1))
 		return -1;
-	if (!EVP_CipherInit_ex(&cipher->de_ctx, type, NULL, NULL, NULL, 0))
+	if (!EVP_CipherInit_ex(cipher->de_ctx, type, NULL, NULL, NULL, 0))
 		return -2;
-	if (!EVP_CIPHER_CTX_set_key_length(&cipher->en_ctx, keysize))
+	if (!EVP_CIPHER_CTX_set_key_length(cipher->en_ctx, keysize))
 		return -3;
-	if (!EVP_CipherInit_ex(&cipher->en_ctx, NULL, NULL, key, NULL, 1))
+	if (!EVP_CipherInit_ex(cipher->en_ctx, NULL, NULL, key, NULL, 1))
 		return -4;
-	if (!EVP_CIPHER_CTX_set_key_length(&cipher->de_ctx, keysize))
+	if (!EVP_CIPHER_CTX_set_key_length(cipher->de_ctx, keysize))
 		return -5;
-	if (!EVP_CipherInit_ex(&cipher->de_ctx, NULL, NULL, key, NULL, 0))
+	if (!EVP_CipherInit_ex(cipher->de_ctx, NULL, NULL, key, NULL, 0))
 		return -6;
 	return 0;
 }
--- a/tools/blktap3/drivers/crypto/xts_aes.h
+++ b/tools/blktap3/drivers/crypto/xts_aes.h
@@ -52,9 +52,9 @@ xts_aes_plain_encrypt(struct crypto_blkc
 	int dstlen;
 	xts_aes_plain_iv_generate(iv, 16, sector);
 
-	if (!EVP_CipherInit_ex(&xts_tfm->en_ctx, NULL, NULL, NULL, iv, -1))
+	if (!EVP_CipherInit_ex(xts_tfm->en_ctx, NULL, NULL, NULL, iv, -1))
 		return -1;
-	if (!EVP_CipherUpdate(&xts_tfm->en_ctx, dst_buf, &dstlen, src_buf, nbytes))
+	if (!EVP_CipherUpdate(xts_tfm->en_ctx, dst_buf, &dstlen, src_buf, nbytes))
 		return -2;
 	/* no need to finalize with XTS when multiple of blocksize */
 	return 0;
@@ -68,9 +68,9 @@ xts_aes_plain_decrypt(struct crypto_blkc
 	int dstlen;
 	xts_aes_plain_iv_generate(iv, 16, sector);
 
-	if (!EVP_CipherInit_ex(&xts_tfm->de_ctx, NULL, NULL, NULL, iv, -1))
+	if (!EVP_CipherInit_ex(xts_tfm->de_ctx, NULL, NULL, NULL, iv, -1))
 		return -1;
-	if (!EVP_CipherUpdate(&xts_tfm->de_ctx, dst_buf, &dstlen, src_buf, nbytes))
+	if (!EVP_CipherUpdate(xts_tfm->de_ctx, dst_buf, &dstlen, src_buf, nbytes))
 		return -2;
 	/* no need to finalize with XTS when multiple of blocksize */
 	return 0;
--- a/tools/blktap3/drivers/crypto/compat-crypto-openssl.h
+++ b/tools/blktap3/drivers/crypto/compat-crypto-openssl.h
@@ -9,8 +9,8 @@
 
 struct crypto_blkcipher
 {
-	EVP_CIPHER_CTX de_ctx;
-	EVP_CIPHER_CTX en_ctx;
+	EVP_CIPHER_CTX *de_ctx;
+	EVP_CIPHER_CTX *en_ctx;
 };
 
 #endif
--- a/tools/blktap3/drivers/block-crypto.c
+++ b/tools/blktap3/drivers/block-crypto.c
@@ -59,26 +59,26 @@ vhd_calculate_keyhash(struct vhd_keyhash
 		const uint8_t *key, size_t key_bytes)
 {
 	int err;
-	EVP_MD_CTX evp;
+	EVP_MD_CTX *evp;
 
 	err = -1;
-	EVP_MD_CTX_init(&evp);
-	if (!EVP_DigestInit_ex(&evp, EVP_sha256(), NULL)) {
+	evp = EVP_MD_CTX_new();
+	if (!EVP_DigestInit_ex(evp, EVP_sha256(), NULL)) {
 		EPRINTF("failed to init sha256 context\n");
 		goto out;
 	}
 
-	if (!EVP_DigestUpdate(&evp, keyhash->nonce, sizeof(keyhash->nonce))) {
+	if (!EVP_DigestUpdate(evp, keyhash->nonce, sizeof(keyhash->nonce))) {
 		EPRINTF("failed to hash nonce\n");
 		goto cleanup;
 	}
 
-	if (!EVP_DigestUpdate(&evp, key, key_bytes)) {
+	if (!EVP_DigestUpdate(evp, key, key_bytes)) {
 		EPRINTF("failed to hash key\n");
 		goto cleanup;
 	}
 
-	if (!EVP_DigestFinal_ex(&evp, keyhash->hash, NULL)) {
+	if (!EVP_DigestFinal_ex(evp, keyhash->hash, NULL)) {
 		EPRINTF("failed to finalize hash\n");
 		goto cleanup;
 	}
@@ -86,7 +86,7 @@ vhd_calculate_keyhash(struct vhd_keyhash
 	err = 0;
 
 cleanup:
-	EVP_MD_CTX_cleanup(&evp);
+	EVP_MD_CTX_free(evp);
 out:
 	return err;
 }
@@ -134,7 +134,7 @@ find_keyfile(char **keyfile, const char
 	*keyfile  = NULL;
 
 	while (dirs && strlen(dirs) > 0) {
-		char keydir[256] = { 0 }, path[256] = { 0 };
+		char keydir[256] = { 0 }, path[277] = { 0 };
 		struct stat st;
 		int err;
 
