From 164436bdff5620e605268ec82860728014dab7cb Mon Sep 17 00:00:00 2001
From: Jason Andryuk <jandryuk@gmail.com>
Date: Wed, 18 Sep 2019 11:47:16 -0400
Subject: [PATCH] Make block-tap usable with OpenXT

Xen has a block-tap script to handle vhds, but it needs some changes to
be usable by OpenXT.

It needs to handle device sharing checks which were previously done in
libxl. This is partially accomplished by moving and reusing functions
from Xen's block script to common code.

The call to tap-ctl needs to change to prevent leaking the open _lockfd
file descriptor into the tapdisk daemon. The eval "exec $_lockfd>&- call
closes the fd to prevent that leak. Such a leak blocks any other
block-tap script from running thereby blocking any other VM from
starting.

It relies on TAPDISK3_CRYPTO_KEYDIR being set in the environment by
xenmgr to allow tapdisk to unlock encrypted VHDs.

---
 tools/hotplug/Linux/block           | 175 +---------------------------
 tools/hotplug/Linux/block-common.sh | 175 ++++++++++++++++++++++++++++
 tools/hotplug/Linux/block-tap       | 117 ++++++++++++++++++-
 3 files changed, 289 insertions(+), 178 deletions(-)

--- a/tools/hotplug/Linux/block
+++ b/tools/hotplug/Linux/block
@@ -37,141 +37,6 @@ find_free_loopback_dev() {
   fi
 }
 
-##
-# check_sharing devtype device mode [inode]
-#
-# Check whether the device requested is already in use.  To use the device in
-# read-only mode, it may be in use in read-only mode, but may not be in use in
-# read-write anywhere at all.  To use the device in read-write mode, it must
-# not be in use anywhere at all.
-#
-# Prints one of
-#
-#    'local $d': the device ($d) may not be used because it is mounted in the
-#                current (i.e. the privileged domain) in a way incompatible
-#                with the requested mode;
-#    'guest $d': the device may not be used because it is already mounted
-#                through device $d by a guest in a way incompatible with the
-#                requested mode; or
-#    'ok':       the device may be used.
-#
-check_sharing()
-{
-  local devtype=$1
-  local dev="$2"
-  local mode="$3"
-  local devmm=","
-
-  if [ "$devtype" = "file" ];
-  then
-    local inode="$4"
-
-    shared_list=$(losetup -a |
-          sed -n -e "s@^\([^:]\+\)\(:[[:blank:]]\[0*${dev}\]:${inode}[[:blank:]](.*)\)@\1@p" )
-    for dev in $shared_list
-    do
-      if [ -n "$dev" ]
-      then
-        devmm="${devmm}$(device_major_minor $dev),"
-      fi
-    done
-    # if $devmm is unchanged, file being checked is not a shared loopback device
-    if [ "$devmm" = "," ];
-    then
-      echo 'ok'
-      return
-    fi
-  else
-    devmm=${devmm}$(device_major_minor "$dev")","
-  fi
-
-  local file
-
-  if [ "$mode" = 'w' ]
-  then
-    toskip="^$"
-  else
-    toskip="^[^ ]* [^ ]* [^ ]* ro[, ]"
-  fi
-
-  for file in $(cat /proc/mounts | grep -v "$toskip" | cut -f 1 -d ' ')
-  do
-    if [ -e "$file" ]
-    then
-      local d=$(device_major_minor "$file")
-
-      # checking for $d in $devmm is best through the [[...]] bashism
-      if [[ "$devmm" == *",$d,"* ]]
-      then
-        echo "local $d"
-        return
-      fi
-    fi
-  done
-
-  local base_path="$XENBUS_BASE_PATH/$XENBUS_TYPE"
-  for dom in $(xenstore-list "$base_path")
-  do
-    for dev in $(xenstore-list "$base_path/$dom")
-    do
-      d=$(xenstore_read_default "$base_path/$dom/$dev/physical-device" "")
-
-      # checking for $d in $devmm is best through the [[...]] bashism
-      if [ -n "$d" ] && [[ "$devmm" == *",$d,"* ]]
-      then
-        if [ "$mode" = 'w' ]
-        then
-          if ! same_vm $dom
-          then
-            echo "guest $d"
-            return
-          fi
-        else
-          local m=$(xenstore_read_default "$base_path/$dom/$dev/mode" "")
-          m=$(canonicalise_mode "$m")
-
-          if [ "$m" = 'w' ]
-          then
-            if ! same_vm $dom
-            then
-              echo "guest $d"
-              return
-            fi
-          fi
-        fi
-      fi
-    done
-  done
-
-  echo 'ok'
-}
-
-
-##
-# check_device_sharing dev mode
-#
-# Perform the sharing check for the given physical device and mode.
-#
-check_device_sharing()
-{
-  local dev="$1"
-  local mode=$(canonicalise_mode "$2")
-  local type="device"
-  local result
-
-  if [ "x$mode" = 'x!' ]
-  then
-    return 0
-  fi
-
-  result=$(check_sharing "$type" "$dev" "$mode")
-
-  if [ "$result" != 'ok' ]
-  then
-    do_ebusy "Device $dev is mounted " "$mode" "${result%% *}"
-  fi
-}
-
 
 ##
 # check_device_sharing file dev mode inode
@@ -195,49 +60,11 @@ check_file_sharing()
   if [ "$result" != 'ok' ]
   then
     do_ebusy "File $file is loopback-mounted through ${result#* },
-which is mounted " "$mode" "${result%% *}"
+which is mounted " "$mode" "${result%% *}" "block"
   fi
 }
 
 
-##
-# do_ebusy prefix mode result
-#
-# Helper function for check_device_sharing check_file_sharing, calling ebusy
-# with an error message constructed from the given prefix, mode, and result
-# from a call to check_sharing.
-#
-do_ebusy()
-{
-  local prefix="$1"
-  local mode="$2"
-  local result="$3"
-
-  if [ "$result" = 'guest' ]
-  then
-    dom='a guest '
-    when='now'
-  else
-    dom='the privileged '
-    when='by a guest'
-  fi
-
-  if [ "$mode" = 'w' ]
-  then
-    m1=''
-    m2=''
-  else
-    m1='read-write '
-    m2='read-only '
-  fi
-
-  release_lock "block"
-  ebusy \
-"${prefix}${m1}in ${dom}domain,
-and so cannot be mounted ${m2}${when}."
-}
-
-
 t=$(xenstore_read_default "$XENBUS_PATH/type" 'MISSING')
 p=$(xenstore_read "$XENBUS_PATH/params")
 mode=$(xenstore_read "$XENBUS_PATH/mode")
--- a/tools/hotplug/Linux/block-common.sh
+++ b/tools/hotplug/Linux/block-common.sh
@@ -126,3 +126,178 @@ same_vm()
     "$frontend_uuid" = "$otvm" -o "$targetvm" = "$otvm" ]
 }
 
+
+##
+# do_ebusy prefix mode result
+#
+# Helper function for check_device_sharing check_file_sharing, calling ebusy
+# with an error message constructed from the given prefix, mode, and result
+# from a call to check_sharing.
+#
+do_ebusy()
+{
+  local prefix="$1"
+  local mode="$2"
+  local result="$3"
+  local lock="$4"
+
+  if [ "$result" = 'guest' ]
+  then
+    dom='a guest '
+    when='now'
+  else
+    dom='the privileged '
+    when='by a guest'
+  fi
+
+  if [ "$mode" = 'w' ]
+  then
+    m1=''
+    m2=''
+  else
+    m1='read-write '
+    m2='read-only '
+  fi
+
+  release_lock "$lock"
+  ebusy \
+"${prefix}${m1}in ${dom}domain,
+and so cannot be mounted ${m2}${when}."
+}
+
+
+##
+# check_sharing devtype device mode [inode]
+#
+# Check whether the device requested is already in use.  To use the device in
+# read-only mode, it may be in use in read-only mode, but may not be in use in
+# read-write anywhere at all.  To use the device in read-write mode, it must
+# not be in use anywhere at all.
+#
+# Prints one of
+#
+#    'local $d': the device ($d) may not be used because it is mounted in the
+#                current (i.e. the privileged domain) in a way incompatible
+#                with the requested mode;
+#    'guest $d': the device may not be used because it is already mounted
+#                through device $d by a guest in a way incompatible with the
+#                requested mode; or
+#    'ok':       the device may be used.
+#
+check_sharing()
+{
+  local devtype=$1
+  local dev="$2"
+  local mode="$3"
+  local devmm=","
+
+  if [ "$devtype" = "file" ];
+  then
+    local inode="$4"
+
+    shared_list=$(losetup -a |
+          sed -n -e "s@^\([^:]\+\)\(:[[:blank:]]\[0*${dev}\]:${inode}[[:blank:]](.*)\)@\1@p" )
+    for dev in $shared_list
+    do
+      if [ -n "$dev" ]
+      then
+        devmm="${devmm}$(device_major_minor $dev),"
+      fi
+    done
+    # if $devmm is unchanged, file being checked is not a shared loopback device
+    if [ "$devmm" = "," ];
+    then
+      echo 'ok'
+      return
+    fi
+  else
+    devmm=${devmm}$(device_major_minor "$dev")","
+  fi
+
+  local file
+
+  if [ "$mode" = 'w' ]
+  then
+    toskip="^$"
+  else
+    toskip="^[^ ]* [^ ]* [^ ]* ro[, ]"
+  fi
+
+  for file in $(cat /proc/mounts | grep -v "$toskip" | cut -f 1 -d ' ')
+  do
+    if [ -e "$file" ]
+    then
+      local d=$(device_major_minor "$file")
+
+      # checking for $d in $devmm is best through the [[...]] bashism
+      if [[ "$devmm" == *",$d,"* ]]
+      then
+        echo "local $d"
+        return
+      fi
+    fi
+  done
+
+  local base_path="$XENBUS_BASE_PATH/$XENBUS_TYPE"
+  for dom in $(xenstore-list "$base_path")
+  do
+    for dev in $(xenstore-list "$base_path/$dom")
+    do
+      d=$(xenstore_read_default "$base_path/$dom/$dev/physical-device" "")
+
+      # checking for $d in $devmm is best through the [[...]] bashism
+      if [ -n "$d" ] && [[ "$devmm" == *",$d,"* ]]
+      then
+        if [ "$mode" = 'w' ]
+        then
+          if ! same_vm $dom
+          then
+            echo "guest $d"
+            return
+          fi
+        else
+          local m=$(xenstore_read_default "$base_path/$dom/$dev/mode" "")
+          m=$(canonicalise_mode "$m")
+
+          if [ "$m" = 'w' ]
+          then
+            if ! same_vm $dom
+            then
+              echo "guest $d"
+              return
+            fi
+          fi
+        fi
+      fi
+    done
+  done
+
+  echo 'ok'
+}
+
+
+##
+# check_device_sharing dev mode
+#
+# Perform the sharing check for the given physical device and mode.
+#
+check_device_sharing()
+{
+  local dev="$1"
+  local mode=$(canonicalise_mode "$2")
+  local lock="$3"
+  local type="device"
+  local result
+
+  if [ "x$mode" = 'x!' ]
+  then
+    return 0
+  fi
+
+  result=$(check_sharing "$type" "$dev" "$mode")
+
+  if [ "$result" != 'ok' ]
+  then
+    do_ebusy "Device $dev is mounted " "$mode" "${result%% *}" "$lock"
+  fi
+}
--- a/tools/hotplug/Linux/block-tap
+++ b/tools/hotplug/Linux/block-tap
@@ -37,7 +37,7 @@ check_tools()
     if ! command -v tap-ctl > /dev/null 2>&1; then
         fatal "Unable to find tap-ctl tool"
     fi
-    modprobe blktap
+
     if ! tap-ctl check >& /dev/null ; then
 	fatal "Blocktap kernel module not available"
     fi
@@ -81,23 +81,124 @@ find_device()
     done
 
     if [ -z "$pid" ] || [ -z "$minor" ]; then
-        fatal "cannot find required parameters"
+        return 1
+    fi
+
+    return 0
+}
+
+##
+# count_using device mode
+#
+# Check whether the device requested is already in use.  To use the device in
+# read-only mode, it may be in use in read-only mode, but may not be in use in
+# read-write anywhere at all.  To use the device in read-write mode, it must
+# not be in use anywhere at all.
+#
+# Prints one of
+#
+#    'local $d': the device ($d) may not be used because it is mounted in the
+#                current (i.e. the privileged domain) in a way incompatible
+#                with the requested mode;
+#    'guest $d': the device may not be used because it is already mounted
+#                through device $d by a guest in a way incompatible with the
+#                requested mode; or
+#    'ok':       the device may be used.
+#
+#    '$n':       Number of instances using the tapdev
+#
+count_using()
+{
+  local dev="$1"
+  local mode="$2"
+  local devmm=","
+
+  devmm=${devmm}$(device_major_minor "$dev")","
+
+  local file
+
+  if [ "$mode" = 'w' ]
+  then
+    toskip="^$"
+  else
+    toskip="^[^ ]* [^ ]* [^ ]* ro[, ]"
+  fi
+
+  for file in $(cat /proc/mounts | grep -v "$toskip" | cut -f 1 -d ' ')
+  do
+    if [ -e "$file" ]
+    then
+      local d=$(device_major_minor "$file")
+
+      # checking for $d in $devmm is best through the [[...]] bashism
+      if [[ "$devmm" == *",$d,"* ]]
+      then
+        echo "local $d"
+        return
+      fi
     fi
+  done
+
+  local i=0
+  local base_path="$XENBUS_BASE_PATH/$XENBUS_TYPE"
+  for dom in $(xenstore-list "$base_path")
+  do
+    for dev in $(xenstore-list "$base_path/$dom")
+    do
+      d=$(xenstore_read_default "$base_path/$dom/$dev/physical-device" "")
+
+      # checking for $d in $devmm is best through the [[...]] bashism
+      if [ -n "$d" ] && [[ "$devmm" == *",$d,"* ]]
+      then
+          # Don't use same_vm - get total number of VMs and stubdoms.
+          i=$(( i + 1 ))
+      fi
+    done
+  done
+
+  echo "$i"
+}
+
+is_shared()
+{
+    local devpath="/dev/xen/blktap-2/tapdev$minor"
+
+    [ $( count_using $devpath $mode ) -gt 1 ]
 }
 
 # Attaches the device and writes xenstore backend entries to connect
 # the device
 add()
 {
-    dev=$(tap-ctl create -a $target)
+    local tap_opts
+
+    if [ "$mode" = "r" ]; then
+        tap_opts="-R"
+    fi
+
+    claim_lock "block"
+    if find_device; then
+        dev="/dev/xen/blktap-2/tapdev$minor"
+        check_device_sharing "$dev" "$mode"
+    else
+        # Rely on xenmgr setting TAPDISK3_CRYPTO_KEYDIR
+        dev=$( ( eval "exec $_lockfd>&-" ; tap-ctl create $tap_opts -a $target ) )
+    fi
+
     write_dev $dev
+
+    release_lock "block"
 }
 
 # Disconnects the device
 remove()
 {
-    find_device
-    do_or_die tap-ctl destroy -p ${pid} -m ${minor} > /dev/null
+    claim_lock "block"
+    find_device || fatal "cannot find required parameters"
+    if ! is_shared; then
+        do_or_die tap-ctl destroy -p ${pid} -m ${minor} > /dev/null
+    fi
+    release_lock "block"
 }
 
 command=$1
@@ -106,10 +207,18 @@ if [ -z "$target" ]; then
     fatal "No information about the target"
 fi
 
+mode=$( xenstore_read $XENBUS_PATH/mode )
+mode=$( canonicalise_mode $mode )
+
 parse_target "$target"
 
 check_tools || exit 1
 
+# Needed for same_vm
+FRONTEND_ID=$(xenstore_read "$XENBUS_PATH/frontend-id")
+FRONTEND_UUID=$(xenstore_read_default \
+        "/local/domain/$FRONTEND_ID/vm" 'unknown')
+
 case $command in
 add)
     add
