################################################################################
SHORT DESCRIPTION: 
################################################################################
ACPI PM feature for battery/AC/lid management for guests.

################################################################################
LONG DESCRIPTION: 
################################################################################
This feature provides enhanced PM capabilities for batteries, AC adapters and
laptop lids. It also supports power and sleep button even injection. It depends
on the acpi-pm-feature.patch in the QEMU patch queue. The two parts work
in conjunction to surface various PM related devices in the PM SSDT. There is a
partial version of this in upstream Xen that was removed recently.

################################################################################
CHANGELOG 
################################################################################
Original Author: Kamala Narasimhan, kamala.narasimhan@citrix.com
Second Incarnation: Nicolas DI PRIMA, nicolas.diprima@citrix.com
Latest Rework: Ross Philipson, philipsonr@ainfosec.com, 05/05/2015

################################################################################
REMOVAL 
################################################################################
Removal will disable the ACPI PM features.

################################################################################
UPSTREAM PLAN
################################################################################
Not sure if upstream would take it since the original version was removed.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/tools/firmware/hvmloader/util.c
+++ b/tools/firmware/hvmloader/util.c
@@ -861,9 +861,15 @@ int hpet_exists(unsigned long hpet_base)
     return ((hpet_id >> 16) == 0x8086);
 }
 
-static uint8_t battery_port_exists(void)
+static uint8_t xen_acpi_pm_enabled(void)
 {
-    return (inb(0x88) == 0x1F);
+    uint8_t val;
+
+    val = inb(0x9C);
+    if ( !(val & 0x01) || (val == 0xff) )
+        return 0;
+
+    return 1;
 }
 
 static unsigned long acpi_v2p(struct acpi_ctxt *ctxt, void *v)
@@ -941,7 +947,7 @@ void hvmloader_acpi_build_tables(struct
             config->pt.length = strtoll(s, NULL, 0);
     }
 
-    if ( battery_port_exists() )
+    if ( xen_acpi_pm_enabled() )
         config->table_flags |= ACPI_HAS_SSDT_PM;
     if ( !strncmp(xenstore_read("platform/acpi_s3", "1"), "1", 1)  )
         config->table_flags |= ACPI_HAS_SSDT_S3;
--- a/tools/libacpi/ssdt_pm.asl
+++ b/tools/libacpi/ssdt_pm.asl
@@ -3,6 +3,7 @@
  *
  * Copyright (c) 2008  Kamala Narasimhan
  * Copyright (c) 2008  Citrix Systems, Inc.
+ * 2015 Ross Philipson <philipsonr@ainfosec.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published
@@ -32,16 +33,41 @@
  *
  * Following are the battery ports read/written to in order to implement
  * battery support:
- * Battery command port - 0xb2
- * Batter data port     - 0x86
- * Battery commands (written to port 0xb2) -
+ * Battery command port - 0xB4
+ * Battery data port    - 0x86
+ * Battery commands (written to port 0xB4) -
  * 0x7b - Battery operation init
  * 0x7c - Type of battery operation
  * 0x79 - Get battery data length
  * 0x7d - Get battery data
  *
+ * Battery status port 0x88
+ * 0x01 - Battery 1 (BAT0) present
+ * 0x08 - Battery state changes, needs update
+ *
+ * Battery status port 0x84
+ * 0x01 - Battery 2 (BAT1) present
+ * 0x08 - Battery state changes, needs update
+ *
+ * Battery number port 0xB5 - Which battery? i.e. battery 1 or 2 etc.
+ *
  * Also the following ports are used for debugging/logging:
- * 0xB040, 0xB044, 0xB046, 0xB048 
+ * 0xB040, 0xB044, 0xB046, 0xB048
+ *
+ * General ACPI status port 0x9C
+ * 0x01 - ACPI PM device model support enabled
+ * 0x02 - Lid open
+ * 0x04 - AC power on
+ * 0x80 - Battery and AC devices not present.
+ *
+ * N.B. An undesired divergence from upstream was to move the battery command
+ * port off of 0xB2/0xB3. These are the legacy Intel APM ports (see R. Brown
+ * D/PORT.A). It is unclear how the IO port selection was done originally for
+ * this. Perhaps all the ports should be moved our of the low IO port range.
+ * Also the battery 2 status port had to be moved off of 0x90 to 0x84. Port
+ * 0x90 makes Windows (esp. Windows 10) very unhappy.
+ *
+ * TODO Move all the ports to some place safer and less legacy-ish.
  */
 
 DefinitionBlock ("SSDT_PM.aml", "SSDT", 2, "Xen", "HVM", 0)
@@ -72,11 +98,10 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             DBG4,   8,
         }
 
-        OperationRegion (PRT1, SystemIO, 0xB2, 0x02)
+        OperationRegion (PRT1, SystemIO, 0xB4, 0x01)
         Field (PRT1, ByteAcc, NoLock, Preserve)
         {
-            PB2,   8,
-            PB2A,   8
+            PB4,   8,
         }
 
         OperationRegion (PRT2, SystemIO, 0x86, 0x01)
@@ -91,6 +116,31 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             P88,  8
         }
 
+        OperationRegion (PRT4, SystemIO, 0x84, 0x01)
+        Field (PRT4, ByteAcc, NoLock, Preserve)
+        {
+            P84,  8
+        }
+
+        OperationRegion (PRT5, SystemIO, 0xB5, 0x01)
+        Field (PRT5, ByteAcc, NoLock, Preserve)
+        {
+            PB5,   8,
+        }
+
+        OperationRegion (PSTS, SystemIO, 0x9C, 0x01)
+        Field (PSTS, ByteAcc, NoLock, Preserve)
+        {
+            P9C,   8,
+        }
+
+        /* OperationRegion for Power Button */
+        OperationRegion (PBOP, SystemIO, 0x200, 0x01)
+        Field (PBOP, ByteAcc, NoLock, WriteAsZeros)
+        {
+            SLP, 1,
+            WAK, 1
+        }
 
         Mutex (SYNC, 0x01)
         Name (BUF0, Buffer (0x0100) {})
@@ -121,30 +171,30 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
         }
 
         /*
-         * Write to battery port 0xb2 indicating the type of information
+         * Write to battery port 0xB4 indicating the type of information
          * to request, initialize battery data port 0x86 and then return 
          * value provided through data port 0x86.
          */
         Method (WPRT, 2, NotSerialized)
         {
             Store (Arg1, \_SB.P86)
-            Store (Arg0, \_SB.PB2)
+            Store (Arg0, \_SB.PB4)
             Store (Arg0, \_SB.DBG2)
             Store (Arg1, \_SB.DBG4)
-            Store (\_SB.PB2, Local0)
+            Store (\_SB.PB4, Local0)
             While (LNotEqual (Local0, 0x00))
             {
-                Store (\_SB.PB2, Local0)
+                Store (\_SB.PB4, Local0)
             }
 
             Store (\_SB.P86, Local1)
             Store (Local1, \_SB.DBG3)
-            Return (\_SB.P86)
+            Return (Local1)
         }
 
         /*
          * Helper method 1 to write to battery command and data port. 
-         * 0x7c written to port 0xb2 indicating battery info type command.
+         * 0x7c written to port 0xB4 indicating battery info type command.
          * Value 1 or 2 written to port 0x86.  1 for BIF (batterry info) and 2 
          * for BST (battery status).
          */
@@ -158,7 +208,7 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
         }
 
         /*
-         * Helper method 2.  Value 0x7b written to battery command port 0xb2
+         * Helper method 2.  Value 0x7b written to battery command port 0xB4
          * indicating battery info initialization request.  First thing written
          * to battery port before querying for further information pertaining
          * to the battery.
@@ -175,7 +225,7 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
         }
 
         /*
-         * Helper method 3. 0x7d written to battery command port 0xb2
+         * Helper method 3. 0x7d written to battery command port 0xB2
          * indicating request of battery data returned through battery data
          * port 0x86.
          */
@@ -272,13 +322,14 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
                 HLP8 (Arg0, Local0)
                 Increment (Local0)
             }
-            Return (Arg0)
         }
 
         Method (HLPA, 0, NotSerialized)
         {
             Store (HLP6 (), Local0)
-            Return (HLP9 (Buffer (Local0) {}, Local0))
+            Name (TMP, Buffer (Local0) {})
+            HLP9 (TMP, Local0)
+            Return (TMP)
         }
 
         Method (REL, 0, NotSerialized)
@@ -286,8 +337,114 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             Release (SYNC)
         }
 
-        /* Future patches will extend AC object to better account for
-         * AC to DC transition and more. */
+        Method (E05, 0, NotSerialized)
+        {
+            If (\_SB.SLP)
+            {
+                Store (One, \_SB.SLP)
+                Notify (\_SB.SLPB, 0x80)
+            }
+
+            if (\_SB.WAK)
+            {
+                Store (One, \_SB.WAK)
+                Notify (\_SB.SLPB, 0x2)
+            }
+        }
+
+        Method (E06, 0, NotSerialized)
+        {
+            If (\_SB.SLP)
+            {
+                Store (One, \_SB.SLP)
+                Notify (\_SB.PBTN, 0x80)
+            }
+
+            if (\_SB.WAK)
+            {
+                Store (One, \_SB.WAK)
+                Notify (\_SB.PBTN, 0x2)
+            }
+        }
+
+        Method (E07, 0, NotSerialized)
+        {
+            Notify (\_SB.LID, 0x80)
+        }
+
+        Method (E0C, 0, NotSerialized)
+        {
+            Notify (\_SB.AC, 0x80)
+        }
+
+        Method (E0D, 0, NotSerialized)
+        {
+            Notify(\_SB.BAT0, 0x80)
+            Notify(\_SB.BAT1, 0x80)
+        }
+
+        Method (E0E, 0, NotSerialized)
+        {
+            Notify(\_SB.BAT0, 0x81)
+            Notify(\_SB.BAT1, 0x81)
+        }
+
+        Device (LID)
+        {
+            Name (_HID, EisaId ("PNP0C0D"))
+            Method (_LID, 0, NotSerialized)
+            {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x2))
+                {
+                    Return (0x1)
+                }
+
+                Return (0x0)
+            }
+
+            Method (_PRW, 0, NotSerialized)
+            {
+                Return (Package (0x02)
+                {
+                    0x07,
+                    0x03
+                })
+            }
+
+            Method (_PSW, 1, NotSerialized)
+            {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x2))
+                {
+                    Return (0x1)
+                }
+                Return (0x0)
+            }
+        }
+
+        Device (PBTN)
+        {
+            Name (_HID, EisaId ("PNP0C0C"))
+
+            Name (_PRW, Package (0x02)
+            {
+                0x01,
+                0x04
+            })
+        }
+
+        Device (SLPB)
+        {
+            Name (_HID, EisaId ("PNP0C0E"))
+
+            Name (_PRW, Package (0x02)
+            {
+                0x01,
+                0x04
+            })
+        }
+
         Device (AC)
         {
             Name (_HID, "ACPI0003")
@@ -299,11 +456,23 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             })
             Method (_PSR, 0, NotSerialized)
             {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x4))
+                {
+                    Return (0x1)
+                }
+
                 Return (0x0)
             }
 
             Method (_STA, 0, NotSerialized)
             {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x80))
+                {
+                    Return (0x08)
+                }
+
                 Return (0x0F)
             }
         }
@@ -315,6 +484,7 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             ACQR ()
             INIT (0x01)
             INIT (Arg0)
+            Store (Arg0, PB5)
             HLP5 ()
             Store (HLP7 (), Index (BIFP, 0x00))
             Store (HLP7 (), Index (BIFP, 0x01))
@@ -333,7 +503,30 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             Return (BIFP)
         }
 
-        /* Battery object 0 - Always exposed as present. */
+        /* Helper routines to get status and notify on changes */
+        Method (STA1, 0, NotSerialized)
+        {
+            Store (\_SB.P88, Local0)
+            /* Check for battery changed indication */
+            If (And(Local0, 0x80))
+            {
+                /* Generate event for BAT0 */
+                Notify (\_SB.BAT0, 0x81)
+            }
+        }
+
+        Method (STA2, 0, NotSerialized)
+        {
+            Store (\_SB.P84, Local0)
+            /* Check for battery changed indication */
+            If (And(Local0, 0x80))
+            {
+                /* Generate event for BAT1 */
+                Notify (\_SB.BAT1, 0x81)
+            }
+        }
+
+        /* Battery object 0 */
         Device (BAT0)
         {
             Name (_HID, EisaId ("PNP0C0A"))
@@ -343,12 +536,22 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
                 \_SB
             })
 
-            /* Always returns 0x1f indicating battery present. */
             Method (_STA, 0, NotSerialized)
             {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x80))
+                {
+                    Return (0x08)
+                }
+
                 Store (\_SB.P88, Local0)
-                Return ( Local0 )
-            }
+                If (And (Local0, 0x1))
+                {
+                    Return (0x1F)
+                }
+
+                Return (0x0F)
+	    }
 
             /* Battery generic info: design capacity, voltage, model # etc. */
             Method (_BIF, 0, NotSerialized)
@@ -363,22 +566,24 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             Method (_BST, 0, NotSerialized)
             {
                 Store (1, \_SB.DBG1)
+                STA1 ()
                 ACQR ()
                 INIT (0x02)
                 INIT (0x01)
+                Store (0x01, PB5)
                 HLP5 ()
-                Store (Package (0x04) {}, Local0)
-                Store (HLP7 (), Index (Local0, 0x00))
-                Store (HLP7 (), Index (Local0, 0x01))
-                Store (HLP7 (), Index (Local0, 0x02))
-                Store (HLP7 (), Index (Local0, 0x03))
+                Name (BST0, Package (0x04) {})
+                Store (HLP7 (), Index (BST0, 0x00))
+                Store (HLP7 (), Index (BST0, 0x01))
+                Store (HLP7 (), Index (BST0, 0x02))
+                Store (HLP7 (), Index (BST0, 0x03))
                 REL ()
                 Store (2, \_SB.DBG1)
-                Return (Local0)
+                Return (BST0)
             }
         }
 
-        /* Battery object 1 - Always exposed as not present. */
+        /* Battery object 1 */
         Device (BAT1)
         {
             Name (_HID, EisaId ("PNP0C0A"))
@@ -389,30 +594,86 @@ DefinitionBlock ("SSDT_PM.aml", "SSDT",
             })
             Method (_STA, 0, NotSerialized)
             {
+                Store (\_SB.P9C, Local0)
+                If (And (Local0, 0x80))
+                {
+                    Return (0x08)
+                }
+
+                Store (\_SB.P84, Local0)
+                If (And (Local0, 0x1))
+                {
+                    Return (0x1F)
+                }
+
                 Return (0x0F)
             }
 
             Method (_BIF, 0, NotSerialized)
             {
-                Store (\_SB.PB2, Local0)
-                Return (BIF (0x02))
+                Store (BIF (0x02), Local0)
+                Return( Local0 )
             }
 
             Method (_BST, 0, NotSerialized)
             {
+	        /* Check for BIF changes */
+                STA2 ()
                 ACQR ()
                 INIT (0x02)
                 INIT (0x02)
+                Store (0x02, PB5)
                 HLP5 ()
-                Store (Package (0x04) {}, Local0)
-                Store (HLP7 (), Index (Local0, 0x00))
-                Store (HLP7 (), Index (Local0, 0x01))
-                Store (HLP7 (), Index (Local0, 0x02))
-                Store (HLP7 (), Index (Local0, 0x03))
+                Name (BST1, Package (0x04) {})
+                Store (HLP7 (), Index (BST1, 0x00))
+                Store (HLP7 (), Index (BST1, 0x01))
+                Store (HLP7 (), Index (BST1, 0x02))
+                Store (HLP7 (), Index (BST1, 0x03))
                 REL ()
-                Return (Local0)
+                Return (BST1)
             }
         }
     }
+
+    /*  Wire GPE events to notify power state
+     *  changes like ac power to battery use etc.
+     */
+    Scope (\_GPE)
+    {
+        /* Note:  If we run out of level event handlers or there should be a conflict
+         *        in future, we could consolidate the below under one handler and use
+         *        an io port to get the type of event.
+         */
+
+        Method (_L05, 0, NotSerialized)
+        {
+            \_SB.E05()
+        }
+
+        Method (_L06, 0, NotSerialized)
+        {
+            \_SB.E06()
+        }
+
+        Method (_L07, 0, NotSerialized)
+        {
+            \_SB.E07()
+        }
+
+        Method (_L0C, 0, NotSerialized)
+        {
+            \_SB.E0C()
+        }
+
+        Method (_L0D, 0, NotSerialized)
+        {
+            \_SB.E0D()
+        }
+
+        Method (_L0E, 0, NotSerialized)
+        {
+            \_SB.E0E()
+        }
+    }
 }
 
--- a/tools/libacpi/static_tables.c
+++ b/tools/libacpi/static_tables.c
@@ -68,7 +68,8 @@ struct acpi_fadt Fadt = {
     .flags = (ACPI_PROC_C1 |
               ACPI_WBINVD |
               ACPI_FIX_RTC | ACPI_TMR_VAL_EXT |
-              ACPI_USE_PLATFORM_CLOCK),
+              ACPI_USE_PLATFORM_CLOCK |
+              ACPI_RESET_REG_SUP),
 
     .reset_reg = {
         .address_space_id    = ACPI_SYSTEM_IO,
