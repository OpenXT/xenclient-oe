################################################################################
SHORT DESCRIPTION: 
################################################################################
Atomic IO writer helpers

################################################################################
LONG DESCRIPTION: 
################################################################################
Atomic positioned io suitable for O_DIRECT
Use atomic IO functions to make libvhd more robust in the face of interrupts

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/22/2016
Author: Jake Wires <Jake.Wires@citrix.com>
dfc4904151febe35b833cea040b7d4ded24f0c29
1b33fc794ba5a7f0139b8f1882987008388414a1
4bc6769fbe5325e4d01c30feb36dd23b4b3c67ad

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/libvhd.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
@@ -2224,6 +2224,75 @@ namedup(char **dup, const char *name)
 	return 0;
 }
 
+#define vwrite (ssize_t (*)(int, void *, size_t))write
+#define vpwrite (ssize_t (*)(int, void *, size_t, off_t))pwrite
+
+static ssize_t
+vhd_atomic_pio(ssize_t (*f) (int, void *, size_t, off_t),
+	       int fd, void *_s, size_t n, off_t off)
+{
+	char *s = _s;
+	size_t pos = 0;
+	ssize_t res;
+	struct stat st;
+
+	memset(&st, 0, sizeof(st));
+
+	for (;;) {
+		res = (f) (fd, s + pos, n - pos, off + pos);
+		switch (res) {
+		case -1:
+			if (errno == EINTR || errno == EAGAIN)
+				continue;
+			else
+				return 0;
+			break;
+		case 0:
+			errno = EPIPE;
+			return pos;
+		}
+
+		if (pos + res == n)
+			return n;
+
+		if (!st.st_size) {
+			if (fstat(fd, &st) == -1)
+				return -1;
+
+			if (S_ISBLK(st.st_mode))
+				return pos;
+		}
+
+		if (off + pos + res == st.st_size)
+			return pos + res;
+
+		pos += (res & ~(VHD_SECTOR_SIZE - 1));
+	}
+
+	return -1;
+}
+
+static ssize_t
+vhd_atomic_io(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
+{
+	off64_t off;
+	ssize_t res;
+	ssize_t (*pf) (int, void *, size_t, off_t);
+
+	off = lseek64(fd, 0, SEEK_CUR);
+	if (off == (off_t)-1)
+		return -1;
+
+	pf = (f == read ? pread : vpwrite);
+	res = vhd_atomic_pio(pf, fd, _s, n, off);
+
+	if (res > 0)
+		if (lseek64(fd, off + res, SEEK_SET) == (off64_t)-1)
+			return -1;
+
+	return res;
+}
+
 int
 vhd_seek(vhd_context_t *ctx, off_t offset, int whence)
 {
@@ -2252,7 +2321,7 @@ vhd_read(vhd_context_t *ctx, void *buf,
 
 	errno = 0;
 
-	ret = read(ctx->fd, buf, size);
+	ret = vhd_atomic_io(read, ctx->fd, buf, size);
 	if (ret == size)
 		return 0;
 
@@ -2269,7 +2338,7 @@ vhd_write(vhd_context_t *ctx, void *buf,
 
 	errno = 0;
 
-	ret = write(ctx->fd, buf, size);
+	ret = vhd_atomic_io(vwrite, ctx->fd, buf, size);
 	if (ret == size)
 		return 0;
 
