################################################################################
SHORT DESCRIPTION: 
################################################################################
Miscellaneous patches and fixes from the original OpenXT blktap.git repo.

################################################################################
LONG DESCRIPTION: 
################################################################################
The original blktap.git repo contained a mirror of blktap2 with years worth of
work directly checked in. Among this work were numerous fixes that are valid.

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/22/2016
Various original authors of the commits.
027f5abb706078b1f9fd49279f0d207849cd5e4b
5c6f405d11c3bf5fabf705c1ec35a1031e02a555
df2e16c7c6af2cebdef72d541ae192cbf6a5b55f
d8fd64a421e065c951818a793b6f3c048453502d
a2480dcde324d856e2017350d8b3322577f0e678
29113b54207787faeacbd6b896a0e2944cce9836
5b05287e9f90a0ec298a64ba9f5130d8235ce39f
8f8cb520563f412911a6b73b6f5067229ab11af0

################################################################################
REMOVAL 
################################################################################
Can be removed at such a time as all the fixes are upstreamed.

################################################################################
UPSTREAM PLAN
################################################################################
Most of these patches can be upstreamed.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-read.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-read.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-read.c
@@ -197,6 +197,7 @@ vhd_print_parent(vhd_context_t *vhd, vhd
 	}
 
 	printf("       decoded name : %s\n", buf);
+	free(buf);
 }
 
 static void
@@ -461,8 +462,10 @@ vhd_test_bitmap(vhd_context_t *vhd, uint
 
 		if (vhd->bat.bat[blk] == DD_BLK_UNUSED)
 			bit = 0;
-		else
-			bit = vhd_bitmap_test(vhd, buf, blk);
+		else {
+			/* Switch to sector, seems more in line with what -i does */
+			bit = vhd_bitmap_test(vhd, buf, sec);
+		}
 
 	print:
 		printf("block %s: ", conv(hex, blk));
@@ -510,8 +513,8 @@ vhd_test_batmap(vhd_context_t *vhd, uint
 
 	for (i = 0; i < count; i++) {
 		cur = block + i;
-		fprintf(stderr, "batmap for block %s: %d\n", conv(hex, cur),
-			vhd_batmap_test(vhd, &vhd->batmap, cur));
+		printf("batmap for block %s: %d\n", conv(hex, cur),
+		       vhd_batmap_test(vhd, &vhd->batmap, cur));
 	}
 
 	return 0;
Index: xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/libvhd.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
@@ -1247,7 +1247,7 @@ vhd_find_parent(vhd_context_t *ctx, cons
 	location   = NULL;
 	*_location = NULL;
 
-	if (!parent)
+	if (!parent || !strcmp(parent, ""))
 		return -EINVAL;
 
 	if (parent[0] == '/') {
@@ -1779,7 +1779,7 @@ vhd_footer_offset_at_eof(vhd_context_t *
 {
 	int err;
 	if ((err = vhd_seek(ctx, 0, SEEK_END)))
-		return errno;
+		return err;
 	*off = vhd_position(ctx) - sizeof(vhd_footer_t);
 	return 0;
 }
Index: xen-4.10.0/tools/blktap2/drivers/tapdisk-image.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/tapdisk-image.c
+++ xen-4.10.0/tools/blktap2/drivers/tapdisk-image.c
@@ -86,10 +86,12 @@ tapdisk_image_free(td_image_t *image)
 int
 tapdisk_image_check_td_request(td_image_t *image, td_request_t treq)
 {
-	int rdonly;
+	int rdonly, err;
 	td_driver_t *driver;
 	td_disk_info_t *info;
 
+	err = -EINVAL;
+
 	driver = image->driver;
 	if (!driver)
 		return -ENODEV;
@@ -100,8 +102,10 @@ tapdisk_image_check_td_request(td_image_
 	if (treq.op != TD_OP_READ && treq.op != TD_OP_WRITE)
 		goto fail;
 
-	if (treq.op == TD_OP_WRITE && rdonly)
+	if (treq.op == TD_OP_WRITE && rdonly) {
+		err = -EPERM;
 		goto fail;
+	}
 
 	if (treq.secs <= 0 || treq.sec + treq.secs > info->size)
 		goto fail;
@@ -109,10 +113,10 @@ tapdisk_image_check_td_request(td_image_
 	return 0;
 
 fail:
-	ERR(-EINVAL, "bad td request on %s (%s, %"PRIu64"): %d at %"PRIu64,
+	ERR(err, "bad td request on %s (%s, %"PRIu64"): %d at %"PRIu64,
 	    image->name, (rdonly ? "ro" : "rw"), info->size, treq.op,
 	    treq.sec + treq.secs);
-	return -EINVAL;
+	return err;
 
 }
 
@@ -121,13 +125,14 @@ tapdisk_image_check_ring_request(td_imag
 {
 	td_driver_t *driver;
 	td_disk_info_t *info;
-	int i, psize, rdonly;
+	int i, err, psize, rdonly;
 	uint64_t nsects, total;
 
 	driver = image->driver;
 	if (!driver)
 		return -ENODEV;
 
+	err = -EINVAL;
 	nsects = 0;
 	total  = 0;
 	info   = &driver->info;
@@ -138,8 +143,10 @@ tapdisk_image_check_ring_request(td_imag
 	    req->operation != BLKIF_OP_WRITE)
 		goto fail;
 
-	if (req->operation == BLKIF_OP_WRITE && rdonly)
+	if (req->operation == BLKIF_OP_WRITE && rdonly) {
+		err = -EPERM;
 		goto fail;
+	}
 
 	if (!req->nr_segments || req->nr_segments > MAX_SEGMENTS_PER_REQ)
 		goto fail;
@@ -162,8 +169,8 @@ tapdisk_image_check_ring_request(td_imag
 	return 0;
 
 fail:
-	ERR(-EINVAL, "bad request on %s (%s, %"PRIu64"): id: %"PRIu64": %d at %"PRIu64,
+	ERR(err, "bad request on %s (%s, %"PRIu64"): id: %"PRIu64": %d at %"PRIu64,
 	    image->name, (rdonly ? "ro" : "rw"), info->size, req->id,
 	    req->operation, req->sector_number + total);
-	return -EINVAL;
+	return err;
 }
Index: xen-4.10.0/tools/blktap2/drivers/tapdisk-vbd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/tapdisk-vbd.c
+++ xen-4.10.0/tools/blktap2/drivers/tapdisk-vbd.c
@@ -1177,12 +1177,25 @@ tapdisk_vbd_check_queue(td_vbd_t *vbd)
 	return 0;
 }
 
+static int
+tapdisk_vbd_request_should_retry(td_vbd_request_t *vreq)
+{
+	switch (vreq->error) {
+	case -EPERM:
+	case -ENOSYS:
+		return 0;
+	default:
+		return 1;
+	}
+}
+
 void
 tapdisk_vbd_complete_vbd_request(td_vbd_t *vbd, td_vbd_request_t *vreq)
 {
 	if (!vreq->submitting && !vreq->secs_pending) {
 		if (vreq->status == BLKIF_RSP_ERROR &&
 		    vreq->num_retries < TD_VBD_MAX_RETRIES &&
+		    tapdisk_vbd_request_should_retry(vreq) &&
 		    !td_flag_test(vbd->state, TD_VBD_DEAD) &&
 		    !td_flag_test(vbd->state, TD_VBD_SHUTDOWN_REQUESTED))
 			tapdisk_vbd_move_request(vreq, &vbd->failed_requests);
@@ -1390,13 +1403,17 @@ tapdisk_vbd_issue_request(td_vbd_t *vbd,
 
 #if 0
 	err = tapdisk_vbd_check_queue(vbd);
-	if (err)
+	if (err) {
+		vreq->error = err;
 		goto fail;
+	}
 #endif
 
 	err = tapdisk_image_check_ring_request(image, req);
-	if (err)
+	if (err) {
+		vreq->error = err;
 		goto fail;
+	}
 
 	for (i = 0; i < req->nr_segments; i++) {
 		nsects = req->seg[i].last_sect - req->seg[i].first_sect + 1;
Index: xen-4.10.0/tools/blktap2/drivers/tapdisk2.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/tapdisk2.c
+++ xen-4.10.0/tools/blktap2/drivers/tapdisk2.c
@@ -42,7 +42,7 @@
 static void
 usage(const char *app, int err)
 {
-	fprintf(stderr, "usage: %s [-D] <-u uuid> <-c control socket>\n", app);
+	fprintf(stderr, "usage: %s [-D don't daemonize] [-h help]\n", app);
 	exit(err);
 }
 
Index: xen-4.10.0/tools/blktap2/control/tap-ctl-ipc.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/control/tap-ctl-ipc.c
+++ xen-4.10.0/tools/blktap2/control/tap-ctl-ipc.c
@@ -70,7 +70,7 @@ tap_ctl_read_message(int fd, tapdisk_mes
 			break;
 		}
 		else if (FD_ISSET(fd, &readfds)) {
-			ret = read(fd, message + offset, len - offset);
+			ret = read(fd, (char*)message + offset, len - offset);
 			if (ret <= 0) {
 				if (errno == EINTR)
 					continue;
@@ -126,7 +126,7 @@ tap_ctl_write_message(int fd, tapdisk_me
 			break;
 		}
 		else if (FD_ISSET(fd, &writefds)) {
-			ret = write(fd, message + offset, len - offset);
+			ret = write(fd, (char*)message + offset, len - offset);
 			if (ret <= 0) {
 				if (errno == EINTR)
 					continue;
