################################################################################
SHORT DESCRIPTION:
################################################################################
Fix the blktap2 build with modern OpenSSL.

################################################################################
LONG DESCRIPTION:
################################################################################
Recent versions of OpenSSL have removed some of the functions used by blktap2
and made the data types opaque so their size is not available, preventing their
allocation on the stack. Port the existing logic to the available interface.

################################################################################
CHANGELOG
################################################################################
Author: Christopher Clark, <christopher.w.clark@gmail.com>

################################################################################
REMOVAL
################################################################################
Keep.

################################################################################
UPSTREAM PLAN
################################################################################
No, blktap2 has been removed from upstream.

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
diff --git a/tools/blktap2/vhd/lib/vhd-util-key.c b/tools/blktap2/vhd/lib/vhd-util-key.c
index 1c3c049ad6..9b0f9d6226 100644
--- a/tools/blktap2/vhd/lib/vhd-util-key.c
+++ b/tools/blktap2/vhd/lib/vhd-util-key.c
@@ -153,27 +153,32 @@ int
 __vhd_util_calculate_keyhash(struct vhd_keyhash *keyhash,
 			     const uint8_t *key, size_t size)
 {
-	int err;
-	EVP_MD_CTX evp;
+	int err = -1;
+	EVP_MD_CTX *evp;
 
-	err = -1;
-	EVP_MD_CTX_init(&evp);
-	if (!EVP_DigestInit_ex(&evp, EVP_sha256(), NULL)) {
-		ERR("failed to init sha256 context\n");
+	evp = EVP_MD_CTX_create();
+	if (!evp)
+	{
+		ERR("failed to allocate for sha256 context\n");
 		goto out;
 	}
 
-	if (!EVP_DigestUpdate(&evp, keyhash->nonce, sizeof(keyhash->nonce))) {
+	if (!EVP_DigestInit_ex(evp, EVP_sha256(), NULL)) {
+		ERR("failed to init sha256 digest context\n");
+		goto cleanup;
+	}
+
+	if (!EVP_DigestUpdate(evp, keyhash->nonce, sizeof(keyhash->nonce))) {
 		ERR("failed to hash nonce\n");
 		goto cleanup;
 	}
 
-	if (!EVP_DigestUpdate(&evp, key, size)) {
+	if (!EVP_DigestUpdate(evp, key, size)) {
 		ERR("failed to hash key\n");
 		goto cleanup;
 	}
 
-	if (!EVP_DigestFinal_ex(&evp, keyhash->hash, NULL)) {
+	if (!EVP_DigestFinal_ex(evp, keyhash->hash, NULL)) {
 		ERR("failed to finalize hash\n");
 		goto cleanup;
 	}
@@ -181,7 +186,7 @@ __vhd_util_calculate_keyhash(struct vhd_keyhash *keyhash,
 	err = 0;
 
 cleanup:
-	EVP_MD_CTX_cleanup(&evp);
+	EVP_MD_CTX_destroy(evp);
 out:
 	return err;
 }
diff --git a/tools/blktap2/drivers/crypto/compat-crypto-openssl.h b/tools/blktap2/drivers/crypto/compat-crypto-openssl.h
index a434b0b7ce..8fac2069f3 100644
--- a/tools/blktap2/drivers/crypto/compat-crypto-openssl.h
+++ b/tools/blktap2/drivers/crypto/compat-crypto-openssl.h
@@ -9,8 +9,8 @@
 
 struct crypto_blkcipher
 {
-	EVP_CIPHER_CTX de_ctx;
-	EVP_CIPHER_CTX en_ctx;
+	EVP_CIPHER_CTX *de_ctx;
+	EVP_CIPHER_CTX *en_ctx;
 };
 
 #endif
diff --git a/tools/blktap2/drivers/crypto/xts_aes.c b/tools/blktap2/drivers/crypto/xts_aes.c
index 717a2a4f91..ad3ff05065 100644
--- a/tools/blktap2/drivers/crypto/xts_aes.c
+++ b/tools/blktap2/drivers/crypto/xts_aes.c
@@ -45,6 +45,22 @@ struct crypto_blkcipher * xts_aes_setup(void)
 	ret = calloc(1, sizeof(struct crypto_blkcipher));
 	if (!ret)
 		return NULL;
+
+    ret->de_ctx = EVP_CIPHER_CTX_new();
+    if (!ret->de_ctx)
+    {
+        free(ret);
+        return NULL;
+    }
+
+    ret->en_ctx = EVP_CIPHER_CTX_new();
+    if (!ret->en_ctx)
+    {
+        EVP_CIPHER_CTX_free(ret->de_ctx);
+        free(ret);
+        return NULL;
+    }
+
 	return ret;
 }
 
@@ -61,22 +77,24 @@ int xts_aes_setkey(struct crypto_blkcipher *cipher, const uint8_t *key, unsigned
 	if (!type)
 		return -20;
 
-	EVP_CIPHER_CTX_init(&cipher->en_ctx);
-	EVP_CIPHER_CTX_init(&cipher->de_ctx);
+    if (!cipher->en_ctx || !cipher->de_ctx ||
+	    EVP_CIPHER_CTX_reset(cipher->en_ctx) ||
+	    EVP_CIPHER_CTX_reset(cipher->de_ctx))
+        return -22;
 
 	/* TODO lazily initialize the encrypt context until doing an encryption,
 	 * since it's only needed for a writable node (top diff) */
-	if (!EVP_CipherInit_ex(&cipher->en_ctx, type, NULL, NULL, NULL, 1))
+	if (!EVP_CipherInit_ex(cipher->en_ctx, type, NULL, NULL, NULL, 1))
 		return -1;
-	if (!EVP_CipherInit_ex(&cipher->de_ctx, type, NULL, NULL, NULL, 0))
+	if (!EVP_CipherInit_ex(cipher->de_ctx, type, NULL, NULL, NULL, 0))
 		return -2;
-	if (!EVP_CIPHER_CTX_set_key_length(&cipher->en_ctx, keysize))
+	if (!EVP_CIPHER_CTX_set_key_length(cipher->en_ctx, keysize))
 		return -3;
-	if (!EVP_CipherInit_ex(&cipher->en_ctx, NULL, NULL, key, NULL, 1))
+	if (!EVP_CipherInit_ex(cipher->en_ctx, NULL, NULL, key, NULL, 1))
 		return -4;
-	if (!EVP_CIPHER_CTX_set_key_length(&cipher->de_ctx, keysize))
+	if (!EVP_CIPHER_CTX_set_key_length(cipher->de_ctx, keysize))
 		return -5;
-	if (!EVP_CipherInit_ex(&cipher->de_ctx, NULL, NULL, key, NULL, 0))
+	if (!EVP_CipherInit_ex(cipher->de_ctx, NULL, NULL, key, NULL, 0))
 		return -6;
 	return 0;
 }
diff --git a/tools/blktap2/drivers/crypto/xts_aes.h b/tools/blktap2/drivers/crypto/xts_aes.h
index e9b6751ab4..d4e603472e 100644
--- a/tools/blktap2/drivers/crypto/xts_aes.h
+++ b/tools/blktap2/drivers/crypto/xts_aes.h
@@ -52,9 +52,9 @@ xts_aes_plain_encrypt(struct crypto_blkcipher *xts_tfm, sector_t sector,
 	int dstlen;
 	xts_aes_plain_iv_generate(iv, 16, sector);
 
-	if (!EVP_CipherInit_ex(&xts_tfm->en_ctx, NULL, NULL, NULL, iv, -1))
+	if (!EVP_CipherInit_ex(xts_tfm->en_ctx, NULL, NULL, NULL, iv, -1))
 		return -1;
-	if (!EVP_CipherUpdate(&xts_tfm->en_ctx, dst_buf, &dstlen, src_buf, nbytes))
+	if (!EVP_CipherUpdate(xts_tfm->en_ctx, dst_buf, &dstlen, src_buf, nbytes))
 		return -2;
 	/* no need to finalize with XTS when multiple of blocksize */
 	return 0;
@@ -68,9 +68,9 @@ xts_aes_plain_decrypt(struct crypto_blkcipher *xts_tfm, sector_t sector,
 	int dstlen;
 	xts_aes_plain_iv_generate(iv, 16, sector);
 
-	if (!EVP_CipherInit_ex(&xts_tfm->de_ctx, NULL, NULL, NULL, iv, -1))
+	if (!EVP_CipherInit_ex(xts_tfm->de_ctx, NULL, NULL, NULL, iv, -1))
 		return -1;
-	if (!EVP_CipherUpdate(&xts_tfm->de_ctx, dst_buf, &dstlen, src_buf, nbytes))
+	if (!EVP_CipherUpdate(xts_tfm->de_ctx, dst_buf, &dstlen, src_buf, nbytes))
 		return -2;
 	/* no need to finalize with XTS when multiple of blocksize */
 	return 0;
