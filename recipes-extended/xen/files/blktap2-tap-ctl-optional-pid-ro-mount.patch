################################################################################
SHORT DESCRIPTION: 
################################################################################
Add optional pid argument and ro tapdisk support.

################################################################################
LONG DESCRIPTION: 
################################################################################
Optional pid argument simplifies device destruction interface and the 
pause/unpause interfaces. The code had to be modified to use the old list
handling because something was missing from an earlier change.

The -R option sets the TAPDISK_MESSAGE_FLAG_RDONLY allowing tapdisks to be
created and opened RO. Two new APIs to pass flags had to be added because
something was missing from an earlier change.

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/22/2016
Author: Jake Wires <Jake.Wires@citrix.com>
7cef6457c38cc51c46d6eaf32343796b5d7704be
387962f1645a12db976b82c2a972737e95c286d5
6ee06eff2f182097579a486f74899dc77a1955a9

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.6.5/tools/blktap2/control/tap-ctl-list.c
===================================================================
--- xen-4.6.5.orig/tools/blktap2/control/tap-ctl-list.c
+++ xen-4.6.5/tools/blktap2/control/tap-ctl-list.c
@@ -534,3 +534,29 @@ tap_ctl_find(const char *type, const cha
 
 	return ret;
 }
+
+int
+tap_ctl_find_pid(int minor)
+{
+	int pid, err;
+	tap_list_t **list, **_entry;
+
+	err = tap_ctl_list(&list);
+	if (err)
+		return err;
+
+	pid = -1;
+
+	for (_entry = list; *_entry != NULL; ++_entry) {
+		tap_list_t *entry  = *_entry;
+
+		if (entry->minor == minor) {
+			pid = entry->pid;
+			break;
+		}
+	}
+
+	tap_ctl_free_list(list);
+
+	return pid >= 0 ? pid : -ENOENT;
+}
Index: xen-4.6.5/tools/blktap2/control/tap-ctl.c
===================================================================
--- xen-4.6.5.orig/tools/blktap2/control/tap-ctl.c
+++ xen-4.6.5/tools/blktap2/control/tap-ctl.c
@@ -31,6 +31,8 @@
 #include <string.h>
 #include <unistd.h>
 #include <getopt.h>
+#include <sys/stat.h>
+#include <sys/types.h>
 
 #include "tap-ctl.h"
 
@@ -247,20 +249,21 @@ usage:
 static void
 tap_cli_create_usage(FILE *stream)
 {
-	fprintf(stream, "usage: create <-a args> [-d device name]\n");
+	fprintf(stream, "usage: create <-a args> [-d device name] [-R readonly]\n");
 }
 
 static int
 tap_cli_create(int argc, char **argv)
 {
-	int c, err;
+	int c, err, flags;
 	char *args, *devname;
 
+	flags   = 0;
 	args    = NULL;
 	devname = NULL;
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "a:d:h")) != -1) {
+	while ((c = getopt(argc, argv, "a:Rd:h")) != -1) {
 		switch (c) {
 		case 'a':
 			args = optarg;
@@ -268,6 +271,9 @@ tap_cli_create(int argc, char **argv)
 		case 'd':
 			devname = optarg;
 			break;
+		case 'R':
+			flags |= TAPDISK_MESSAGE_FLAG_RDONLY;
+			break;
 		case '?':
 			goto usage;
 		case 'h':
@@ -279,7 +285,7 @@ tap_cli_create(int argc, char **argv)
 	if (!args)
 		goto usage;
 
-	err = tap_ctl_create(args, &devname);
+	err = tap_ctl_create_flags(args, &devname, flags);
 	if (!err)
 		printf("%s\n", devname);
 
@@ -293,19 +299,21 @@ usage:
 static void
 tap_cli_destroy_usage(FILE *stream)
 {
-	fprintf(stream, "usage: destroy <-p pid> <-m minor>\n");
+	fprintf(stream, "usage: destroy (<-m minor> [-p pid] | <-d dev>)\n");
 }
 
 static int
 tap_cli_destroy(int argc, char **argv)
 {
 	int c, pid, minor;
+	const char *device;
 
 	pid   = -1;
 	minor = -1;
+	device = NULL;
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "p:m:h")) != -1) {
+	while ((c = getopt(argc, argv, "p:m:d:h")) != -1) {
 		switch (c) {
 		case 'p':
 			pid = atoi(optarg);
@@ -313,6 +321,9 @@ tap_cli_destroy(int argc, char **argv)
 		case 'm':
 			minor = atoi(optarg);
 			break;
+		case 'd':
+			device = optarg;
+			break;
 		case '?':
 			goto usage;
 		case 'h':
@@ -321,9 +332,40 @@ tap_cli_destroy(int argc, char **argv)
 		}
 	}
 
-	if (pid == -1 || minor == -1)
+	if (device) {
+		int maj;
+		struct stat sb;
+
+		if (stat(device, &sb)) {
+			perror("stat");
+			return -errno;
+		}
+
+		maj = tap_ctl_blk_major();
+		if (maj < 0) {
+			fprintf(stderr, "failed to find td major: %d\n", maj);
+			return maj;
+		}
+
+		if (!S_ISBLK(sb.st_mode) || major(sb.st_rdev) != maj) {
+			fprintf(stderr, "invalid device %s\n", device);
+			return -EINVAL;
+		}
+
+		minor = minor(sb.st_rdev);
+	}
+
+	if (minor == -1)
 		goto usage;
 
+	if (pid == -1) {
+		pid = tap_ctl_find_pid(minor);
+		if (pid == -1) {
+			fprintf(stderr, "failed to find pid for %d\n", minor);
+			return pid;
+		}
+	}
+
 	return tap_ctl_destroy(pid, minor);
 
 usage:
@@ -498,7 +540,7 @@ usage:
 static void
 tap_cli_pause_usage(FILE *stream)
 {
-	fprintf(stream, "usage: pause <-p pid> <-m minor>\n");
+	fprintf(stream, "usage: pause <-m minor> [-p pid]\n");
 }
 
 static int
@@ -526,9 +568,17 @@ tap_cli_pause(int argc, char **argv)
 		}
 	}
 
-	if (pid == -1 || minor == -1)
+	if (minor == -1)
 		goto usage;
 
+	if (pid == -1) {
+		pid = tap_ctl_find_pid(minor);
+		if (pid == -1) {
+			fprintf(stderr, "failed to find pid for %d\n", minor);
+			return pid;
+		}
+	}
+
 	return tap_ctl_pause(pid, minor);
 
 usage:
@@ -539,7 +589,7 @@ usage:
 static void
 tap_cli_unpause_usage(FILE *stream)
 {
-	fprintf(stream, "usage: unpause <-p pid> <-m minor> [-a args]\n");
+	fprintf(stream, "usage: unpause <-m minor> [-p pid] [-a args]\n");
 }
 
 int
@@ -572,9 +622,17 @@ tap_cli_unpause(int argc, char **argv)
 		}
 	}
 
-	if (pid == -1 || minor == -1)
+	if (minor == -1)
 		goto usage;
 
+	if (pid == -1) {
+		pid = tap_ctl_find_pid(minor);
+		if (pid == -1) {
+			fprintf(stderr, "failed to find pid for %d\n", minor);
+			return pid;
+		}
+	}
+
 	return tap_ctl_unpause(pid, minor, args);
 
 usage:
@@ -633,21 +691,22 @@ usage:
 static void
 tap_cli_open_usage(FILE *stream)
 {
-	fprintf(stream, "usage: open <-p pid> <-m minor> <-a args>\n");
+	fprintf(stream, "usage: open <-p pid> <-m minor> <-a args> [-R readonly]\n");
 }
 
 static int
 tap_cli_open(int argc, char **argv)
 {
 	const char *args;
-	int c, pid, minor;
+	int c, pid, minor, flags;
 
+	flags = 0;
 	pid   = -1;
 	minor = -1;
 	args  = NULL;
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "a:m:p:h")) != -1) {
+	while ((c = getopt(argc, argv, "a:Rm:p:h")) != -1) {
 		switch (c) {
 		case 'p':
 			pid = atoi(optarg);
@@ -658,6 +717,9 @@ tap_cli_open(int argc, char **argv)
 		case 'a':
 			args = optarg;
 			break;
+		case 'R':
+			flags |= TAPDISK_MESSAGE_FLAG_RDONLY;
+			break;
 		case '?':
 			goto usage;
 		case 'h':
@@ -669,7 +731,7 @@ tap_cli_open(int argc, char **argv)
 	if (pid == -1 || minor == -1 || !args)
 		goto usage;
 
-	return tap_ctl_open(pid, minor, args);
+	return tap_ctl_open_flags(pid, minor, args, flags);
 
 usage:
 	tap_cli_open_usage(stderr);
Index: xen-4.6.5/tools/blktap2/control/tap-ctl.h
===================================================================
--- xen-4.6.5.orig/tools/blktap2/control/tap-ctl.h
+++ xen-4.6.5/tools/blktap2/control/tap-ctl.h
@@ -77,11 +77,13 @@ int tap_ctl_get_driver_id(const char *ha
 int tap_ctl_list(tap_list_t ***list);
 void tap_ctl_free_list(tap_list_t **list);
 int tap_ctl_find(const char *type, const char *path, tap_list_t *tap);
+int tap_ctl_find_pid(int minor);
 
 int tap_ctl_allocate(int *minor, char **devname);
 int tap_ctl_free(const int minor);
 
 int tap_ctl_create(const char *params, char **devname);
+int tap_ctl_create_flags(const char *params, char **devname, int flags);
 int tap_ctl_destroy(const int id, const int minor);
 
 int tap_ctl_spawn(void);
@@ -91,6 +93,7 @@ int tap_ctl_attach(const int id, const i
 int tap_ctl_detach(const int id, const int minor);
 
 int tap_ctl_open(const int id, const int minor, const char *params);
+int tap_ctl_open_flags(const int id, const int minor, const char *params, int flags);
 int tap_ctl_close(const int id, const int minor, const int force);
 
 int tap_ctl_pause(const int id, const int minor);
Index: xen-4.6.5/tools/blktap2/control/tap-ctl-create.c
===================================================================
--- xen-4.6.5.orig/tools/blktap2/control/tap-ctl-create.c
+++ xen-4.6.5/tools/blktap2/control/tap-ctl-create.c
@@ -37,6 +37,12 @@
 int
 tap_ctl_create(const char *params, char **devname)
 {
+	return tap_ctl_create_flags(params, devname, 0);
+}
+
+int
+tap_ctl_create_flags(const char *params, char **devname, int flags)
+{
 	int err, id, minor;
 
 	err = tap_ctl_allocate(&minor, devname);
@@ -53,7 +59,7 @@ tap_ctl_create(const char *params, char
 	if (err)
 		goto destroy;
 
-	err = tap_ctl_open(id, minor, params);
+	err = tap_ctl_open_flags(id, minor, params, flags);
 	if (err)
 		goto detach;
 
Index: xen-4.6.5/tools/blktap2/control/tap-ctl-open.c
===================================================================
--- xen-4.6.5.orig/tools/blktap2/control/tap-ctl-open.c
+++ xen-4.6.5/tools/blktap2/control/tap-ctl-open.c
@@ -38,6 +38,12 @@
 int
 tap_ctl_open(const int id, const int minor, const char *params)
 {
+	return tap_ctl_open_flags(id, minor, params, 0);
+}
+
+int
+tap_ctl_open_flags(const int id, const int minor, const char *params, int flags)
+{
 	int err;
 	tapdisk_message_t message;
 
@@ -46,6 +52,7 @@ tap_ctl_open(const int id, const int min
 	message.cookie = minor;
 	message.u.params.storage = TAPDISK_STORAGE_TYPE_DEFAULT;
 	message.u.params.devnum = minor;
+	message.u.params.flags = flags;
 
 	err = snprintf(message.u.params.path,
 		       sizeof(message.u.params.path) - 1, "%s", params);
