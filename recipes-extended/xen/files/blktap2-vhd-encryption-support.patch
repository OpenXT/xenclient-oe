################################################################################
SHORT DESCRIPTION: 
################################################################################
VHD encryption support.

################################################################################
LONG DESCRIPTION: 
################################################################################
This patch adds the current VHD encrytion mechanisms used in OpenXT as of 2016.
This version uses AES XTS encrytion on VHD blocks. The OpenSSL crypto library
is used to do the encryption/decryption. The implementation is in
drivers/block-crypto.c and in the files in drivers/crypto/*.

The previous version used the AES XTS crypto support from the Linux kernel. All
of this was left out in the patch making effort.

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/24/2016
Philip Tricca <philip.tricca@citrix.com>
Vincent Hanquez <vincent.hanquez@eu.citrix.com>
Tomasz Wroblewski <tomasz.wroblewski@citrix.com>
Jake Wires <Jake.Wires@citrix.com>
Christian Limpach <Christian.Limpach@citrix.com>
7a8f7d5ddf2c70bf5c552a1bc8f0070256015b59
fb41ab1686353d039ea6e144e6086d1df0cd54f0
7e77cc8a1a074d77a04be6e252d07ff1ff27d688
d6db495bcaa0daf5a85ba2554b86c44b14205a35
5773136160b0cec8f6d932a64e84d6b3301ef27c
83035d3ccabc200a903bc5a47c8ca3ec85802933
851d06d3f1eab721180a5608eaa855e7eb38dad2
6d5f862479be3b652ecfabca2728f85a1663bb22
59e0bd9a3ee92946653b3714b1b437fc5c469473
969300731a957de6e211b58e89ce390e7a3f1023
e1e79fc8650fcacee43845417127ede8fc1d0e01
6df041294c5220a77fbd8d8520cdc432f62a509f
8aff25641de383b9af2b5eff015c0effca5469ea
c1690373ab646392e22349e2808ed8cb8ed715a2
7d4b850a749017f6c429756f5e62769e9451ad43
def872845a0756fbb44c2fff2c98a2fc56e2f839
af68e9b46a8d5934fed2dfc86e8a1f08b72f1180
6290f973182adfc3618c6a6b5c7aaeae1f0804fe
604aa4179e522bd36e03b43e9ea1b71d1b9c2b4d
d3a4613f22e6aa16a8b1b1af3393118033edda83

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
It is unlikely this would be upstreamed itself but there is upstream crypto
support in blktap2 though it is unclear if it would meet OpenXT's needs.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
This patch depends on blktap2-vhd-keyhash-support.patch being applied first.

################################################################################
PATCHES 
################################################################################
Index: xen-4.10.0/tools/blktap2/drivers/block-crypto.c
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/block-crypto.c
@@ -0,0 +1,471 @@
+/*
+ * Copyright (c) 2010, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2014 Citrix Systems, Inc.
+ */
+
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <unistd.h>
+
+#include "list.h"
+#include "libvhd.h"
+#include "tapdisk.h"
+#include "vhd-util.h"
+
+#include "crypto/compat-crypto-openssl.h"
+#include "crypto/xts_aes.h"
+
+#define MAX_AES_XTS_PLAIN_KEYSIZE 1024
+
+struct keystore_entry {
+    struct list_head    next;
+    uint8_t             key[MAX_AES_XTS_PLAIN_KEYSIZE / 8];
+    int                 keysize;
+    struct vhd_keyhash  keyhash;
+};
+
+static LIST_HEAD(keystore);
+
+int __vhd_util_calculate_keyhash(struct vhd_keyhash *, const uint8_t *, size_t);
+
+static int
+check_key(const uint8_t *keybuf, unsigned int keysize,
+	  const struct vhd_keyhash *vhdhash)
+{
+	int err;
+	struct vhd_keyhash keyhash;
+
+	if (!vhdhash->cookie) {
+		DPRINTF("missing key hash\n");
+		err = 1;
+		goto out;
+	}
+
+	memcpy(keyhash.nonce, vhdhash->nonce, sizeof(keyhash.nonce));
+	err = __vhd_util_calculate_keyhash(&keyhash, keybuf, keysize / 8);
+	if (err) {
+		DPRINTF("failed to calculate keyhash: %d\n", err);
+		goto out;
+	}
+
+	if (memcmp(keyhash.hash, vhdhash->hash, sizeof(keyhash.hash))) {
+		DPRINTF("key hash mismatch\n");
+		err = 1;
+		goto out;
+	}
+
+out:
+	if (err) {
+		DPRINTF("key check failed\n");
+		err = -ENOKEY;
+	}
+	return err;
+}
+
+static void
+keystore_free_entry(struct keystore_entry *ent)
+{
+	if (ent) {
+		memset(ent->key, 0, sizeof(ent->key));
+		free(ent);
+	}
+}
+
+static int
+keystore_add_entry(const uint8_t *keybuf,
+		   size_t keysize, struct vhd_keyhash *keyhash)
+{
+	int err;
+	struct keystore_entry *ent = NULL;
+
+	list_for_each_entry(ent, &keystore, next) {
+		if (!memcmp(&ent->keyhash, keyhash, sizeof(ent->keyhash))) {
+			err = 0;
+			goto out;
+		}
+	}
+
+	ent = calloc(1, sizeof(*ent));
+	if (!ent) {
+		err = -ENOMEM;
+		goto out;
+	}
+
+	INIT_LIST_HEAD(&ent->next);
+	memcpy(ent->key, keybuf, keysize / 8);
+	memcpy(&ent->keyhash, keyhash, sizeof(ent->keyhash));
+        ent->keysize = keysize;
+
+	list_add(&ent->next, &keystore);
+
+out:
+	if (err)
+		keystore_free_entry(ent);
+	return err;
+}
+
+static int
+keystore_read_entry(uint8_t *keybuf, int *keysize, const struct vhd_keyhash *keyhash)
+{
+	int err;
+	struct keystore_entry *ent;
+        *keysize = 0;
+	/*
+	 * in the offline backup case, we won't have an entry for the
+	 * newest snapshot (since it didn't exist when we first opened
+	 * the chain). instead, we check all cached keys for a keyhash
+	 * match, assuming the snapshot shares the same key as one of
+	 * its ancestors.
+	 */
+
+	list_for_each_entry(ent, &keystore, next) {
+		if (!check_key(ent->key, ent->keysize, &ent->keyhash)) {
+			DPRINTF("using key from keystore\n");
+			memcpy(keybuf, ent->key, ent->keysize / 8);
+                        *keysize = ent->keysize;
+			err = 0;
+		} else {
+			err = -EINVAL;
+		}
+		goto out;
+	}
+
+	err = -ENOENT;
+
+out:
+	return err;
+}
+
+static int
+find_keyfile(char **keyfile, const char *dirs,
+	     const char *basename, int keysize)
+{
+	char *sep = NULL;
+	*keyfile  = NULL;
+
+	while (dirs && strlen(dirs) > 0) {
+		char keydir[256] = { 0 }, path[256] = { 0 };
+		struct stat st;
+		int err;
+
+		sep = strchr(dirs, ',');
+		/* get directory element */
+		if (sep == NULL) {
+			strncpy(keydir, dirs, sizeof(keydir));
+			dirs = NULL;
+		} else {
+			size_t len = sep - dirs;
+			strncpy(keydir, dirs, len);
+			dirs = sep+1;
+		}
+
+		/* check if keyfile is inside dir */
+		snprintf(path, sizeof(path),
+			 "%s/%s,aes-xts-plain,%d.key",
+			 keydir, basename, keysize);
+		err = stat(path, &st);
+		if (err == 0) {
+			/* found */
+			*keyfile = strdup(path);
+			if (*keyfile == NULL) {
+				return -ENOMEM;
+			}
+			return 0;
+		} else if (err < 0 && errno != ENOENT) {
+			return -errno;
+		}
+	}
+
+	return -ENOENT;
+}
+
+static int
+read_keyfile(const char *keydir, const char *basename,
+	     uint8_t *keybuf, size_t keysize)
+{
+	int err, fd = -1;
+	char *keyfile = NULL;
+
+	err = find_keyfile(&keyfile, keydir, basename, keysize);
+	if (err) {
+		keyfile = NULL;
+		goto out;
+	}
+
+	fd = open(keyfile, O_RDONLY);
+	if (fd == -1) {
+		err = -errno;
+		goto out;
+	}
+
+	err = read(fd, keybuf, keysize / 8);
+	if (err != keysize / 8) {
+		err = err == -1 ? -errno : -EINVAL;
+		goto out;
+	}
+
+	DPRINTF("using keyfile %s, keysize %d\n", keyfile, (int)keysize);
+	err = 0;
+
+out:
+	if (fd != -1)
+		close(fd);
+	free(keyfile);
+	return err;
+}
+
+// try 512bit, 256bit keys
+static int
+read_preferred_keyfile(const char *keydir, const char *basename, uint8_t *keybuf, int *keysize)
+{
+    int sizes[] = { 512, 256 };
+    int err, i;
+    *keysize = 0;
+    for (i = 0; i < 2; ++i) {
+        err = read_keyfile(keydir, basename, keybuf, sizes[i]);
+        if (err == 0) {
+            *keysize = sizes[i];
+            return 0;
+        }
+    }
+    return err;
+}
+
+
+static vhd_context_t *
+vhd_open_parent(vhd_context_t *ctx)
+{
+    vhd_context_t *parent = NULL;
+    char *next = NULL;
+    int err;
+    if (ctx->footer.type != HD_TYPE_DIFF)
+        goto out;
+    if (vhd_parent_raw(ctx))
+        goto out;
+    err = vhd_parent_locator_get(ctx, &next);
+    if (err)
+        goto out;
+
+    parent = calloc(1, sizeof(*parent));
+    if (!parent)
+        goto out;
+
+    err = vhd_open(parent, next, VHD_OPEN_RDONLY);
+    if (err) {
+        DPRINTF("vhd_open failed: %d\n", err);
+        free(parent);
+        parent = NULL;
+        goto out;
+    }
+out:
+    free(next);
+    return parent;
+}
+
+static char *
+get_vhd_basename(vhd_context_t *vhd)
+{
+    char *basename, *ext;
+
+    /* strip path */
+    basename = strrchr(vhd->file, '/');
+    if (basename == NULL)
+        basename = vhd->file;
+    else
+        basename++;
+
+    basename = strdup(basename);
+    if (!basename)
+        return NULL;
+
+    /* cut off .vhd extension */
+    ext = strstr(basename, ".vhd");
+    if (ext)
+        basename[ext - basename] = 0;
+    return basename;
+}
+
+/* look up the chain for first parent VHD with encryption key */
+static int
+chain_find_keyed_vhd(vhd_context_t *vhd, uint8_t *key, int *keysize, struct vhd_keyhash *out_keyhash)
+{
+    int err;
+    struct vhd_keyhash keyhash;
+    vhd_context_t *p = vhd, *p2;
+    char *basename;
+    const char *keydir;
+    int found = 0;
+
+    memset(out_keyhash, 0, sizeof(*out_keyhash));
+
+    keydir = getenv("TAPDISK2_CRYPTO_KEYDIR");
+
+    while (p) {
+        err = vhd_get_keyhash(p, &keyhash);
+        if (err) {
+            DPRINTF("error getting keyhash: %d\n", err);
+            return err;
+        }
+
+        if (keyhash.cookie && keydir == NULL) {
+            DPRINTF("this vhd requires TAPDISK2_CRYPTO_KEYDIR\n");
+            return -ENOKEY;
+        }
+
+        /* if keydir is set, we check if a key exists (with the same basename)
+         * regardless the keyhash.cookie value to prevent an issue where
+         * the vhd has been replaced by another one that is clear */
+        if (keydir) {
+            basename = get_vhd_basename(p);
+            if (!basename) {
+                err = -ENOMEM;
+                goto out;
+            }
+
+            err = read_preferred_keyfile(keydir, basename, key, keysize);
+            free(basename);
+            switch (err) {
+            case 0: /* a key has been found with the same basename */
+                if (keyhash.cookie == 0) {
+                    DPRINTF("key found for %s but no hash set\n", p->file);
+                    err = -EACCES;
+                    goto out;
+                }
+                err = check_key(key, *keysize, &keyhash);
+                if (err)
+                    goto out;
+                DPRINTF("using key from vhd: %s\n", p->file);
+                *out_keyhash = keyhash;
+                found = 1;
+                break;
+            case -ENOENT: /* no key found, get to the next one if the cookie's not set */
+                if (keyhash.cookie != 0) {
+                    err = -ENOKEY;
+                    goto out;
+                }
+                break;
+            default: /* some another error */
+                goto out;
+            }
+        }
+
+        if (found)
+            goto out;
+
+        p2 = p;
+        p = vhd_open_parent(p);
+
+        if (p2 != vhd) {
+            vhd_close(p2);
+            free(p2);
+        }
+    }
+    return 0;
+out:
+    if (p != vhd) {
+        vhd_close(p);
+        free(p);
+    }
+    return err;
+}
+
+int
+vhd_open_crypto(vhd_context_t *vhd, const char *_name)
+{
+	struct vhd_keyhash keyhash;
+	int err;
+        uint8_t key[MAX_AES_XTS_PLAIN_KEYSIZE / 8] = { 0 };
+        int keysize = 0;
+        vhd_context_t *keyed_vhd = NULL;
+
+	if (vhd->xts_tfm)
+		return 0;
+
+        err = chain_find_keyed_vhd(vhd, key, &keysize, &keyhash);
+        if (err) {
+            DPRINTF("error in vhd chain: %d\n", err);
+            return err;
+        }
+
+        if (keyhash.cookie == 0) {
+            return 0;
+        }
+
+	vhd->xts_tfm = xts_aes_setup();
+	if (vhd->xts_tfm == NULL) {
+		err = -EINVAL;
+		return err;
+	}
+
+	xts_aes_setkey(vhd->xts_tfm, key, keysize / 8);
+	return 0;
+}
+
+void
+vhd_crypto_decrypt(vhd_context_t *vhd, td_request_t *t)
+{
+	int sec, ret;
+
+	for (sec = 0; sec < t->secs; sec++) {
+		ret = xts_aes_plain_decrypt(vhd->xts_tfm, t->sec + sec,
+					    (uint8_t *)t->buf +
+					    sec * VHD_SECTOR_SIZE,
+					    (uint8_t *)t->buf +
+					    sec * VHD_SECTOR_SIZE,
+					    VHD_SECTOR_SIZE);
+		if (ret) {
+			DPRINTF("crypto decrypt failed: %d : TERMINATED\n", ret);
+			exit(1); /* XXX */
+		}
+	}
+}
+
+void
+vhd_crypto_encrypt(vhd_context_t *vhd, td_request_t *t, char *orig_buf)
+{
+	int sec, ret;
+
+	for (sec = 0; sec < t->secs; sec++) {
+		ret = xts_aes_plain_encrypt(vhd->xts_tfm, t->sec + sec,
+					    (uint8_t *)t->buf +
+					    sec * VHD_SECTOR_SIZE,
+					    (uint8_t *)orig_buf +
+					    sec * VHD_SECTOR_SIZE,
+					    VHD_SECTOR_SIZE);
+		if (ret) {
+			DPRINTF("crypto encrypt failed: %d : TERMINATED\n", ret);
+			exit(1); /* XXX */
+		}
+	}
+}
Index: xen-4.10.0/tools/blktap2/drivers/block-vhd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/block-vhd.c
+++ xen-4.10.0/tools/blktap2/drivers/block-vhd.c
@@ -59,6 +59,7 @@
 #include "tapdisk-driver.h"
 #include "tapdisk-interface.h"
 #include "tapdisk-disktype.h"
+#include "block-crypto.h"
 
 unsigned int SPB;
 
@@ -176,6 +177,7 @@ struct vhd_request {
 	uint8_t                   op;
 	vhd_flag_t                flags;
 	td_request_t              treq;
+	char                     *orig_buf;
 	struct tiocb              tiocb;
 	struct vhd_state         *state;
 	struct vhd_request       *next;
@@ -654,6 +656,12 @@ __vhd_open(td_driver_t *driver, const ch
             ", inf:%u)\n",
 	    driver->info.size, driver->info.sector_size, driver->info.info);
 
+	err = vhd_open_crypto(&s->vhd, name);
+	if (err) {
+		DPRINTF("failed to init crypto: %d\n", err);
+		goto fail;
+	}
+
 	if (test_vhd_flag(flags, VHD_FLAG_OPEN_STRICT) && 
 	    !test_vhd_flag(flags, VHD_FLAG_OPEN_RDONLY)) {
 		err = vhd_kill_footer(s);
@@ -1494,6 +1502,7 @@ schedule_data_write(struct vhd_state *s,
 	u32 blk = 0, sec = 0;
 	struct vhd_bitmap  *bm = NULL;
 	struct vhd_request *req;
+	char *crypto_buf = NULL;
 
 	if (s->vhd.footer.type == HD_TYPE_FIXED) {
 		offset = vhd_sectors_to_bytes(treq.sec);
@@ -1520,15 +1529,30 @@ schedule_data_write(struct vhd_state *s,
 	offset  = vhd_sectors_to_bytes(offset);
 
  make_request:
+	if (s->vhd.xts_tfm) {
+		err = posix_memalign((void **)&crypto_buf, VHD_SECTOR_SIZE,
+				     treq.secs * VHD_SECTOR_SIZE);
+		if (err)
+			return -EBUSY;
+	}
 	req = alloc_vhd_request(s);
-	if (!req)
+	if (!req) {
+		if (s->vhd.xts_tfm)
+			free(crypto_buf);
 		return -EBUSY;
+	}
 
 	req->treq  = treq;
 	req->flags = flags;
 	req->op    = VHD_OP_DATA_WRITE;
 	req->next  = NULL;
 
+	if (s->vhd.xts_tfm) {
+		req->orig_buf = req->treq.buf;
+		req->treq.buf = crypto_buf;
+		vhd_crypto_encrypt(&s->vhd, &req->treq, req->orig_buf);
+	}
+
 	if (test_vhd_flag(flags, VHD_FLAG_REQ_UPDATE_BITMAP)) {
 		bm = get_bitmap(s, blk);
 		ASSERT(bm && bitmap_valid(bm));
@@ -1846,6 +1870,17 @@ signal_completion(struct vhd_request *li
 
 		err  = (error ? error : r->error);
 		next = r->next;
+		if (s->vhd.xts_tfm) {
+			switch (r->op) {
+			case VHD_OP_DATA_READ:
+				vhd_crypto_decrypt(&s->vhd, &r->treq);
+				break;
+			case VHD_OP_DATA_WRITE:
+				free(r->treq.buf);
+				r->treq.buf = r->orig_buf;
+				break;
+			}
+		}
 		td_complete_request(r->treq, err);
 		DBG(TLOG_DBG, "lsec: 0x%08"PRIx64", blk: 0x%04"PRIx64", "
 		    "err: %d\n", r->treq.sec, r->treq.sec / s->spb, err);
Index: xen-4.10.0/tools/blktap2/include/libvhd.h
===================================================================
--- xen-4.10.0.orig/tools/blktap2/include/libvhd.h
+++ xen-4.10.0/tools/blktap2/include/libvhd.h
@@ -138,6 +138,8 @@ struct vhd_batmap {
 	char                      *map;
 };
 
+struct crypto_blkcipher;
+
 struct vhd_context {
 	int                        fd;
 	char                      *file;
@@ -151,6 +153,8 @@ struct vhd_context {
 	vhd_footer_t               footer;
 	vhd_bat_t                  bat;
 	vhd_batmap_t               batmap;
+
+	struct crypto_blkcipher   *xts_tfm;
 };
 
 static inline uint32_t
Index: xen-4.10.0/tools/blktap2/drivers/block-crypto.h
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/block-crypto.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2010, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2010 Citrix Systems, Inc.
+ */
+
+
+int vhd_open_crypto(vhd_context_t *vhd, const char *name);
+void vhd_crypto_encrypt(vhd_context_t *vhd, td_request_t *t, char *orig_buf);
+void vhd_crypto_decrypt(vhd_context_t *vhd, td_request_t *t);
Index: xen-4.10.0/tools/blktap2/drivers/crypto/Makefile
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/crypto/Makefile
@@ -0,0 +1,23 @@
+#
+# Copyright (c) 2014 Citrix Systems, Inc.
+#
+
+# ASFLAGS += -g -I.
+# CFLAGS += -g -I.
+# LDFLAGS += -g
+RANLIB ?= ranlib
+
+LIBXTS-AES-OBJS := xts_aes.o
+
+libxts-aes.a: $(LIBXTS-AES-OBJS)
+	$(AR) r $@ $(LIBXTS-AES-OBJS)
+	$(RANLIB) $@
+
+test_decrypt: test_decrypt.o libxts-aes.a
+	$(CC) $(CFLAGS) -o $@ -lcrypto -L. -lxts-aes $+
+
+clean:
+	rm -f $(LIBXTS-AES-OBJS)
+	rm -f libxts-aes.a
+	rm -f test_decrypt test_decrypt.o
+
Index: xen-4.10.0/tools/blktap2/drivers/crypto/test_decrypt.c
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/crypto/test_decrypt.c
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2010, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2014 Citrix Systems, Inc.
+ */
+
+
+// #define PERF
+
+#include <err.h>
+#include <stdio.h>
+#include <stdint.h>
+#include "compat-crypto-openssl.h"
+#include "xts_aes.h"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#define BUFSIZE (512)
+uint8_t dst_buf[BUFSIZE];
+uint8_t src_buf[BUFSIZE];
+
+uint8_t key[32];
+
+int
+main(int argc, char **argv, char **envp)
+{
+    struct crypto_blkcipher *xts_tfm;
+    uint8_t *p_buf;
+    int fd, i, ret;
+    char *keyfile = "test.key";
+
+    fd = open(keyfile, O_RDONLY);
+    if (fd == -1)
+      err(1, "open");
+
+    ret = read(fd, key, sizeof(key));
+    if (ret != sizeof(key))
+      err(1, "read");
+
+    xts_tfm = xts_aes_setup();
+
+    xts_setkey(crypto_blkcipher_tfm(xts_tfm), key, sizeof(key));
+
+#ifdef PERF
+  for (i = 0; i < 1000000; i++) {
+#endif
+
+#ifndef PERF
+    printf("buffers: src %p dst %p\n", src_buf, dst_buf);
+#endif
+    ret = xts_aes_plain_encrypt(xts_tfm, 0, src_buf, src_buf, BUFSIZE);
+#ifndef PERF
+    printf("return %d\n", ret);
+#endif
+
+#ifndef PERF
+    p_buf = src_buf;
+    for (i = 0; i < BUFSIZE; i += 8)
+	printf("%03d/%p: %02x%02x%02x%02x%02x%02x%02x%02x\n", i, &p_buf[i],
+	       p_buf[i], p_buf[i+1], p_buf[i+2], p_buf[i+3],
+	       p_buf[i+4], p_buf[i+5], p_buf[i+6], p_buf[i+7]);
+#endif
+
+    ret = xts_aes_plain_decrypt(xts_tfm, 0, src_buf, src_buf, BUFSIZE);
+#ifndef PERF
+    printf("return %d\n", ret);
+#endif
+
+#ifndef PERF
+    p_buf = src_buf;
+    for (i = 0; i < BUFSIZE; i += 8)
+	printf("%03d/%p: %02x%02x%02x%02x%02x%02x%02x%02x\n", i, &p_buf[i],
+	       p_buf[i], p_buf[i+1], p_buf[i+2], p_buf[i+3],
+	       p_buf[i+4], p_buf[i+5], p_buf[i+6], p_buf[i+7]);
+#endif
+#ifdef PERF
+  }
+#endif
+
+    return 0;
+}
Index: xen-4.10.0/tools/blktap2/drivers/crypto/xts_aes.c
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/crypto/xts_aes.c
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2010, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2014 Citrix Systems, Inc.
+ */
+
+
+#include <err.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include "compat-crypto-openssl.h"
+#include "xts_aes.h"
+
+struct crypto_blkcipher * xts_aes_setup(void)
+{
+	struct crypto_blkcipher *ret;
+
+	ret = calloc(1, sizeof(struct crypto_blkcipher));
+	if (!ret)
+		return NULL;
+	return ret;
+}
+
+int xts_aes_setkey(struct crypto_blkcipher *cipher, const uint8_t *key, unsigned int keysize)
+{
+	const EVP_CIPHER *type;
+
+	switch (keysize) {
+	case 64: type = EVP_aes_256_xts(); break;
+	case 32: type = EVP_aes_128_xts(); break;
+	default: return -21; break;
+	}
+
+	if (!type)
+		return -20;
+
+	EVP_CIPHER_CTX_init(&cipher->en_ctx);
+	EVP_CIPHER_CTX_init(&cipher->de_ctx);
+
+	/* TODO lazily initialize the encrypt context until doing an encryption,
+	 * since it's only needed for a writable node (top diff) */
+	if (!EVP_CipherInit_ex(&cipher->en_ctx, type, NULL, NULL, NULL, 1))
+		return -1;
+	if (!EVP_CipherInit_ex(&cipher->de_ctx, type, NULL, NULL, NULL, 0))
+		return -2;
+	if (!EVP_CIPHER_CTX_set_key_length(&cipher->en_ctx, keysize))
+		return -3;
+	if (!EVP_CipherInit_ex(&cipher->en_ctx, NULL, NULL, key, NULL, 1))
+		return -4;
+	if (!EVP_CIPHER_CTX_set_key_length(&cipher->de_ctx, keysize))
+		return -5;
+	if (!EVP_CipherInit_ex(&cipher->de_ctx, NULL, NULL, key, NULL, 0))
+		return -6;
+	return 0;
+}
Index: xen-4.10.0/tools/blktap2/drivers/crypto/xts_aes.h
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/crypto/xts_aes.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2010, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2014 Citrix Systems, Inc.
+ */
+
+
+extern struct crypto_blkcipher *xts_aes_setup(void);
+
+int xts_aes_setkey(struct crypto_blkcipher *cipher, const uint8_t *key, unsigned int keysize);
+
+typedef uint64_t sector_t;
+
+static inline void
+xts_aes_plain_iv_generate(uint8_t *iv, int iv_size, sector_t sector)
+{
+    memset(iv, 0, iv_size);
+    *(uint32_t *)iv = sector & 0xffffffff; /* LITTLE ENDIAN */
+}
+
+static inline int
+xts_aes_plain_encrypt(struct crypto_blkcipher *xts_tfm, sector_t sector,
+		      uint8_t *dst_buf, uint8_t *src_buf, unsigned int nbytes)
+{
+	uint8_t iv[16];
+	int dstlen;
+	xts_aes_plain_iv_generate(iv, 16, sector);
+
+	if (!EVP_CipherInit_ex(&xts_tfm->en_ctx, NULL, NULL, NULL, iv, -1))
+		return -1;
+	if (!EVP_CipherUpdate(&xts_tfm->en_ctx, dst_buf, &dstlen, src_buf, nbytes))
+		return -2;
+	/* no need to finalize with XTS when multiple of blocksize */
+	return 0;
+}
+
+static inline int
+xts_aes_plain_decrypt(struct crypto_blkcipher *xts_tfm, sector_t sector,
+		      uint8_t *dst_buf, uint8_t *src_buf, unsigned int nbytes)
+{
+	uint8_t iv[16];
+	int dstlen;
+	xts_aes_plain_iv_generate(iv, 16, sector);
+
+	if (!EVP_CipherInit_ex(&xts_tfm->de_ctx, NULL, NULL, NULL, iv, -1))
+		return -1;
+	if (!EVP_CipherUpdate(&xts_tfm->de_ctx, dst_buf, &dstlen, src_buf, nbytes))
+		return -2;
+	/* no need to finalize with XTS when multiple of blocksize */
+	return 0;
+}
Index: xen-4.10.0/tools/blktap2/drivers/crypto/compat-crypto-openssl.h
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/drivers/crypto/compat-crypto-openssl.h
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) 2014 Citrix Systems, Inc.
+ */
+
+#ifndef COMPAT_CRYPTO_OPENSSL_H
+#define COMPAT_CRYPTO_OPENSSL_H
+
+#include <openssl/evp.h>
+
+struct crypto_blkcipher
+{
+	EVP_CIPHER_CTX de_ctx;
+	EVP_CIPHER_CTX en_ctx;
+};
+
+#endif
Index: xen-4.10.0/tools/blktap2/drivers/Makefile
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/Makefile
+++ xen-4.10.0/tools/blktap2/drivers/Makefile
@@ -44,6 +44,15 @@ ifeq ($(VHD_STATIC),y)
 td-util: CFLAGS += -static
 endif
 
+tapdisk2 tapdisk-stream tapdisk-diff: CRYPTLIBS += -lcrypto -Lcrypto -lxts-aes
+tapdisk2 tapdisk-stream tapdisk-diff: crypto/libxts-aes.a
+
+img2qcow qcow2raw qcow-create: CRYPTLIBS += -lcrypto -Lcrypto -lxts-aes
+img2qcow qcow2raw qcow-create: crypto/libxts-aes.a
+
+crypto/libxts-aes.a: crypto/*.c crypto/*.h
+	$(MAKE) -C crypto libxts-aes.a
+
 PORTABLE-OBJS-y :=
 PORTABLE-OBJS-$(CONFIG_Linux)  += blk_linux.o
 PORTABLE-OBJS-$(CONFIG_NetBSD) += blk_netbsd.o
@@ -76,18 +85,19 @@ BLK-OBJS-y  += aes.o
 BLK-OBJS-y  += md5.o
 BLK-OBJS-y  += $(PORTABLE-OBJS-y)
 BLK-OBJS-y  += $(REMUS-OBJS)
+BLK-OBJS-y  += block-crypto.o
 
 all: $(IBIN) lock-util qcow-util
 
 
 tapdisk2: $(TAP-OBJS-y) $(BLK-OBJS-y) $(MISC-OBJS-y) tapdisk2.o
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) -lm  $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm  $(APPEND_LDFLAGS)
 
 tapdisk-client: tapdisk-client.o
 	$(CC) -o $@ $^ $(LDFLAGS) -lrt $(APPEND_LDFLAGS)
 
 tapdisk-stream tapdisk-diff: %: %.o $(TAP-OBJS-y) $(BLK-OBJS-y)
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) -lm $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm $(APPEND_LDFLAGS)
 
 td-util: td.o tapdisk-utils.o tapdisk-log.o $(PORTABLE-OBJS-y)
 	$(CC) -o $@ $^ $(LDFLAGS) $(VHDLIBS) $(APPEND_LDFLAGS)
@@ -99,7 +109,7 @@ lock-util: lock.c
 qcow-util: img2qcow qcow2raw qcow-create
 
 img2qcow qcow2raw qcow-create: %: %.o $(TAP-OBJS-y) $(BLK-OBJS-y)
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) -lm $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm $(APPEND_LDFLAGS)
 
 install: all
 	$(INSTALL_DIR) -p $(DESTDIR)$(INST_DIR)
@@ -110,6 +120,7 @@ uninstall:
 
 clean:
 	rm -rf .*.d *.o *~ xen TAGS $(IBIN) $(LIB) $(LOCK_UTIL) $(QCOW_UTIL)
+	$(MAKE) -C crypto clean
 
 distclean: clean
 
