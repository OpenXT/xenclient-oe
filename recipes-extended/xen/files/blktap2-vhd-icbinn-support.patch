################################################################################
SHORT DESCRIPTION: 
################################################################################
Interdomain VHD synchronization library.

################################################################################
LONG DESCRIPTION: 
################################################################################
ICBINN is a library and framework for allowing access to VHD from the 
Synchronizer client domain. This patch contains the portion of the ICBINN
framework that are integrated into blktap2. Had to add the devops support from
an earlier dead feature. Switched the vhd_position function back to off_t from
off64_t. To use the latter would take a bunch of changes.

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/22/2016
James McKenzie <James.McKenzie@citrix.com>
72513d318353fe6be330a3e983c0976837a9e62c
116f2edd62095ec74ff24781567b40c22d0c62ce
17d54e14de930ddd0d7e54ea8f58bd8d81ab314b
1c9f24920ba7995b37d1ce019958d39ff6f88c7e
2111c6d171dd6e89d7ac574003ed7ef3d66954b3
1d6a6c3ce279448e654019d1950f225f0f05a49b
70e886c7cba966902723617ea435d13e4a115120
d5797db89b7d9a951723887b68f48936f6354c81

################################################################################
REMOVAL 
################################################################################
This patch will move to the meta-syncxt layer.

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.10.0/tools/blktap2/vhd/lib/icbinn.c
===================================================================
--- /dev/null
+++ xen-4.10.0/tools/blktap2/vhd/lib/icbinn.c
@@ -0,0 +1,334 @@
+/*
+ * Copyright (c) 2012 Citrix Systems, Inc.
+ */
+
+#include <icbinn.h>
+
+static ICBINN *icb_vhd;
+
+static ICBINN *icb_key;
+
+ICBINN *
+vhd_icbinn_key (void)
+{
+  char proto[1024], *ptr, *host;
+  int port;
+
+  if (icb_key)
+    return icb_key;
+
+  ptr = getenv ("LIBVHD_ICBINN_KEY_SERVER");
+  if (!ptr)
+    return NULL;
+
+  strncpy (proto, ptr, sizeof (proto));
+  proto[sizeof (proto) - 1] = 0;
+
+  host = index (proto, ':');
+  if (!host)
+    return NULL;
+  *(host++) = 0;
+
+  ptr = index (host, ':');
+  if (!ptr)
+    {
+      port = ICBINN_PORT;
+    }
+  else
+    {
+      *ptr = 0;
+      port = atoi (ptr + 1);
+    }
+
+  if (!strcmp (proto, "argo"))
+    {
+      icb_key = icbinn_clnt_create_argo (atoi (host), port);
+    }
+  else if (!strcmp (proto, "tcp"))
+    {
+      icb_key = icbinn_clnt_create_tcp (host, port);
+    }
+
+  return icb_key;
+}
+
+ICBINN *
+vhd_icbinn_vhd (void)
+{
+  char proto[1024], *ptr, *host;
+  int port;
+
+  if (icb_vhd)
+    return icb_vhd;
+
+  ptr = getenv ("LIBVHD_ICBINN_VHD_SERVER");
+  if (!ptr)
+    return NULL;
+
+  strncpy (proto, ptr, sizeof (proto));
+  proto[sizeof (proto) - 1] = 0;
+
+  host = index (proto, ':');
+  if (!host)
+    return NULL;
+  *(host++) = 0;
+
+  ptr = index (host, ':');
+  if (!ptr)
+    {
+      port = ICBINN_PORT;
+    }
+  else
+    {
+      *ptr = 0;
+      port = atoi (ptr + 1);
+    }
+
+  if (!strcmp (proto, "argo"))
+    {
+      icb_vhd = icbinn_clnt_create_argo (atoi (host), port);
+    }
+  else if (!strcmp (proto, "tcp"))
+    {
+      icb_vhd = icbinn_clnt_create_tcp (host, port);
+    }
+
+  return icb_vhd;
+}
+
+static off_t
+vhd_icbinn_devops_position (vhd_context_t * vhd)
+{
+  return (off_t) vhd->offset;
+}
+
+static int
+vhd_icbinn_devops_seek (vhd_context_t * vhd, off64_t off, int whence)
+{
+  struct icbinn_stat buf;
+
+  switch (whence)
+    {
+      //XXX: both of these ought to check for seeks beyond EOF, but they don't
+    case SEEK_SET:
+      vhd->offset = off;
+      break;
+    case SEEK_CUR:
+      vhd->offset += off;
+      break;
+    case SEEK_END:
+
+      if (icbinn_stat (icb_vhd, vhd->file, &buf))
+        return -1;
+
+      if (buf.type != ICBINN_TYPE_FILE)
+        return -1;
+
+      vhd->offset = buf.size + off;
+      break;
+    default:
+      return -1;
+    }
+
+  return 0;
+}
+
+static int
+vhd_icbinn_devops_read (vhd_context_t * vhd, void *buf, size_t count)
+{
+  size_t ret;
+
+  ret = icbinn_pread (icb_vhd, vhd->fd, buf, count, vhd->offset);
+
+  if (ret > 0)
+    vhd->offset += ret;
+
+  return (ret == count) ? 0 : -EIO;
+}
+
+static int
+vhd_icbinn_devops_pread (vhd_context_t * vhd,
+                         void *buf, size_t size, off64_t off)
+{
+  size_t ret = icbinn_pread (icb_vhd, vhd->fd, buf, size, off);
+
+  return (ret == size) ? 0 : -EIO;
+}
+
+static int
+vhd_icbinn_devops_write (vhd_context_t * vhd, void *buf, size_t count)
+{
+  size_t ret;
+
+  ret = icbinn_pwrite (icb_vhd, vhd->fd, buf, count, vhd->offset);
+
+  if (ret > 0)
+    vhd->offset += ret;
+
+  return (ret == count) ? 0 : -EIO;
+}
+
+static int
+vhd_icbinn_devops_pwrite (vhd_context_t * vhd,
+                          void *buf, size_t size, off64_t off)
+{
+  size_t ret = icbinn_pwrite (icb_vhd, vhd->fd, buf, size, off);
+
+  return (ret == size) ? 0 : -EIO;
+}
+
+static void
+vhd_icbinn_devops_close (vhd_context_t * vhd)
+{
+  char *file = vhd->file;
+  int fd = vhd->fd;
+
+  vhd->fd = -1;
+  __vhd_close (vhd);
+
+  if (file)
+    icbinn_close (icb_vhd, fd);
+}
+
+static vhd_devops_t vhd_icbinn_devops = {
+  .position = vhd_icbinn_devops_position,
+  .seek = vhd_icbinn_devops_seek,
+  .read = vhd_icbinn_devops_read,
+  .write = vhd_icbinn_devops_write,
+  .pread = vhd_icbinn_devops_pread,
+  .pwrite = vhd_icbinn_devops_pwrite,
+  .close = vhd_icbinn_devops_close,
+};
+
+
+
+/* Shamelessly stolen of glibc 2.9 with modifications */
+
+/* Return the canonical absolute name of file NAME.  A canonical name
+   does not contain any `.', `..' components nor any repeated path
+   separators ('/') or symlinks.  All path components must exist.  If
+   RESOLVED is null, the result is malloc'd; otherwise, if the
+   canonical name is PATH_MAX chars or more, returns null with `errno'
+   set to ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
+   returns the name in RESOLVED.  If the name cannot be resolved and
+   RESOLVED is non-NULL, it contains the path of the first component
+   that cannot be resolved.  If the path can be resolved, RESOLVED
+   holds the same value as the value returned.  */
+
+char *
+vhd_realpath (const char *name, char *resolved)
+{
+  char *rpath, *dest;
+  const char *start, *end, *rpath_limit;
+  long int path_max;
+
+  if (!vhd_icbinn_vhd ())
+    return realpath (name, resolved);
+
+  if ((name == NULL) || (name[0] == '\0'))
+    return realpath (name, resolved);
+
+#ifdef PATH_MAX
+  path_max = PATH_MAX;
+#else
+  path_max = pathconf (name, _PC_PATH_MAX);
+  if (path_max <= 0)
+    path_max = 1024;
+#endif
+
+  if (resolved == NULL)
+    {
+      rpath = malloc (path_max);
+      if (rpath == NULL)
+        return NULL;
+    }
+  else
+    rpath = resolved;
+  rpath_limit = rpath + path_max;
+
+  rpath[0] = '/';
+  dest = rpath + 1;
+
+  for (start = end = name; *start; start = end)
+    {
+      struct icbinn_stat st;
+
+      /* Skip sequence of multiple path-separators.  */
+      while (*start == '/')
+        ++start;
+
+      /* Find end of path component.  */
+      for (end = start; *end && *end != '/'; ++end)
+        /* Nothing.  */ ;
+
+      if (end - start == 0)
+        break;
+      else if (end - start == 1 && start[0] == '.')
+        /* nothing */ ;
+      else if (end - start == 2 && start[0] == '.' && start[1] == '.')
+        {
+          /* Back up to previous component, ignore if at root already.  */
+          if (dest > rpath + 1)
+            while ((--dest)[-1] != '/');
+        }
+      else
+        {
+          size_t new_size;
+
+          if (dest[-1] != '/')
+            *dest++ = '/';
+
+          if (dest + (end - start) >= rpath_limit)
+            {
+              ptrdiff_t dest_offset = dest - rpath;
+              char *new_rpath;
+
+              if (resolved)
+                {
+                  errno = ENAMETOOLONG;
+                  if (dest > rpath + 1)
+                    dest--;
+                  *dest = '\0';
+                  goto error;
+                }
+              new_size = rpath_limit - rpath;
+              if (end - start + 1 > path_max)
+                new_size += end - start + 1;
+              else
+                new_size += path_max;
+              new_rpath = (char *) realloc (rpath, new_size);
+              if (new_rpath == NULL)
+                goto error;
+              rpath = new_rpath;
+              rpath_limit = rpath + new_size;
+
+              dest = rpath + dest_offset;
+            }
+
+          dest = mempcpy (dest, start, end - start);
+          *dest = '\0';
+
+          if (icbinn_stat (icb_vhd, rpath, &st) < 0)
+            {
+              errno = ENOENT;
+              goto error;
+            }
+
+          if ((st.type != ICBINN_TYPE_DIRECTORY) && (*end != '\0'))
+            {
+              errno = ENOTDIR;
+              goto error;
+            }
+        }
+    }
+  if (dest > rpath + 1 && dest[-1] == '/')
+    --dest;
+  *dest = '\0';
+
+  return rpath;
+
+error:
+  if (resolved == NULL)
+    free (rpath);
+  return NULL;
+}
Index: xen-4.10.0/tools/blktap2/include/libvhd.h
===================================================================
--- xen-4.10.0.orig/tools/blktap2/include/libvhd.h
+++ xen-4.10.0/tools/blktap2/include/libvhd.h
@@ -124,9 +124,20 @@ typedef struct vhd_bat             vhd_b
 typedef struct vhd_batmap          vhd_batmap_t;
 typedef struct dd_batmap_hdr       vhd_batmap_header_t;
 typedef struct prt_loc             vhd_parent_locator_t;
+typedef struct vhd_devops          vhd_devops_t;
 typedef struct vhd_context         vhd_context_t;
 typedef uint32_t                   vhd_flag_creat_t;
 
+struct vhd_devops {
+	off_t (*position)          (vhd_context_t *);
+	int (*seek)                (vhd_context_t *, off64_t, int);
+	int (*read)                (vhd_context_t *, void *, size_t);
+	int (*write)               (vhd_context_t *, void *, size_t);
+	int (*pread)               (vhd_context_t *, void *, size_t, off64_t);
+	int (*pwrite)              (vhd_context_t *, void *, size_t, off64_t);
+	void (*close)              (vhd_context_t *);
+};
+
 struct vhd_bat {
 	uint32_t                   spb;
 	uint32_t                   entries;
@@ -154,7 +165,11 @@ struct vhd_context {
 	vhd_bat_t                  bat;
 	vhd_batmap_t               batmap;
 
+	vhd_devops_t              *devops;
+
 	struct crypto_blkcipher   *xts_tfm;
+
+	uint64_t                   offset;
 };
 
 static inline uint32_t
@@ -331,4 +346,8 @@ int vhd_write_block(vhd_context_t *, uin
 int vhd_io_read(vhd_context_t *, char *, uint64_t, uint32_t);
 int vhd_io_write(vhd_context_t *, char *, uint64_t, uint32_t);
 
+char *vhd_realpath(const char *path, char *resolved_path);
+struct ICBINN_struct * vhd_icbinn_key(void);
+struct ICBINN_struct * vhd_icbinn_vhd(void);
+
 #endif
Index: xen-4.10.0/tools/blktap2/vhd/Makefile
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/Makefile
+++ xen-4.10.0/tools/blktap2/vhd/Makefile
@@ -21,7 +21,7 @@ ifeq ($(VHD_STATIC),y)
 CFLAGS            += -static
 endif
 
-LIBS              := -Llib -lvhd
+LIBS              := -Llib -lvhd -licbinn_resolved -ldl -lpthread
 LIBS              += -luuid -lcrypto
 
 all: subdirs-all build
Index: xen-4.10.0/tools/blktap2/vhd/lib/Makefile
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/Makefile
+++ xen-4.10.0/tools/blktap2/vhd/lib/Makefile
@@ -24,7 +24,7 @@ ifeq ($(CONFIG_LIBICONV),y)
 LIBS            += -liconv
 endif
 
-LIBS            += -lcrypto
+LIBS            += -lcrypto -licbinn_resolved -ldl
 
 LIB-SRCS        := libvhd.c
 LIB-SRCS        += libvhd-journal.c
Index: xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/libvhd.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
@@ -38,6 +38,7 @@
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <langinfo.h>
+#include <stddef.h>
 
 #include "xattr.h"
 #include "libvhd.h"
@@ -78,6 +79,10 @@ const char* ENV_VAR_FAIL[NUM_FAIL_TESTS]
 int TEST_FAIL[NUM_FAIL_TESTS];
 #endif // ENABLE_FAILURE_TESTING
 
+static void __vhd_close(vhd_context_t *ctx);
+
+#include "icbinn.c"
+
 static inline int
 test_bit (volatile char *addr, int nr)
 {
@@ -1263,7 +1268,7 @@ vhd_find_parent(vhd_context_t *ctx, cons
 	}
 
 	/* check parent path relative to child's directory */
-	cpath = realpath(ctx->file, NULL);
+	cpath = vhd_realpath(ctx->file, NULL);
 	if (!cpath) {
 		err = -errno;
 		goto out;
@@ -1277,7 +1282,7 @@ vhd_find_parent(vhd_context_t *ctx, cons
 	}
 
 	if (!access(location, R_OK)) {
-		path = realpath(location, NULL);
+		path = vhd_realpath(location, NULL);
 		if (path) {
 			*_location = path;
 			return 0;
@@ -1664,9 +1669,9 @@ vhd_parent_locator_write_at(vhd_context_
 			    const char *parent, off_t off, uint32_t code,
 			    size_t max_bytes, vhd_parent_locator_t *loc)
 {
-	struct stat stats;
 	int err, len, size;
 	char *absolute_path, *relative_path, *encoded, *block;
+	ICBINN *icb = vhd_icbinn_vhd();
 
 	memset(loc, 0, sizeof(vhd_parent_locator_t));
 
@@ -1689,21 +1694,36 @@ vhd_parent_locator_write_at(vhd_context_
 		return -EINVAL;
 	}
 
-	absolute_path = realpath(parent, NULL);
+	absolute_path = vhd_realpath(parent, NULL);
 	if (!absolute_path) {
 		err = -errno;
 		goto out;
 	}
 
-	err = stat(absolute_path, &stats);
-	if (err) {
-		err = -errno;
-		goto out;
-	}
+	if (icb) {
+		struct icbinn_stat stats;
+		err = icbinn_stat(icb,absolute_path, &stats);
+		if (err) {
+			err = -ENOENT;
+			goto out;
+		}
+		if (stats.type != ICBINN_TYPE_FILE) {
+			err = -EINVAL;
+			goto out;
+		}
+	} else {
+		struct stat stats;
 
-	if (!S_ISREG(stats.st_mode) && !S_ISBLK(stats.st_mode)) {
-		err = -EINVAL;
-		goto out;
+		err = stat(absolute_path, &stats);
+		if (err) {
+			err = -errno;
+			goto out;
+		}
+
+		if (!S_ISREG(stats.st_mode) && !S_ISBLK(stats.st_mode)) {
+			err = -EINVAL;
+			goto out;
+		}
 	}
 
 	relative_path = relative_path_to(ctx->file, absolute_path, &err);
@@ -2333,8 +2353,8 @@ vhd_atomic_io(ssize_t (*f) (int, void *,
 	return res;
 }
 
-int
-vhd_seek(vhd_context_t *ctx, off_t offset, int whence)
+static int
+__vhd_seek(vhd_context_t *ctx, off_t offset, int whence)
 {
 	off_t off;
 
@@ -2348,14 +2368,14 @@ vhd_seek(vhd_context_t *ctx, off_t offse
 	return 0;
 }
 
-off_t
-vhd_position(vhd_context_t *ctx)
+static off_t
+__vhd_position(vhd_context_t *ctx)
 {
 	return lseek(ctx->fd, 0, SEEK_CUR);
 }
 
-int
-vhd_read(vhd_context_t *ctx, void *buf, size_t size)
+static int
+__vhd_read(vhd_context_t *ctx, void *buf, size_t size)
 {
 	size_t ret;
 
@@ -2371,8 +2391,8 @@ vhd_read(vhd_context_t *ctx, void *buf,
 	return (errno ? -errno : -EIO);
 }
 
-int
-vhd_write(vhd_context_t *ctx, void *buf, size_t size)
+static int
+__vhd_write(vhd_context_t *ctx, void *buf, size_t size)
 {
 	size_t ret;
 
@@ -2388,6 +2408,88 @@ vhd_write(vhd_context_t *ctx, void *buf,
 	return (errno ? -errno : -EIO);
 }
 
+static int
+__vhd_pread(vhd_context_t *ctx, void *buf, size_t size, off64_t offset)
+{
+	ssize_t ret;
+
+	errno = 0;
+
+	ret = vhd_atomic_pio(pread, ctx->fd, buf, size, offset);
+	if (ret == size)
+		return 0;
+
+	VHDLOG("%s: pread of %zu returned %zd, errno: %d\n",
+	       ctx->file, size, ret, -errno);
+
+	return (errno ? -errno : -EIO);
+}
+
+static int
+__vhd_pwrite(vhd_context_t *ctx, void *buf, size_t size, off64_t offset)
+{
+	ssize_t ret;
+
+	errno = 0;
+
+	ret = vhd_atomic_pio(vpwrite, ctx->fd, buf, size, offset);
+	if (ret == size)
+		return 0;
+
+	VHDLOG("%s: pwrite of %zu returned %zd, errno: %d\n",
+	       ctx->file, size, ret, -errno);
+
+	return (errno ? -errno : -EIO);
+}
+
+int
+vhd_seek(vhd_context_t *ctx, off64_t offset, int whence)
+{
+	if (ctx->devops && ctx->devops->seek)
+		return ctx->devops->seek(ctx, offset, whence);
+	return __vhd_seek(ctx, offset, whence);
+}
+
+off_t
+vhd_position(vhd_context_t *ctx)
+{
+	if (ctx->devops && ctx->devops->position)
+		return ctx->devops->position(ctx);
+	return __vhd_position(ctx);
+}
+
+int
+vhd_read(vhd_context_t *ctx, void *buf, size_t size)
+{
+	if (ctx->devops && ctx->devops->read)
+		return ctx->devops->read(ctx, buf, size);
+	return __vhd_read(ctx, buf, size);
+}
+
+int
+vhd_write(vhd_context_t *ctx, void *buf, size_t size)
+{
+	if (ctx->devops && ctx->devops->write)
+		return ctx->devops->write(ctx, buf, size);
+	return __vhd_write(ctx, buf, size);
+}
+
+int
+vhd_pread(vhd_context_t *ctx, void *buf, size_t size, off64_t offset)
+{
+	if (ctx->devops && ctx->devops->pread)
+		return ctx->devops->pread(ctx, buf, size, offset);
+	return __vhd_pread(ctx, buf, size, offset);
+}
+
+int
+vhd_pwrite(vhd_context_t *ctx, void *buf, size_t size, off64_t offset)
+{
+	if (ctx->devops && ctx->devops->pwrite)
+		return ctx->devops->pwrite(ctx, buf, size, offset);
+	return __vhd_pwrite(ctx, buf, size, offset);
+}
+
 int
 vhd_offset(vhd_context_t *ctx, uint32_t sector, uint32_t *offset)
 {
@@ -2464,6 +2566,7 @@ int
 vhd_open(vhd_context_t *ctx, const char *file, int flags)
 {
 	int err, oflags;
+	ICBINN *icb;
 
 	if (flags & VHD_OPEN_STRICT)
 		vhd_flag_clear(flags, VHD_OPEN_FAST);
@@ -2472,28 +2575,49 @@ vhd_open(vhd_context_t *ctx, const char
 	ctx->fd     = -1;
 	ctx->oflags = flags;
 
+	icb = vhd_icbinn_vhd();
+
 	err = namedup(&ctx->file, file);
 	if (err)
 		return err;
 
-	oflags = O_DIRECT | O_LARGEFILE;
-	if (flags & VHD_OPEN_RDONLY)
-		oflags |= O_RDONLY;
-	if (flags & VHD_OPEN_RDWR)
-		oflags |= O_RDWR;
+	if (icb) {
+		oflags = 0;
+		if (flags & VHD_OPEN_RDONLY)
+			oflags |= ICBINN_RDONLY;
+		if (flags & VHD_OPEN_RDWR)
+			oflags |= ICBINN_RDWR;
+
+		ctx->fd = icbinn_open(icb, ctx->file, oflags);
+		ctx->devops = &vhd_icbinn_devops;
+	}
+	else {
+		oflags = O_DIRECT | O_LARGEFILE;
+		if (flags & VHD_OPEN_RDONLY)
+			oflags |= O_RDONLY;
+		if (flags & VHD_OPEN_RDWR)
+			oflags |= O_RDWR;
+
+		ctx->fd = open(ctx->file, oflags, 0644);
+	}
 
-	ctx->fd = open(ctx->file, oflags, 0644);
 	if (ctx->fd == -1) {
 		err = -errno;
 		VHDLOG("failed to open %s: %d\n", ctx->file, err);
 		goto fail;
 	}
 
-	err = vhd_test_file_fixed(ctx->file, &ctx->is_block);
-	if (err)
-		goto fail;
+	if (icb) {
+		ctx->is_block = 0;
+	}
+	else {
+		err = vhd_test_file_fixed(ctx->file, &ctx->is_block);
+		if (err)
+			goto fail;
+	}
 
 	if (flags & VHD_OPEN_FAST) {
+		/* TODO handle ICBINN open in this case too */
 		err = vhd_open_fast(ctx);
 		if (err)
 			goto fail;
@@ -2522,17 +2646,21 @@ vhd_open(vhd_context_t *ctx, const char
 	return 0;
 
 fail:
-	if (ctx->fd != -1)
-		close(ctx->fd);
+	if (ctx->fd != -1) {
+		if (icb)
+			icbinn_close(icb,ctx->fd);
+		else
+			close(ctx->fd);
+	}
 	free(ctx->file);
 	memset(ctx, 0, sizeof(vhd_context_t));
 	return err;
 }
 
-void
-vhd_close(vhd_context_t *ctx)
+static void
+__vhd_close(vhd_context_t *ctx)
 {
-	if (ctx->file)
+	if (ctx->file && ctx->fd != -1)
 		close(ctx->fd);
 	free(ctx->file);
 	free(ctx->bat.bat);
@@ -2540,6 +2668,14 @@ vhd_close(vhd_context_t *ctx)
 	memset(ctx, 0, sizeof(vhd_context_t));
 }
 
+void
+vhd_close(vhd_context_t *ctx)
+{
+        if (ctx->devops && ctx->devops->close)
+                return ctx->devops->close(ctx);
+        return __vhd_close(ctx);
+}
+
 static inline void
 vhd_initialize_footer(vhd_context_t *ctx, int type, uint64_t size)
 {
@@ -2621,19 +2757,34 @@ get_file_size(const char *name)
 {
 	int fd;
 	off_t end;
+	ICBINN *icb=vhd_icbinn_vhd();
 
-	fd = open(name, O_LARGEFILE | O_RDONLY);
-	if (fd == -1) {
-		VHDLOG("unable to open '%s': %d\n", name, errno);
-		return -errno;
+	if (icb) {
+		struct icbinn_stat buf;
+
+		if (icbinn_stat(icb,name,&buf))
+			return -1;
+
+		if (buf.type != ICBINN_TYPE_FILE)
+			return -1;
+
+		end=buf.size;
+	}
+	else {
+		fd = open(name, O_LARGEFILE | O_RDONLY);
+		if (fd == -1) {
+			VHDLOG("unable to open '%s': %d\n", name, errno);
+			return -errno;
+		}
+		end = lseek(fd, 0, SEEK_END);
+		close(fd);
 	}
-	end = lseek(fd, 0, SEEK_END);
-	close(fd); 
+
 	return end;
 }
 
 static int
-vhd_initialize_header(vhd_context_t *ctx, const char *parent_path, 
+vhd_initialize_header(ICBINN *icb, vhd_context_t *ctx, const char *parent_path,
 		uint64_t size, int raw)
 {
 	int err;
@@ -2659,7 +2810,14 @@ vhd_initialize_header(vhd_context_t *ctx
 	if (ctx->footer.type == HD_TYPE_DYNAMIC)
 		return 0;
 
-	err = stat(parent_path, &stats);
+	if (icb) {
+		struct icbinn_stat buf;
+		err = icbinn_stat(icb,parent_path,&buf);
+		time(&stats.st_mtime);
+	}
+	else {
+		err = stat(parent_path, &stats);
+	}
 	if (err == -1)
 		return -errno;
 
@@ -2737,7 +2895,7 @@ vhd_change_parent(vhd_context_t *child,
 	struct stat stats;
 	vhd_context_t parent;
 
-	ppath = realpath(parent_path, NULL);
+	ppath = vhd_realpath(parent_path, NULL);
 	if (!ppath) {
 		VHDLOG("error resolving parent path %s for %s: %d\n",
 		       parent_path, child->file, errno);
@@ -2949,6 +3107,7 @@ __vhd_create(const char *name, const cha
 	vhd_footer_t *footer;
 	vhd_header_t *header;
 	uint64_t size, blks;
+	ICBINN *icb;
 
 	switch (type) {
 	case HD_TYPE_DIFF:
@@ -2970,8 +3129,17 @@ __vhd_create(const char *name, const cha
 	blks   = (bytes + VHD_BLOCK_SIZE - 1) >> VHD_BLOCK_SHIFT;
 	size   = blks << VHD_BLOCK_SHIFT;
 
-	ctx.fd = open(name, O_WRONLY | O_CREAT |
-		      O_TRUNC | O_LARGEFILE | O_DIRECT, 0644);
+	icb = vhd_icbinn_vhd();
+
+	if (icb) {
+		ctx.fd = icbinn_open(icb, (char *) name, ICBINN_WRONLY | ICBINN_CREAT | ICBINN_TRUNC);
+		ctx.devops = &vhd_icbinn_devops;
+	}
+	else {
+		ctx.fd = open(name, O_WRONLY | O_CREAT |
+			      O_TRUNC | O_LARGEFILE | O_DIRECT, 0644);
+	}
+
 	if (ctx.fd == -1)
 		return -errno;
 
@@ -2981,9 +3149,14 @@ __vhd_create(const char *name, const cha
 		goto out;
 	}
 
-	err = vhd_test_file_fixed(ctx.file, &ctx.is_block);
-	if (err)
-		goto out;
+	if (icb) {
+		ctx.is_block = 0;
+	}
+	else {
+		err = vhd_test_file_fixed(ctx.file, &ctx.is_block);
+		if (err)
+			goto out;
+	}
 
 	vhd_initialize_footer(&ctx, type, size);
 
@@ -2993,7 +3166,7 @@ __vhd_create(const char *name, const cha
 			goto out;
 	} else {
 		int raw = vhd_flag_test(flags, VHD_FLAG_CREAT_PARENT_RAW);
-		err = vhd_initialize_header(&ctx, parent, size, raw);
+		err = vhd_initialize_header(icb, &ctx, parent, size, raw);
 		if (err)
 			goto out;
 
@@ -3046,8 +3219,12 @@ __vhd_create(const char *name, const cha
 
 out:
 	vhd_close(&ctx);
-	if (err && !ctx.is_block)
-		unlink(name);
+	if (err && !ctx.is_block) {
+		if (icb)
+			icbinn_unlink(icb, name);
+		else
+			unlink(name);
+	}
 	return err;
 }
 
Index: xen-4.10.0/tools/blktap2/vhd/lib/relative-path.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/relative-path.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/relative-path.c
@@ -29,6 +29,8 @@
 #include <stdlib.h>
 #include <string.h>
 
+char *vhd_realpath(const char *path, char *resolved_path);
+
 #include "relative-path.h"
 
 #define sfree(ptr)         \
@@ -229,14 +231,14 @@ relative_path_to(char *from, char *to, i
 		return NULL;
 	}
 
-	to_absolute = realpath(to, NULL);
+	to_absolute = vhd_realpath(to, NULL);
 	if (!to_absolute) {
 		EPRINTF("failed to get absolute path of %s\n", to);
 		*err = -errno;
 		goto out;
 	}
 
-	from_absolute = realpath(from, NULL);
+	from_absolute = vhd_realpath(from, NULL);
 	if (!from_absolute) {
 		EPRINTF("failed to get absolute path of %s\n", from);
 		*err = -errno;
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-key.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-key.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-key.c
@@ -38,6 +38,8 @@
 
 #include <openssl/evp.h>
 
+#include "icbinn.h"
+
 #include "libvhd.h"
 
 #define MAX_KEY_SIZE 512
@@ -92,6 +94,58 @@ out:
 	return err;
 }
 
+static int
+vhd_util_read_key_icbinn(ICBINN *icb, const char *keypath, uint8_t *key,
+		  size_t max_size, size_t *out_size)
+{
+	int fd = -1, err;
+	ssize_t size;
+	struct icbinn_stat sb;
+
+
+
+	err = icbinn_stat(icb, keypath, &sb);
+	if (err) {
+		ERR("failed to stat %s\n", keypath);
+		err = -ENOENT;
+		goto out;
+	}
+
+	if (sb.type != ICBINN_TYPE_FILE) {
+		ERR("%s isn't a file\n", keypath);
+		err = -EISDIR;
+		goto out;
+	}
+
+	fd = icbinn_open(icb, keypath, O_RDONLY);
+	if (fd == -1) {
+		ERR("failed to open %s\n", keypath );
+		err = -EINVAL;
+		goto out;
+	}
+
+	size = icbinn_pread(icb, fd, key, max_size, 0);
+	if (size == -1) {
+		ERR("failed to read key\n");
+		err = -EIO;
+		goto out;
+	}
+
+	if (size != sb.size) {
+		ERR("short read of key\n");
+		err = -EIO;
+		goto out;
+	}
+
+	if (out_size)
+		*out_size = size;
+
+out:
+	if (fd != -1)
+		icbinn_close(icb,fd);
+	return err;
+}
+
 /*
  * calculates keyhash by taking a SHA256 hash of @keyhash->nonce + key
  */
@@ -138,9 +192,15 @@ vhd_util_calculate_keyhash(struct vhd_ke
 	int err;
 	size_t size;
 	uint8_t key[MAX_KEY_SIZE];
+	ICBINN *icb = vhd_icbinn_key();
 
 	size = 0;
-	err = vhd_util_read_key(keypath, key, sizeof(key), &size);
+	if (icb) {
+		err = vhd_util_read_key_icbinn(icb, keypath, key, sizeof(key), &size);
+	}
+	else {
+		err = vhd_util_read_key(keypath, key, sizeof(key), &size);
+	}
 	if (err) {
 		ERR("failed to read key: %d\n", err);
 		goto out;
Index: xen-4.10.0/tools/blktap2/drivers/Makefile
===================================================================
--- xen-4.10.0.orig/tools/blktap2/drivers/Makefile
+++ xen-4.10.0/tools/blktap2/drivers/Makefile
@@ -46,9 +46,11 @@ endif
 
 tapdisk2 tapdisk-stream tapdisk-diff: CRYPTLIBS += -lcrypto -Lcrypto -lxts-aes
 tapdisk2 tapdisk-stream tapdisk-diff: crypto/libxts-aes.a
+tapdisk2 tapdisk-stream tapdisk-diff td-util: ICBLIBS += -licbinn_resolved -lpthread -ldl
 
 img2qcow qcow2raw qcow-create: CRYPTLIBS += -lcrypto -Lcrypto -lxts-aes
 img2qcow qcow2raw qcow-create: crypto/libxts-aes.a
+img2qcow qcow2raw qcow-create: ICBLIBS += -licbinn_resolved -lpthread -ldl
 
 crypto/libxts-aes.a: crypto/*.c crypto/*.h
 	$(MAKE) -C crypto libxts-aes.a
@@ -91,16 +93,16 @@ all: $(IBIN) lock-util qcow-util
 
 
 tapdisk2: $(TAP-OBJS-y) $(BLK-OBJS-y) $(MISC-OBJS-y) tapdisk2.o
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm  $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) $(ICBLIBS) -lm  $(APPEND_LDFLAGS)
 
 tapdisk-client: tapdisk-client.o
 	$(CC) -o $@ $^ $(LDFLAGS) -lrt $(APPEND_LDFLAGS)
 
 tapdisk-stream tapdisk-diff: %: %.o $(TAP-OBJS-y) $(BLK-OBJS-y)
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) $(ICBLIBS) -lm $(APPEND_LDFLAGS)
 
 td-util: td.o tapdisk-utils.o tapdisk-log.o $(PORTABLE-OBJS-y)
-	$(CC) -o $@ $^ $(LDFLAGS) $(VHDLIBS) $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) $(VHDLIBS) $(ICBLIBS) $(APPEND_LDFLAGS)
 
 lock-util: lock.c
 	$(CC) $(CFLAGS) -DUTIL -o lock-util lock.c $(LDFLAGS) $(APPEND_LDFLAGS)
@@ -109,7 +111,7 @@ lock-util: lock.c
 qcow-util: img2qcow qcow2raw qcow-create
 
 img2qcow qcow2raw qcow-create: %: %.o $(TAP-OBJS-y) $(BLK-OBJS-y)
-	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) -lm $(APPEND_LDFLAGS)
+	$(CC) -o $@ $^ $(LDFLAGS) -lrt -lz $(VHDLIBS) $(AIOLIBS) $(MEMSHRLIBS) $(CRYPTLIBS) $(ICBLIBS) -lm $(APPEND_LDFLAGS)
 
 install: all
 	$(INSTALL_DIR) -p $(DESTDIR)$(INST_DIR)
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-snapshot.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-snapshot.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-snapshot.c
@@ -152,7 +152,7 @@ vhd_util_snapshot(int argc, char **argv)
 		goto usage;
 	}
 
-	ppath = realpath(pname, NULL);
+	ppath = vhd_realpath(pname, NULL);
 	if (!ppath)
 		return -errno;
 
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-scan.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-scan.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-scan.c
@@ -772,7 +772,7 @@ vhd_util_scan_open(vhd_context_t *vhd, s
 	if (target_volume(image->target->type) || !(flags & VHD_SCAN_PRETTY))
 		image->name = target->name;
 	else {
-		image->name = realpath(target->name, NULL);
+		image->name = vhd_realpath(target->name, NULL);
 		if (!image->name) {
 			image->name    = target->name;
 			image->message = "resolving name";
