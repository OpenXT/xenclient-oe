################################################################################
SHORT DESCRIPTION: 
################################################################################
VHD marker flag support

################################################################################
LONG DESCRIPTION: 
################################################################################
Added for compatibility reasons - it is tied into the changes to dd_batmap_hdr
for supporting keyhashes which are used for VHD encryption.

################################################################################
CHANGELOG 
################################################################################
Patch formed from commits by: Ross Philipson, philipsonr@ainfosec.com, 3/22/2016
Author: Jake Wires <Jake.Wires@citrix.com>
51b4bd5e32f1276c5805f0801ed067d1c8175dfe
52ba3d3168cf60013d10972bc25bc40a410cfe41

################################################################################
REMOVAL 
################################################################################
Most of the actual code can probably be removed. It was left there for now since
the status tool uses it. The important thing is to keep the char field in the
VHD struct so it is layed out correctly for the keyhash stuff. As far as can
be determined, it was used for the BED feature which is gone.

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.10.0/tools/blktap2/include/libvhd.h
===================================================================
--- xen-4.10.0.orig/tools/blktap2/include/libvhd.h
+++ xen-4.10.0/tools/blktap2/include/libvhd.h
@@ -256,6 +256,8 @@ int vhd_snapshot(const char *snapshot, u
 
 int vhd_hidden(vhd_context_t *, int *);
 int vhd_chain_depth(vhd_context_t *, int *);
+int vhd_marker(vhd_context_t *, char *);
+int vhd_set_marker(vhd_context_t *, char);
 
 off_t vhd_position(vhd_context_t *);
 int vhd_seek(vhd_context_t *, off_t, int);
Index: xen-4.10.0/tools/blktap2/include/vhd.h
===================================================================
--- xen-4.10.0.orig/tools/blktap2/include/vhd.h
+++ xen-4.10.0/tools/blktap2/include/vhd.h
@@ -172,6 +172,7 @@ struct dd_batmap_hdr {
   u32    batmap_size;     /* batmap size in sectors                       */
   u32    batmap_version;  /* version of batmap                            */
   u32    checksum;        /* batmap checksum -- 1's complement of batmap  */
+  char   marker;          /* generic marker field                         */
 };
 
 static const char VHD_BATMAP_COOKIE[9] = "tdbatmap";
Index: xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/libvhd.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/libvhd.c
@@ -2055,6 +2055,44 @@ vhd_write_bat(vhd_context_t *ctx, vhd_ba
 	return err;
 }
 
+static int
+vhd_write_batmap_header(vhd_context_t *ctx, vhd_batmap_t *batmap)
+{
+	int err;
+	size_t size;
+	off64_t off;
+	char *buf = NULL;
+
+	err = vhd_batmap_header_offset(ctx, &off);
+	if (err)
+		goto out;
+
+	size = vhd_bytes_padded(sizeof(batmap->header));
+
+	err = vhd_seek(ctx, off, SEEK_SET);
+	if (err)
+		goto out;
+
+	err = posix_memalign((void **)&buf, VHD_SECTOR_SIZE, size);
+	if (err) {
+		err = -err;
+		buf = NULL;
+		goto out;
+	}
+
+	vhd_batmap_header_out(batmap);
+	memset(buf, 0, size);
+	memcpy(buf, &batmap->header, sizeof(batmap->header));
+
+	err = vhd_write(ctx, buf, size);
+
+out:
+	if (err)
+		VHDLOG("%s: failed writing batmap: %d\n", ctx->file, err);
+	free(buf);
+	return err;
+}
+
 int
 vhd_write_batmap(vhd_context_t *ctx, vhd_batmap_t *batmap)
 {
@@ -3415,3 +3453,39 @@ vhd_io_write(vhd_context_t *ctx, char *b
 
 	return __vhd_io_dynamic_write(ctx, buf, sec, secs);
 }
+
+int
+vhd_marker(vhd_context_t *ctx, char *marker)
+{
+	int err;
+	vhd_batmap_t batmap;
+
+	*marker = 0;
+
+	if (!vhd_has_batmap(ctx))
+		return -ENOSYS;
+
+	err = vhd_read_batmap_header(ctx, &batmap);
+	if (err)
+		return err;
+
+	*marker = batmap.header.marker;
+	return 0;
+}
+
+int
+vhd_set_marker(vhd_context_t *ctx, char marker)
+{
+	int err;
+	vhd_batmap_t batmap;
+
+	if (!vhd_has_batmap(ctx))
+		return -ENOSYS;
+
+	err = vhd_read_batmap_header(ctx, &batmap);
+	if (err)
+		return err;
+
+	batmap.header.marker = marker;
+	return vhd_write_batmap_header(ctx, &batmap);
+}
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-query.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-query.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-query.c
@@ -38,7 +38,7 @@ vhd_util_query(int argc, char **argv)
 	char *name;
 	vhd_context_t vhd;
 	off_t currsize;
-	int ret, err, c, size, physize, parent, fields, depth;
+	int ret, err, c, size, physize, parent, fields, depth, marker;
 
 	name    = NULL;
 	size    = 0;
@@ -46,6 +46,7 @@ vhd_util_query(int argc, char **argv)
 	parent  = 0;
 	fields  = 0;
 	depth   = 0;
+	marker  = 0;
 
 	if (!argc || !argv) {
 		err = -EINVAL;
@@ -53,7 +54,7 @@ vhd_util_query(int argc, char **argv)
 	}
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "n:vspfdh")) != -1) {
+	while ((c = getopt(argc, argv, "n:vspfdmh")) != -1) {
 		switch (c) {
 		case 'n':
 			name = optarg;
@@ -73,6 +74,9 @@ vhd_util_query(int argc, char **argv)
 		case 'd':
 			depth = 1;
 			break;
+		case 'm':
+			marker = 1;
+			break;
 		case 'h':
 			err = 0;
 			goto usage;
@@ -136,6 +140,18 @@ vhd_util_query(int argc, char **argv)
 		err = (err ? : ret);
 	}
 
+	if (marker) {
+		char marker;
+
+		ret = vhd_marker(&vhd, &marker);
+		if (ret)
+			printf("error checking 'marker' field: %d\n", ret);
+		else
+			printf("marker: %d\n", marker);
+
+		err = (err ? : ret);
+	}
+
 	if (depth) {
 		int length;
 
@@ -154,6 +170,7 @@ vhd_util_query(int argc, char **argv)
 usage:
 	printf("options: <-n name> [-v print virtual size (in MB)] "
 	       "[-s print physical utilization (bytes)] [-p print parent] "
-	       "[-f print fields] [-d print chain depth] [-h help]\n");
+	       "[-f print fields] [-m print marker] [-d print chain depth] "
+	       "[-h help]\n");
 	return err;
 }
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-set-field.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-set-field.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-set-field.c
@@ -76,7 +76,7 @@ vhd_util_set_field(int argc, char **argv
 		goto usage;
 	}
 
-	if (strcmp(field, "hidden")) {
+	if (strcmp(field, "hidden") && strcmp(field, "marker")) {
 		printf("invalid field %s\n", field);
 		goto usage;
 	}
@@ -92,9 +92,13 @@ vhd_util_set_field(int argc, char **argv
 		return err;
 	}
 
-	vhd.footer.hidden = (char)value;
+	if (!strcmp(field, "hidden")) {
+		vhd.footer.hidden = (char)value;
+		err = vhd_write_footer(&vhd, &vhd.footer);
+	} else {
+		err = vhd_set_marker(&vhd, (char)value);
+	}
 
-	err = vhd_write_footer(&vhd, &vhd.footer);
 		
  done:
 	vhd_close(&vhd);
Index: xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-scan.c
===================================================================
--- xen-4.10.0.orig/tools/blktap2/vhd/lib/vhd-util-scan.c
+++ xen-4.10.0/tools/blktap2/vhd/lib/vhd-util-scan.c
@@ -46,6 +46,7 @@
 #define VHD_SCAN_NOFAIL      0x08
 #define VHD_SCAN_VERBOSE     0x10
 #define VHD_SCAN_PARENTS     0x20
+#define VHD_SCAN_MARKERS     0x40
 
 #define VHD_TYPE_RAW_FILE    0x01
 #define VHD_TYPE_VHD_FILE    0x02
@@ -86,6 +87,7 @@ struct vhd_image {
 	uint64_t             capacity;
 	off_t                size;
 	uint8_t              hidden;
+	char		     marker;
 	int                  error;
 	char                *message;
 
@@ -217,6 +219,7 @@ vhd_util_scan_pretty_add_image(struct vh
 	img->capacity = image->capacity;
 	img->size     = image->size;
 	img->hidden   = image->hidden;
+	img->marker   = image->marker;
 	img->error    = image->error;
 	img->message  = image->message;
 
@@ -274,10 +277,15 @@ vhd_util_scan_print_image_indent(struct
 	if (image->error)
 		printf("%*svhd=%s scan-error=%d error-message='%s'\n",
 		       tab, pad, image->name, image->error, image->message);
-	else
+	else if (!(flags & VHD_SCAN_MARKERS))
 		printf("%*svhd=%s capacity=%"PRIu64" size=%"PRIu64" hidden=%u "
 		       "parent=%s%s\n", tab, pad, name, image->capacity,
 		       image->size, image->hidden, parent, pmsg);
+	else
+		printf("%*svhd=%s capacity=%"PRIu64" size=%"PRIu64" hidden=%u "
+		       "marker=%u parent=%s%s\n", tab, pad, name,
+		       image->capacity, image->size, image->hidden,
+		       (uint8_t)image->marker, parent, pmsg);
 }
 
 static void
@@ -568,6 +576,22 @@ vhd_util_scan_get_hidden(vhd_context_t *
 }
 
 static int
+vhd_util_scan_get_marker(vhd_context_t *vhd, struct vhd_image *image)
+{
+	int err;
+	char marker;
+
+	err    = 0;
+	marker = 0;
+
+	if (target_vhd(image->target->type) && vhd_has_batmap(vhd))
+		err = vhd_marker(vhd, &marker);
+
+	image->marker = marker;
+	return err;
+}
+
+static int
 vhd_util_scan_get_size(vhd_context_t *vhd, struct vhd_image *image)
 {
 	image->size = image->target->size;
@@ -973,6 +997,16 @@ vhd_util_scan_targets(int cnt, struct ta
 			goto end;
 		}
 
+		if (flags & VHD_SCAN_MARKERS) {
+			err = vhd_util_scan_get_marker(&vhd, &image);
+			if (err) {
+				ret           = -EAGAIN;
+				image.message = "checking marker";
+				image.error   = err;
+				goto end;
+			}
+		}
+
 		if (vhd.footer.type == HD_TYPE_DIFF) {
 			err = vhd_util_scan_get_parent(&vhd, &image);
 			if (err) {
@@ -1235,7 +1269,7 @@ vhd_util_scan_find_targets(int cnt, char
 int
 vhd_util_scan(int argc, char **argv)
 {
-	int c, ret, err, cnt;
+	int c, ret, err, cnt, markers;
 	char *filter, *volume;
 	struct target *targets;
 
@@ -1243,12 +1277,13 @@ vhd_util_scan(int argc, char **argv)
 	ret     = 0;
 	err     = 0;
 	flags   = 0;
+	markers = 0;
 	filter  = NULL;
 	volume  = NULL;
 	targets = NULL;
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "m:fcl:pavh")) != -1) {
+	while ((c = getopt(argc, argv, "m:fcl:pavMh")) != -1) {
 		switch (c) {
 		case 'm':
 			filter = optarg;
@@ -1272,6 +1307,9 @@ vhd_util_scan(int argc, char **argv)
 		case 'v':
 			flags |= VHD_SCAN_VERBOSE;
 			break;
+		case 'M':
+			flags |= VHD_SCAN_MARKERS;
+			break;
 		case 'h':
 			goto usage;
 		default:
@@ -1312,6 +1350,6 @@ usage:
 	printf("usage: [OPTIONS] FILES\n"
 	       "options: [-m match filter] [-f fast] [-c continue on failure] "
 	       "[-l LVM volume] [-p pretty print] [-a scan parents] "
-	       "[-v verbose] [-h help]\n");
+	       "[-M show markers] [-v verbose] [-h help]\n");
 	return err;
 }
