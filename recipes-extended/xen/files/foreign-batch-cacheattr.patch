################################################################################
SHORT DESCRIPTION: 
################################################################################
Add library support for access to the ioctl to set memory cache attributes on
foreign memory mappings.

################################################################################
LONG DESCRIPTION: 
################################################################################
The display framebuffer requires correct memory cache attributes to be set in
order to avoid visible graphical artefacts as memory writes are deferred until
cache eviction occurs.

This patch provides the library method to invoke the kernel facility for
setting the cache attributes on a new mapping of guest memory.

################################################################################
CHANGELOG 
################################################################################
An OpenXT patch originally from XenClient.
Rewritten for Xen 4.9 to accommodate upstream libforeignmemory changes.

################################################################################
REMOVAL 
################################################################################
No.

################################################################################
UPSTREAM PLAN
################################################################################
Not yet determined.

Upstream support for the IOCTL_PRIVCMD_MMAPCACHEATTR ioctl on the Xen
privileged command file in Linux is a hard requirement before this patch could
be considered.

Implementation of the method in this patch is currently only provided for Linux
and not the other OSes supported by Xen since OpenXT does not require and would
not exercise such code.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
OpenXT Linux patch: privcmd-mmapnocache-ioctl.patch

################################################################################
PATCHES 
################################################################################
--- a/tools/include/xen-sys/Linux/privcmd.h
+++ b/tools/include/xen-sys/Linux/privcmd.h
@@ -95,6 +95,11 @@ typedef struct privcmd_mmap_resource {
 	__u64 addr;
 } privcmd_mmap_resource_t;
 
+typedef struct privcmd_mmapcacheattr {
+       __u64 addr;
+       int type;
+} privcmd_mmapcacheattr_t;
+
 /*
  * @cmd: IOCTL_PRIVCMD_HYPERCALL
  * @arg: &privcmd_hypercall_t
@@ -116,5 +121,7 @@ typedef struct privcmd_mmap_resource {
 	_IOC(_IOC_NONE, 'P', 7, sizeof(privcmd_mmap_resource_t))
 #define IOCTL_PRIVCMD_UNIMPLEMENTED				\
 	_IOC(_IOC_NONE, 'P', 0xFF, 0)
+#define IOCTL_PRIVCMD_MMAPCACHEATTR                             \
+	_IOC(_IOC_NONE, 'P', 200, sizeof(privcmd_mmapcacheattr_t))
 
 #endif /* __LINUX_PUBLIC_PRIVCMD_H__ */
--- a/tools/libs/foreignmemory/core.c
+++ b/tools/libs/foreignmemory/core.c
@@ -125,6 +125,46 @@ void *xenforeignmemory_map(xenforeignmem
     return xenforeignmemory_map2(fmem, dom, NULL, prot, 0, num, arr, err);
 }
 
+void *xenforeignmemory_map_cacheattr(xenforeignmemory_handle *fmem,
+                                     uint32_t dom, int prot,
+                                     int cache_attr_type,
+                                     size_t num,
+                                     const xen_pfn_t arr[/*num*/],
+                                     int err[/*num*/])
+{
+    void *ret;
+    int *err_to_free = NULL;
+
+    if ( err == NULL )
+        err = err_to_free = malloc(num * sizeof(int));
+
+    if ( err == NULL )
+        return NULL;
+
+    ret = osdep_xenforeignmemory_map_cacheattr(fmem, dom, prot,
+                                               cache_attr_type,
+                                               num, arr, err);
+    if ( ret && err_to_free )
+    {
+        int i;
+
+        for ( i = 0 ; i < num ; i++ )
+        {
+            if ( err[i] )
+            {
+                errno = -err[i];
+                (void)osdep_xenforeignmemory_unmap(fmem, ret, num);
+                ret = NULL;
+                break;
+            }
+        }
+    }
+
+    free(err_to_free);
+
+    return ret;
+}
+
 int xenforeignmemory_unmap(xenforeignmemory_handle *fmem,
                            void *addr, size_t num)
 {
--- a/tools/libs/foreignmemory/include/xenforeignmemory.h
+++ b/tools/libs/foreignmemory/include/xenforeignmemory.h
@@ -120,6 +120,14 @@ void *xenforeignmemory_map2(xenforeignme
                             const xen_pfn_t arr[/*pages*/], int err[/*pages*/]);
 
 /*
+ * Similar to xenforeignmemory_map, takes an additional argument
+ * specifying the cache attribute to apply to the new memory mapping.
+ */
+void *xenforeignmemory_map_cacheattr(xenforeignmemory_handle *fmem, uint32_t dom,
+                           int prot, int cache_attr_type, size_t pages,
+                           const xen_pfn_t arr[/*pages*/], int err[/*pages*/]);
+
+/*
  * Unmap a mapping previous created with xenforeignmemory_map().
  *
  * Returns 0 on success on failure sets errno and returns -1.
--- a/tools/libs/foreignmemory/libxenforeignmemory.map
+++ b/tools/libs/foreignmemory/libxenforeignmemory.map
@@ -3,6 +3,7 @@ VERS_1.0 {
 		xenforeignmemory_open;
 		xenforeignmemory_close;
 		xenforeignmemory_map;
+		xenforeignmemory_map_cacheattr;
 		xenforeignmemory_unmap;
 	local: *; /* Do not expose anything by default */
 };
--- a/tools/libs/foreignmemory/linux.c
+++ b/tools/libs/foreignmemory/linux.c
@@ -159,13 +159,17 @@ out:
     return rc;
 }
 
-void *osdep_xenforeignmemory_map(xenforeignmemory_handle *fmem,
-                                 uint32_t dom, void *addr,
-                                 int prot, int flags, size_t num,
-                                 const xen_pfn_t arr[/*num*/], int err[/*num*/])
+static void *map_foreign_cacheattr(xenforeignmemory_handle *fmem,
+                                   uint32_t dom, void *addr,
+                                   int prot, int flags,
+                                   int set_cache_attr, int cache_attr_type,
+                                   size_t num,
+                                   const xen_pfn_t arr[/*num*/],
+                                   int err[/*num*/])
 {
     int fd = fmem->fd;
     privcmd_mmapbatch_v2_t ioctlx;
+    privcmd_mmapcacheattr_t cacheattr;
     size_t i;
     int rc;
 
@@ -177,6 +181,20 @@ void *osdep_xenforeignmemory_map(xenfore
         return NULL;
     }
 
+    if ( set_cache_attr )
+    {
+        cacheattr.addr = (unsigned long)addr;
+        cacheattr.type = cache_attr_type;
+
+        if ( ioctl(fd, IOCTL_PRIVCMD_MMAPCACHEATTR, &cacheattr) ) {
+            int saved_errno = errno;
+            PERROR("Failed to set cache attribute to %d\n", cache_attr_type);
+            (void)munmap(addr, num << PAGE_SHIFT);
+            errno = saved_errno;
+            return NULL;
+        }
+    }
+
     ioctlx.num = num;
     ioctlx.dom = dom;
     ioctlx.addr = (unsigned long)addr;
@@ -283,6 +301,27 @@ void *osdep_xenforeignmemory_map(xenfore
     return addr;
 }
 
+
+void *osdep_xenforeignmemory_map(xenforeignmemory_handle *fmem,
+                                 uint32_t dom, void *addr,
+                                 int prot, int flags, size_t num,
+                                 const xen_pfn_t arr[/*num*/], int err[/*num*/])
+{
+    return map_foreign_cacheattr(fmem, dom, addr, prot, flags, 0, 0, num, arr, err);
+}
+
+void *osdep_xenforeignmemory_map_cacheattr(xenforeignmemory_handle *fmem,
+                                           uint32_t dom,
+                                           int prot,
+                                           int cache_attr_type,
+                                           size_t num,
+                                           const xen_pfn_t arr[/*num*/],
+                                           int err[/*num*/])
+{
+    return map_foreign_cacheattr(fmem, dom, NULL, prot, 0, 1, cache_attr_type,
+                                 num, arr, err);
+}
+
 int osdep_xenforeignmemory_unmap(xenforeignmemory_handle *fmem,
                                  void *addr, size_t num)
 {
--- a/tools/libs/foreignmemory/private.h
+++ b/tools/libs/foreignmemory/private.h
@@ -33,6 +33,11 @@ void *osdep_xenforeignmemory_map(xenfore
                                  uint32_t dom, void *addr,
                                  int prot, int flags, size_t num,
                                  const xen_pfn_t arr[num], int err[num]);
+void *osdep_xenforeignmemory_map_cacheattr(xenforeignmemory_handle *fmem,
+                                           uint32_t dom, int prot,
+                                           int cache_attr_type,
+                                           size_t num,
+                                           const xen_pfn_t arr[num], int err[num]);
 int osdep_xenforeignmemory_unmap(xenforeignmemory_handle *fmem,
                                  void *addr, size_t num);
 
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -1572,6 +1572,19 @@ int xc_tbuf_disable(xc_interface *xch);
  */
 int xc_tbuf_set_size(xc_interface *xch, unsigned long size);
 
+enum {
+    XC_MAP_CACHEATTR_UC = XEN_DOMCTL_MEM_CACHEATTR_UC,
+    XC_MAP_CACHEATTR_WC = XEN_DOMCTL_MEM_CACHEATTR_WC,
+    XC_MAP_CACHEATTR_WT = XEN_DOMCTL_MEM_CACHEATTR_WT,
+    XC_MAP_CACHEATTR_WP = XEN_DOMCTL_MEM_CACHEATTR_WP,
+    XC_MAP_CACHEATTR_WB = XEN_DOMCTL_MEM_CACHEATTR_WB,
+    XC_MAP_CACHEATTR_UCM = XEN_DOMCTL_MEM_CACHEATTR_UCM
+};
+
+void *xc_map_foreign_batch_cacheattr(xc_interface *xch, uint32_t dom, int prot,
+                                     xen_pfn_t *arr, int num,
+                                     int cache_type);
+
 /**
  * This function retrieves the current size of the trace buffers.
  * Note that the size returned is in terms of bytes, not pages.
--- a/tools/libxc/xc_foreign_memory.c
+++ b/tools/libxc/xc_foreign_memory.c
@@ -87,6 +87,23 @@ void *xc_map_foreign_bulk(xc_interface *
     return xenforeignmemory_map(xch->fmem, dom, prot, num, arr, err);
 }
 
+void *xc_map_foreign_batch_cacheattr(xc_interface *xch, uint32_t dom, int prot,
+                                     xen_pfn_t *arr, int num, int cache_type)
+{
+    int *err;
+    void *ret;
+
+    err = calloc(num, sizeof(int));
+    if ( err == NULL )
+        return NULL;
+
+    ret = xenforeignmemory_map_cacheattr(xch->fmem, dom, prot,
+                                         cache_type, num, arr, err);
+    free(err);
+    return ret;
+}
+
+
 /*
  * Local variables:
  * mode: C
