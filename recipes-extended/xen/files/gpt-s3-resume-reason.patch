################################################################################
SHORT DESCRIPTION: 
################################################################################
Set the ACPI PM1A status bits that indicate a guest resume was due to a wake
event and a power button press.

################################################################################
LONG DESCRIPTION: 
################################################################################
Some devices and their drivers (like GPUs), when passed through, expect to see
these status bits set to indicate the reason for a resume to properly execute
their own resume routines.

################################################################################
CHANGELOG 
################################################################################
Updated for Xen 4.9

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/xen/arch/x86/hvm/hvm.c
+++ b/xen/arch/x86/hvm/hvm.c
@@ -3952,6 +3952,9 @@ static void hvm_s3_suspend(struct domain
     domain_unlock(d);
 }
 
+extern void hvm_acpi_power_button_set_sts(struct domain *d);
+extern void hvm_acpi_set_wak_sts(struct domain *d);
+
 static void hvm_s3_resume(struct domain *d)
 {
     if ( test_and_clear_bool(d->arch.hvm.is_s3_suspended) )
@@ -3960,6 +3963,10 @@ static void hvm_s3_resume(struct domain
 
         for_each_vcpu( d, v )
             hvm_set_guest_tsc(v, 0);
+        /* Set the power button status bit in pm1 status register */
+        hvm_acpi_power_button_set_sts(d);
+        /* WAK_STS as well */
+        hvm_acpi_set_wak_sts(d);
         domain_unpause(d);
     }
 }
--- a/xen/arch/x86/hvm/pmtimer.c
+++ b/xen/arch/x86/hvm/pmtimer.c
@@ -36,6 +36,7 @@
 #define GBL_STS    (1 << 5)
 #define PWRBTN_STS (1 << 8)
 #define SLPBTN_STS (1 << 9)
+#define WAK_STS    (1 << 15)
 
 /* The same in PM1a_EN */
 #define TMR_EN     (1 << 0)
@@ -92,6 +93,25 @@ void hvm_acpi_sleep_button(struct domain
     spin_unlock(&s->lock);
 }
 
+/* Set power button status (necessary for proper win32 resume) */
+void hvm_acpi_power_button_set_sts(struct domain *d)
+{
+    PMTState *s = &d->arch.hvm.pl_time->vpmt;
+    spin_lock(&s->lock);
+    d->arch.hvm.acpi.pm1a_sts |= PWRBTN_STS;
+    spin_unlock(&s->lock);
+}
+
+/* Set rsm/wak_sts bit */
+void hvm_acpi_set_wak_sts(struct domain *d)
+{
+    PMTState *s = &d->arch.hvm.pl_time->vpmt;
+    spin_lock(&s->lock);
+    d->arch.hvm.acpi.pm1a_sts |= WAK_STS;
+    spin_unlock(&s->lock);
+}
+
+
 /* Set the correct value in the timer, accounting for time elapsed
  * since the last time we did that. */
 static void pmt_update_time(PMTState *s)
