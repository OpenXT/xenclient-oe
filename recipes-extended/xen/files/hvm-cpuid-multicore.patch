################################################################################
SHORT DESCRIPTION: 
################################################################################
Two CPUID adjusting patches in one, see description.

################################################################################
LONG DESCRIPTION: 
################################################################################
This is actually two CPUID related patches in one. The part about the
XciVMMXciVMM signature was used by our old custom Linux PV drivers to get them
to load instead of standard pvops ones. We keep this feature because it is
very useful for debugging. By enabling this CPUID you can force a pvops guest
to not load its standard PV drivers.

The second part exposes VCPUs as multiple cores in a smaller number of sockets,
by adjusting the CPUID responses appropriately. This is to make Windows think
that VCPUs were cores not CPUs so OpenXT could overcome CPU count limits and
licensing issues in Windows. The addition op XEN_DOMCTL_setcorespersocket is
the DOMCLT op that configures Xen to deal with the differences between cores
and CPUs.

################################################################################
CHANGELOG 
################################################################################

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Part two might be able to be upstreamed.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/tools/firmware/hvmloader/hvmloader.c
+++ b/tools/firmware/hvmloader/hvmloader.c
@@ -125,11 +125,13 @@ static void init_hypercalls(void)
         *(uint32_t *)(signature + 8) = edx;
         signature[12] = '\0';
 
-        if ( !strcmp("XenVMMXenVMM", signature) )
+        if ( !strcmp("XenVMMXenVMM", signature) ||
+             !strcmp("XciVMMXciVMM", signature) )
             break;
     }
 
-    BUG_ON(strcmp("XenVMMXenVMM", signature) || ((eax - base) < 2));
+    BUG_ON((   strcmp("XenVMMXenVMM", signature)
+            && strcmp("XciVMMXciVMM", signature) )|| ((eax - base) < 2));
 
     /* Fill in hypercall transfer pages. */
     cpuid(base + 2, &eax, &ebx, &ecx, &edx);
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -1344,6 +1344,10 @@ int xc_domain_set_time_offset(xc_interfa
                               uint32_t domid,
                               int32_t time_offset_seconds);
 
+int xc_domain_set_cores_per_socket(xc_interface *xch,
+				   uint32_t domid,
+				   uint32_t cores_per_socket);
+
 int xc_domain_set_tsc_info(xc_interface *xch,
                            uint32_t domid,
                            uint32_t tsc_mode,
--- a/tools/libxc/xc_cpuid_x86.c
+++ b/tools/libxc/xc_cpuid_x86.c
@@ -118,6 +118,7 @@ static void amd_xc_cpuid_policy(
         break;
     }
 
+#if 0 /* Removed by xc-cpuid */
     case 0x80000008:
         /*
          * ECX[15:12] is ApicIdCoreSize: ECX[7:0] is NumberOfCores (minus one).
@@ -126,6 +127,7 @@ static void amd_xc_cpuid_policy(
         regs[2] = ((regs[2] + (1u << 12)) & 0xf000u) |
                   ((regs[2] & 0xffu) << 1) | 1u;
         break;
+#endif
 
     case 0x8000000a: {
         if (!is_nestedhvm) {
@@ -172,13 +174,8 @@ static void intel_xc_cpuid_policy(
         break;
 
     case 0x00000004:
-        /*
-         * EAX[31:26] is Maximum Cores Per Package (minus one).
-         * Update to reflect vLAPIC_ID = vCPU_ID * 2.
-         */
-        regs[0] = (((regs[0] & 0x7c000000u) << 1) | 0x04000000u |
-                   (regs[0] & 0x3ffu));
-        regs[3] &= 0x3ffu;
+        regs[0] &= 0x3FF;
+        regs[3] &= 0x3FF;
         break;
 
     case 0x80000000:
@@ -202,11 +199,6 @@ static void intel_xc_cpuid_policy(
     case 0x80000005:
         regs[0] = regs[1] = regs[2] = 0;
         break;
-
-    case 0x80000008:
-        /* Mask AMD Number of Cores information. */
-        regs[2] = 0;
-        break;
     }
 }
 
@@ -293,12 +285,6 @@ static void xc_cpuid_hvm_policy(
         break;
 
     case 0x00000001:
-        /*
-         * EBX[23:16] is Maximum Logical Processors Per Package.
-         * Update to reflect vLAPIC_ID = vCPU_ID * 2.
-         */
-        regs[1] = (regs[1] & 0x0000ffffu) | ((regs[1] & 0x007f0000u) << 1);
-
         regs[2] &= (bitmaskof(X86_FEATURE_XMM3) |
                     bitmaskof(X86_FEATURE_PCLMULQDQ) |
                     bitmaskof(X86_FEATURE_SSSE3) |
@@ -341,8 +327,7 @@ static void xc_cpuid_hvm_policy(
                     bitmaskof(X86_FEATURE_MMX) |
                     bitmaskof(X86_FEATURE_FXSR) |
                     bitmaskof(X86_FEATURE_XMM) |
-                    bitmaskof(X86_FEATURE_XMM2) |
-                    bitmaskof(X86_FEATURE_HT));
+                    bitmaskof(X86_FEATURE_XMM2));
             
         /* We always support MTRR MSRs. */
         regs[3] |= bitmaskof(X86_FEATURE_MTRR);
@@ -403,7 +388,7 @@ static void xc_cpuid_hvm_policy(
 
     case 0x80000008:
         regs[0] &= 0x0000ffffu;
-        regs[1] = regs[3] = 0;
+        regs[1] = regs[2] = regs[3] = 0;
         break;
 
     case 0x00000002: /* Intel cache info (dumped by AMD policy) */
--- a/tools/libxc/xc_domain.c
+++ b/tools/libxc/xc_domain.c
@@ -776,6 +776,17 @@ int xc_domain_set_time_offset(xc_interfa
     return do_domctl(xch, &domctl);
 }
 
+int xc_domain_set_cores_per_socket(xc_interface *xch,
+                                   uint32_t domid,
+                                   uint32_t cores_per_socket)
+{
+    DECLARE_DOMCTL;
+    domctl.cmd = XEN_DOMCTL_setcorespersocket;
+    domctl.domain = (domid_t)domid;
+    domctl.u.setcorespersocket.cores_per_socket = cores_per_socket;
+    return do_domctl(xch, &domctl);
+}
+
 int xc_domain_disable_migrate(xc_interface *xch, uint32_t domid)
 {
     DECLARE_DOMCTL;
--- a/xen/arch/x86/hvm/hvm.c
+++ b/xen/arch/x86/hvm/hvm.c
@@ -6001,6 +6001,10 @@ static int hvmop_set_param(
              !(a.value & HVMPV_base_freq) )
             rc = -EINVAL;
         break;
+    case HVM_PARAM_XCI_CPUID_SIGNATURE:
+        if ( a.value > 1 )
+            rc = -EINVAL;
+        break;
     case HVM_PARAM_IDENT_PT:
         /*
          * Only actually required for VT-x lacking unrestricted_guest
--- a/xen/arch/x86/hvm/svm/svm.c
+++ b/xen/arch/x86/hvm/svm/svm.c
@@ -1541,21 +1541,34 @@ static void svm_fpu_dirty_intercept(void
         vmcb_set_cr0(vmcb, vmcb_get_cr0(vmcb) & ~X86_CR0_TS);
 }
 
+#define bitmaskof(idx)  (1U << ((idx) & 31))
 static void svm_cpuid_intercept(
     unsigned int *eax, unsigned int *ebx,
     unsigned int *ecx, unsigned int *edx)
 {
     unsigned int input = *eax;
     struct vcpu *v = current;
+    unsigned int cores_per_socket = current->domain->cores_per_socket;
 
     hvm_cpuid(input, eax, ebx, ecx, edx);
 
     switch (input) {
+    case 0x00000001:
+        if ( cores_per_socket > 1 )
+        {
+            *ebx &= 0xFF00FFFF;
+            *ebx |= (2 * cores_per_socket & 0xFF) << 16;
+            *edx |= 0x1 << 28;
+        }
+        break;
     case 0x80000001:
         /* Fix up VLAPIC details. */
         if ( vlapic_hw_disabled(vcpu_vlapic(v)) )
             __clear_bit(X86_FEATURE_APIC & 31, edx);
         break;
+        if (cores_per_socket > 1)
+            *ecx |= cpufeat_mask(X86_FEATURE_CMP_LEGACY);
+        break;
     case 0x8000001c: 
     {
         /* LWP capability CPUID */
@@ -1574,6 +1587,12 @@ static void svm_cpuid_intercept(
         }
         break;
     }
+    case 0x80000008:
+        /* Make sure Number of CPU core is 1 when HTT=0 */
+        *ecx &= 0xFFFF0F00;
+        if ( cores_per_socket > 1 )
+            *ecx |= (2 * cores_per_socket - 1) & 0xFF;
+        break;
     default:
         break;
     }
--- a/xen/arch/x86/hvm/vmx/vmx.c
+++ b/xen/arch/x86/hvm/vmx/vmx.c
@@ -2064,11 +2064,31 @@ static void vmx_cpuid_intercept(
     unsigned int input = *eax;
     struct segment_register cs;
     struct vcpu *v = current;
+    unsigned int cores_per_socket = current->domain->cores_per_socket;
 
     hvm_cpuid(input, eax, ebx, ecx, edx);
 
     switch ( input )
     {
+        case 0x00000001:
+            if ( cores_per_socket > 1 )
+            {
+                /* to fake out #vcpus per socket first force on HT/MC */
+                *edx |= cpufeat_mask(X86_FEATURE_HT);
+                /* and then inform guest of #cores per package */
+                *ebx &= 0xFF00FFFF;
+                *ebx |= (((cores_per_socket * 2) & 0xFF) << 16);
+            }
+            break;
+
+        case 0x00000004:
+            if (cores_per_socket > 1) {
+                /* fake out cores per socket */
+                *eax &= 0x3FFF; /* one thread, one core */
+                *eax |= (((cores_per_socket * 2) - 1) << 26);
+            }
+            break;
+
         case 0x80000001:
             /* SYSCALL is visible iff running in long mode. */
             vmx_get_segment_register(v, x86_seg_cs, &cs);
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -778,10 +778,18 @@ int cpuid_hypervisor_leaves( uint32_t id
     switch ( idx )
     {
     case 0:
-        *eax = base + limit; /* Largest leaf */
-        *ebx = XEN_CPUID_SIGNATURE_EBX;
-        *ecx = XEN_CPUID_SIGNATURE_ECX;
-        *edx = XEN_CPUID_SIGNATURE_EDX;
+        /* possibly use XenClient cpuid signature */
+        if (is_hvm_domain(currd) && (currd->arch.hvm_domain.params[HVM_PARAM_XCI_CPUID_SIGNATURE])) {
+            *eax = base + limit; /* Largest leaf */
+            *ebx = XCI_CPUID_SIGNATURE_EBX;
+            *ecx = XCI_CPUID_SIGNATURE_ECX;
+            *edx = XCI_CPUID_SIGNATURE_EDX;
+        } else {
+            *eax = base + limit; /* Largest leaf */
+            *ebx = XEN_CPUID_SIGNATURE_EBX;
+            *ecx = XEN_CPUID_SIGNATURE_ECX;
+            *edx = XEN_CPUID_SIGNATURE_EDX;
+        }
         break;
 
     case 1:
@@ -892,7 +900,6 @@ void pv_cpuid(struct cpu_user_regs *regs
             __clear_bit(X86_FEATURE_MTRR, &d);
 
         __clear_bit(X86_FEATURE_DTES64 % 32, &c);
-        __clear_bit(X86_FEATURE_MWAIT % 32, &c);
         __clear_bit(X86_FEATURE_DSCPL % 32, &c);
         __clear_bit(X86_FEATURE_VMXE % 32, &c);
         __clear_bit(X86_FEATURE_SMXE % 32, &c);
--- a/xen/common/domctl.c
+++ b/xen/common/domctl.c
@@ -1123,6 +1123,21 @@ long do_domctl(XEN_GUEST_HANDLE_PARAM(xe
             copyback = 1;
         break;
 
+    case XEN_DOMCTL_setcorespersocket:
+    {
+        struct domain *d;
+
+        ret = -ESRCH;
+        d = rcu_lock_domain_by_id(op->domain);
+        if ( d != NULL )
+        {
+            d->cores_per_socket = op->u.setcorespersocket.cores_per_socket;
+            rcu_unlock_domain(d);
+            ret = 0;
+        }
+    }
+    break;
+
     default:
         ret = arch_do_domctl(op, d, u_domctl);
         break;
--- a/xen/include/public/arch-x86/cpuid.h
+++ b/xen/include/public/arch-x86/cpuid.h
@@ -42,6 +42,11 @@
 #define XEN_CPUID_FIRST_LEAF 0x40000000
 #define XEN_CPUID_LEAF(i)    (XEN_CPUID_FIRST_LEAF + (i))
 
+/* alternate XenClient cpuid signature */
+#define XCI_CPUID_SIGNATURE_EBX 0x56696358 /* "XciV" */
+#define XCI_CPUID_SIGNATURE_ECX 0x63584d4d /* "MMXc" */
+#define XCI_CPUID_SIGNATURE_EDX 0x4d4d5669 /* "iVMM" */
+
 /*
  * Leaf 1 (0x40000x00)
  * EAX: Largest Xen-information leaf. All leaves up to an including @EAX
--- a/xen/include/public/domctl.h
+++ b/xen/include/public/domctl.h
@@ -1063,6 +1063,13 @@ struct xen_domctl_psr_cat_op {
 typedef struct xen_domctl_psr_cat_op xen_domctl_psr_cat_op_t;
 DEFINE_XEN_GUEST_HANDLE(xen_domctl_psr_cat_op_t);
 
+#define XEN_DOMCTL_setcorespersocket  99
+struct xen_domctl_setcorespersocket {
+    uint32_t cores_per_socket;
+};
+typedef struct xen_domctl_setcorespersocket xen_domctl_setcorespersocket_t;
+DEFINE_XEN_GUEST_HANDLE(xen_domctl_setcorespersocket_t);
+
 struct xen_domctl {
     uint32_t cmd;
 #define XEN_DOMCTL_createdomain                   1
@@ -1165,6 +1172,7 @@ struct xen_domctl {
         struct xen_domctl_ioport_permission ioport_permission;
         struct xen_domctl_hypercall_init    hypercall_init;
         struct xen_domctl_settimeoffset     settimeoffset;
+        struct xen_domctl_setcorespersocket setcorespersocket;
         struct xen_domctl_disable_migrate   disable_migrate;
         struct xen_domctl_tsc_info          tsc_info;
         struct xen_domctl_hvmcontext        hvmcontext;
--- a/xen/include/public/hvm/params.h
+++ b/xen/include/public/hvm/params.h
@@ -214,6 +214,11 @@
  */
 #define HVM_PARAM_X87_FIP_WIDTH 36
 
-#define HVM_NR_PARAMS 37
+/* XenClient specific hvm params */
+
+/* use Xci cpuid signature instead of standard Xen one */
+#define HVM_PARAM_XCI_CPUID_SIGNATURE 37
+
+#define HVM_NR_PARAMS 38
 
 #endif /* __XEN_PUBLIC_HVM_PARAMS_H__ */
--- a/xen/include/xen/sched.h
+++ b/xen/include/xen/sched.h
@@ -418,6 +418,9 @@ struct domain
 
     struct arch_domain arch;
 
+    /*Nb of cores exposed for cpuid, see XEN_DOMCTL_setcorespersocket*/
+    unsigned int cores_per_socket;
+
     void *ssid; /* sHype security subject identifier */
 
     /* Control-plane tools handle for this domain. */
