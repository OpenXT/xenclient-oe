################################################################################
SHORT DESCRIPTION: 
################################################################################
Send absolute offset from UTC to QEMU instead of delta from current RTC

################################################################################
LONG DESCRIPTION: 
################################################################################
It is not clear exactly where this patch originated. It has a component that
goes along with it in QEMU (maintain-time-offset.patch). The short description
is all the original information that can be found. The following is the
analysis of the patch during the 4.6.1 uprev about it likely purpose:

For one, update the RTC when guest returns from PM state, that part should be
important to keep RTC time consistent within guest. The second part about
adjustment does not seem to bring much except sending QEMU the TIMEOFFSET IOREQ
before updating the domain wallclock. There is a patch in QEMU to store diff
for this guest in Xenstore to have it persistent accross reboots. Xen will be
notified of this at QEMU's start through xc_domain_set_time_offset().

################################################################################
CHANGELOG 
################################################################################

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
None.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
QEMU: maintain-time-offset.patch

################################################################################
PATCHES 
################################################################################
# HG cw_domainshangeset patch
# Parent fe77a14721a9a4a9c47aef2b57484ce68fd92662

--- a/xen/arch/x86/acpi/power.c
+++ b/xen/arch/x86/acpi/power.c
@@ -132,6 +132,8 @@ static void thaw_domains(void)
     for_each_domain ( d )
     {
         restore_vcpu_affinity(d);
+        if ( is_hvm_domain(d) )
+            rtc_update_clock(d);
         domain_unpause(d);
     }
     rcu_read_unlock(&domlist_read_lock);
--- a/xen/arch/x86/hvm/rtc.c
+++ b/xen/arch/x86/hvm/rtc.c
@@ -574,7 +574,7 @@ static void rtc_set_time(RTCState *s)
 {
     struct tm *tm = &s->current_tm;
     struct domain *d = vrtc_domain(s);
-    unsigned long before, after; /* XXX s_time_t */
+    unsigned long before, after, adjustment; /* XXX s_time_t */
       
     ASSERT(spin_is_locked(&s->lock));
 
@@ -594,10 +594,14 @@ static void rtc_set_time(RTCState *s)
 
     /* We use the guest's setting of the RTC to define the local-time 
      * offset for this domain. */
-    d->time_offset_seconds += (after - before);
+    adjustment = after - before;
+
+    if (adjustment) {
+        d->time_offset_seconds += adjustment;
+        /* Also tell qemu-dm about it so it will be remembered for next boot. */
+        send_timeoffset_req(d->time_offset_seconds);
+    }
     update_domain_wallclock_time(d);
-    /* Also tell qemu-dm about it so it will be remembered for next boot. */
-    send_timeoffset_req(after - before);
 }
 
 static void rtc_copy_date(RTCState *s)
--- a/xen/arch/x86/hvm/io.c
+++ b/xen/arch/x86/hvm/io.c
@@ -57,9 +57,6 @@ void send_timeoffset_req(unsigned long t
         .state = STATE_IOREQ_READY,
     };
 
-    if ( timeoff == 0 )
-        return;
-
     if ( hvm_broadcast_ioreq(&p, true) != 0 )
         gprintk(XENLOG_ERR, "Unsuccessful timeoffset update\n");
 }
