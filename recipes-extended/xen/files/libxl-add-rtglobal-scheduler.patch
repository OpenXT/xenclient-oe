diff --git a/tools/libxl/libxl.c b/tools/libxl/libxl.c
index ece9a1f..4ef4afd 100644
--- a/tools/libxl/libxl.c
+++ b/tools/libxl/libxl.c
@@ -4591,6 +4591,85 @@ static int sched_sedf_domain_set(libxl__gc *gc, uint32_t domid,
     return 0;
 }
 
+static int sched_rtglobal_domain_get(libxl__gc *gc, uint32_t domid,
+				     libxl_domain_sched_params *scinfo)
+{
+	struct xen_domctl_sched_rtglobal sdom;
+	int rc;
+
+	rc = xc_sched_rtglobal_domain_get(CTX->xch, domid, &sdom);
+ 	if (rc != 0) {
+		LOGE(ERROR, "getting domain sched rtglobal");
+		return ERROR_FAIL;
+	}
+
+	libxl_domain_sched_params_init(scinfo);
+
+	scinfo->sched = LIBXL_SCHEDULER_RTGLOBAL;
+	scinfo->period = sdom.period;
+	scinfo->budget = sdom.budget;
+	scinfo->vcpu = sdom.vcpu;
+	scinfo->rt = sdom.rt;
+
+	return 0;
+}
+
+static int sched_rtglobal_domain_set(libxl__gc *gc, uint32_t domid,
+				     const libxl_domain_sched_params *scinfo)
+{
+	struct xen_domctl_sched_rtglobal sdom;
+	int rc;
+
+	rc = xc_sched_rtglobal_domain_get(CTX->xch, domid, &sdom);
+	if (rc != 0) {
+		LOGE(ERROR, "getting domain sched rtglobal");
+		return ERROR_FAIL;
+	}
+
+	if (scinfo->period != LIBXL_DOMAIN_SCHED_PARAM_PERIOD_DEFAULT) {
+		if (scinfo->period < 1) {
+			LOG(ERROR, "VCPU period is not set or out of range, "
+						"valid values are larger than 1");
+			return ERROR_INVAL;
+		}
+		sdom.period = scinfo->period;
+	}
+
+	if (scinfo->budget != LIBXL_DOMAIN_SCHED_PARAM_BUDGET_DEFAULT) {
+		if (scinfo->period < 1) {
+			LOG(ERROR, "VCPU budget is not set or out of range, "
+						"valid values are larger than 1");
+			return ERROR_INVAL;
+		}
+		sdom.budget = scinfo->budget;
+	}
+
+	if (sdom.budget > sdom.period) {
+		LOG(ERROR, "VCPU budget is larger than VCPU period,"
+						"VCPU budget should be no larger than VCPU period");
+		return ERROR_INVAL;
+	}
+
+	if (scinfo->vcpu != LIBXL_DOMAIN_SCHED_PARAM_VCPU_DEFAULT) 
+		sdom.vcpu = scinfo->vcpu;
+
+	if (scinfo->rt != LIBXL_DOMAIN_SCHED_PARAM_RT_DEFAULT) {
+		if (!(scinfo->rt == 0 || scinfo->rt == 1)) {
+		LOG(ERROR, "rt is not valid should be either 0 or 1");
+			return ERROR_INVAL;
+		}
+		sdom.rt = scinfo->rt;
+	}
+
+	rc = xc_sched_rtglobal_domain_set(CTX->xch, domid, &sdom);
+	if (rc < 0) {
+		LOGE(ERROR, "setting domain sched rtglobal");
+		return ERROR_FAIL;
+	}
+
+	return 0;
+}
+
 int libxl_domain_sched_params_set(libxl_ctx *ctx, uint32_t domid,
                                   const libxl_domain_sched_params *scinfo)
 {
@@ -4614,6 +4693,9 @@ int libxl_domain_sched_params_set(libxl_ctx *ctx, uint32_t domid,
     case LIBXL_SCHEDULER_ARINC653:
         ret=sched_arinc653_domain_set(gc, domid, scinfo);
         break;
+	case LIBXL_SCHEDULER_RTGLOBAL:
+		ret=sched_rtglobal_domain_set(gc, domid, scinfo);
+		break;
     default:
         LOG(ERROR, "Unknown scheduler");
         ret=ERROR_INVAL;
@@ -4644,6 +4726,9 @@ int libxl_domain_sched_params_get(libxl_ctx *ctx, uint32_t domid,
     case LIBXL_SCHEDULER_CREDIT2:
         ret=sched_credit2_domain_get(gc, domid, scinfo);
         break;
+	case LIBXL_SCHEDULER_RTGLOBAL:
+		ret=sched_rtglobal_domain_get(gc, domid, scinfo);
+		break;
     default:
         LOG(ERROR, "Unknown scheduler");
         ret=ERROR_INVAL;
diff --git a/tools/libxl/libxl.h b/tools/libxl/libxl.h
index 37e4d82..5dbfd9c 100644
--- a/tools/libxl/libxl.h
+++ b/tools/libxl/libxl.h
@@ -81,6 +81,8 @@
  */
 #define LIBXL_HAVE_DOMAIN_NODEAFFINITY 1
 
+#define LIBXL_HAVE_SCHED_RTGLOBAL 1
+
 /*
  * libxl ABI compatibility
  *
@@ -952,6 +954,9 @@ int libxl_sched_credit_params_set(libxl_ctx *ctx, uint32_t poolid,
 #define LIBXL_DOMAIN_SCHED_PARAM_SLICE_DEFAULT     -1
 #define LIBXL_DOMAIN_SCHED_PARAM_LATENCY_DEFAULT   -1
 #define LIBXL_DOMAIN_SCHED_PARAM_EXTRATIME_DEFAULT -1
+#define LIBXL_DOMAIN_SCHED_PARAM_BUDGET_DEFAULT	   -1
+#define LIBXL_DOMAIN_SCHED_PARAM_VCPU_DEFAULT	   -1
+#define LIBXL_DOMAIN_SCHED_PARAM_RT_DEFAULT	   -1
 
 int libxl_domain_sched_params_get(libxl_ctx *ctx, uint32_t domid,
                                   libxl_domain_sched_params *params);
diff --git a/tools/libxl/libxl_types.idl b/tools/libxl/libxl_types.idl
index d218a2d..211f0ee 100644
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -116,6 +116,7 @@ libxl_scheduler = Enumeration("scheduler", [
     (5, "credit"),
     (6, "credit2"),
     (7, "arinc653"),
+    (8, "rtglobal"),
     ])
 
 # Consistent with SHUTDOWN_* in sched.h
@@ -256,6 +257,9 @@ libxl_domain_sched_params = Struct("domain_sched_params",[
     ("slice",        integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_SLICE_DEFAULT'}),
     ("latency",      integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_LATENCY_DEFAULT'}),
     ("extratime",    integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_EXTRATIME_DEFAULT'}),
+    ("budget",       integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_BUDGET_DEFAULT'}),
+    ("vcpu",         integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_VCPU_DEFAULT'}),
+    ("rt",           integer, {'init_val': 'LIBXL_DOMAIN_SCHED_PARAM_RT_DEFAULT'}),
     ])
 
 libxl_domain_build_info = Struct("domain_build_info",[
