################################################################################
SHORT DESCRIPTION:
################################################################################
Wait for the argo-firewall-ready xenstore entry during stubdom launch.

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################
Authors:
Chris Rogers <rogersc@ainfosec.com>

Disaggregated from libxl-xenmgr-support.patch and changed to use async API by:
Troy Crosley <crosleyt@ainfosec.com>

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_dm.c
+++ b/tools/libxl/libxl_dm.c
@@ -2109,6 +2109,9 @@ static int libxl__store_libxl_entry(libx
     return libxl__xs_printf(gc, XBT_NULL, path, "%s", value);
 }
 
+static void argo_xswait_cb(libxl__egc *egc, libxl__xswait_state *xswait,
+                              int rc, const char *p);
+
 static void spawn_stubdom_pvqemu_cb(libxl__egc *egc,
                                 libxl__dm_spawn_state *stubdom_dmss,
                                 int rc);
@@ -2353,11 +2356,22 @@ retry_transaction:
     libxl__xs_printf(gc, XBT_NULL,
                      DEVICE_MODEL_XS_PATH(gc, dm_domid, guest_domid, "/xen_extended_power_mgmt"), "2");
 
-    libxl__multidev_begin(ao, &sdss->multidev);
-    sdss->multidev.callback = spawn_stub_launch_dm;
-    /* OpenXT: Again, no disk for the stubdom itself */
-    libxl__add_disks(egc, ao, dm_domid, dm_config, &sdss->multidev);
-    libxl__multidev_prepared(egc, &sdss->multidev, 0);
+    /* OpenXT: We wait on xenmgr writing argo-firewall-ready.
+     *         xenmgr waits on us writing image/device-model-domid
+     */
+    const char *firewall_path =
+        GCSPRINTF("%s/argo-firewall-ready",
+                  libxl__xs_get_dompath(gc, guest_domid));
+    /* Wait for argo firewall rules */
+    libxl__xswait_init(&sdss->xswait);
+    sdss->xswait.ao = ao;
+    sdss->xswait.what = GCSPRINTF("Domain %u for argo-firewall-ready",
+                                  guest_domid);
+    sdss->xswait.path = firewall_path;
+    sdss->xswait.timeout_ms = LIBXL_ARGO_TIMEOUT * 1000;
+    sdss->xswait.callback = argo_xswait_cb;
+    ret = libxl__xswait_start(gc, &sdss->xswait);
+    if (ret) goto out;
 
     return;
 
@@ -2366,6 +2380,35 @@ out:
     spawn_stubdom_pvqemu_cb(egc, &sdss->pvqemu, ret);
 }
 
+static void argo_xswait_cb(libxl__egc *egc, libxl__xswait_state *xswait,
+                           int rc, const char *p)
+{
+    libxl__stub_dm_spawn_state *sdss = CONTAINER_OF(xswait, *sdss, xswait);
+    STATE_AO_GC(sdss->dm.spawn.ao);
+    uint32_t dm_domid = sdss->pvqemu.guest_domid;
+    libxl_domain_config *const dm_config = &sdss->dm_config;
+    const int guest_domid = sdss->dm.guest_domid;
+
+    if (rc) {
+        if (rc == ERROR_TIMEDOUT)
+            LOGD(ERROR, guest_domid,
+                 "%s: xenstore wait timed out", xswait->what);
+        goto out;
+    }
+
+    if (!p)
+        LOGD(ERROR, guest_domid, "argo-firewall-ready was unable to be read");
+    else if (!strcmp(p, "1"))
+        LOGD(ERROR, guest_domid, "unexpected argo-firewall-ready value");
+
+ out:
+    libxl__xswait_stop(gc, xswait);
+    libxl__multidev_begin(ao, &sdss->multidev);
+    sdss->multidev.callback = spawn_stub_launch_dm;
+    libxl__add_disks(egc, ao, dm_domid, dm_config, &sdss->multidev);
+    libxl__multidev_prepared(egc, &sdss->multidev, 0);
+}
+
 static void spawn_stub_launch_dm(libxl__egc *egc,
                                  libxl__multidev *multidev, int ret)
 {
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -98,6 +98,7 @@
 #define LIBXL_INIT_TIMEOUT 10
 #define LIBXL_DESTROY_TIMEOUT 10
 #define LIBXL_HOTPLUG_TIMEOUT 40
+#define LIBXL_ARGO_TIMEOUT 4
 /* QEMU may be slow to load and start due to a bug in Linux where the I/O
  * subsystem sometime produce high latency under load. */
 #define LIBXL_DEVICE_MODEL_START_TIMEOUT 60
