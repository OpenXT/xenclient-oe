################################################################################
SHORT DESCRIPTION:
################################################################################
Libxl patch to support blktap3

################################################################################
LONG DESCRIPTION:
################################################################################
Modified libxl so as to be compatible with blktap3 for creation, operation and 
destruction of tapdisk.

################################################################################
CHANGELOG
################################################################################
Initial work from Thanos Makatos
https://github.com/qiaohaiming/blktap3/blob/master/libxl.diff

Contributions by:
Mahantesh Salimath <salimathm@ainfosec.com>

################################################################################
UPSTREAM PLAN
################################################################################
Could be upstreamed

################################################################################
PATCHES
################################################################################
--- /dev/null
+++ b/tools/libxl/libxl_blktap3.c
@@ -0,0 +1,140 @@
+/*
+ * Copyright (C) 2012      Advanced Micro Devices
+ * Author Christoph Egger <Christoph.Egger@amd.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published
+ * by the Free Software Foundation; version 2.1 only.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ */
+
+#include "libxl_osdeps.h" /* must come before any other headers */
+#include "libxl_internal.h"
+
+#include <tap-ctl.h>
+
+#include <list.h>   /* include for list_head structure */
+
+static int blktap_find(const char *type, const char *path, tap_list_t *tap)
+{
+    struct list_head list; /* Note: structure name updated */
+    tap_list_t *entry, *next_t;
+    int ret = -ENOENT, err;
+
+    /* TAILQ_INIT(&list);--> old function */
+    INIT_LIST_HEAD(&list);
+
+    err = tap_ctl_list(&list);
+    if (err)
+        return err;
+
+    /* TAILQ_EMPTY(&list)--> old function */
+    if (list_empty(&list))
+        return ret;
+
+    tap_list_for_each_entry_safe(entry, next_t, &list) {
+
+        if (type && (!entry->type || strcmp(entry->type, type)))
+            continue;
+
+        if (path && (!entry->path || strcmp(entry->path, path)))
+            continue;
+
+        *tap = *entry;
+        tap->type = tap->path = NULL;
+        ret = 0;
+        break;
+    }
+
+    tap_ctl_list_free(&list);
+
+    return ret;
+}
+
+/**
+ * blktap3 doesn't require blkback, so it's always available.
+ */
+int libxl__blktap_enabled(libxl__gc *gc)
+{
+    return 1;
+}
+
+char *libxl__blktap_devpath(libxl__gc *gc, const char *disk,
+		libxl_disk_format format)
+{
+    const char *type = NULL;
+    char *params, *devname = NULL;
+    tap_list_t tap;
+    int err = 0;
+    int flags = 0;
+
+    type = libxl__device_disk_string_of_format(format);
+
+    err = blktap_find(type, disk, &tap);
+    if (!err) {
+        LOG(DEBUG, "found tapdisk\n");
+        devname = libxl__sprintf(gc, "/dev/xen/blktap-2/tapdev%d", tap.minor);
+        if (devname)
+            return devname;
+    }
+
+    LOG(DEBUG, "tapdisk not found\n");
+
+	/* TODO Should we worry about return codes other than ENOENT? */
+
+    params = libxl__sprintf(gc, "%s:%s", type, disk);
+
+    err = tap_ctl_create(params, &devname, flags, -1, 0, 0, NULL, NULL);
+    if (!err) {
+        LOG(DEBUG, "created tapdisk\n");
+        return devname;
+    }
+
+    LOG(ERROR, "error creating tapdisk: %s\n", strerror(err));
+
+    return NULL;
+}
+
+int libxl__device_destroy_tapdisk(libxl__gc *gc, const char *params)
+{
+    char *type, *disk;
+    int err;
+    tap_list_t tap;
+
+    type = libxl__strdup(gc, params);
+    disk = strchr(type, ':');
+    if (!disk) {
+        LOG(ERROR, "Unable to parse params %s", params);
+        return ERROR_INVAL;
+    }
+
+    *disk++ = '\0';
+
+    err = blktap_find(type, disk, &tap);
+    if (err < 0) {
+        /* returns -errno */
+        LOGEV(ERROR, -err, "Unable to find type %s disk %s", type, disk);
+        return ERROR_FAIL;
+    }
+
+    err = tap_ctl_destroy(tap.pid, tap.minor, 0, NULL);
+    if (err < 0) {
+        LOGEV(ERROR, -err, "Failed to destroy tap device id %d minor %d",
+              tap.pid, tap.minor);
+        return ERROR_FAIL;
+    }
+
+    return 0;
+}
+
+/*
+ * Local variables:
+ * mode: C
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
--- a/tools/libxl/libxl_device.c
+++ b/tools/libxl/libxl_device.c
@@ -973,7 +973,9 @@ void libxl__initiate_device_generic_remo
     STATE_AO_GC(aodev->ao);
     xs_transaction_t t = 0;
     char *be_path = libxl__device_backend_path(gc, aodev->dev);
+    char *fe_path = libxl__device_frontend_path(gc, aodev->dev);
     char *state_path = GCSPRINTF("%s/state", be_path);
+    char *fe_state_path = GCSPRINTF("%s/state", fe_path);
     char *online_path = GCSPRINTF("%s/online", be_path);
     const char *state;
     libxl_dominfo info;
@@ -1050,6 +1052,11 @@ void libxl__initiate_device_generic_remo
                 LOGD(ERROR, domid, "unable to write to xenstore path %s", state_path);
                 goto out;
             }
+            rc = libxl__xs_write_checked(gc, t, fe_state_path, GCSPRINTF("%d", XenbusStateClosed));
+            if (rc) {
+                LOGD(ERROR, domid, "unable to write to xenstore path %s", fe_state_path);
+                goto out;
+            }
         }
 
         rc = libxl__xs_transaction_commit(gc, &t);
--- a/tools/libxl/libxl_disk.c
+++ b/tools/libxl/libxl_disk.c
@@ -56,7 +56,7 @@ static void disk_eject_xswatch_callback(
             "/local/domain/%d/backend/%" TOSTRING(BACKEND_STRING_SIZE)
            "[a-z]/%*d/%*d",
            &disk->backend_domid, backend_type);
-    if (!strcmp(backend_type, "tap") || !strcmp(backend_type, "vbd")) {
+    if (!strcmp(backend_type, "tap") || !strcmp(backend_type, "vbd") || !strcmp(backend_type, "vbd3")) {
         disk->backend = LIBXL_DISK_BACKEND_TAP;
     } else if (!strcmp(backend_type, "qdisk")) {
         disk->backend = LIBXL_DISK_BACKEND_QDISK;
@@ -188,7 +188,7 @@ static int libxl__device_from_disk(libxl
             device->backend_kind = LIBXL__DEVICE_KIND_VBD;
             break;
         case LIBXL_DISK_BACKEND_TAP:
-            device->backend_kind = LIBXL__DEVICE_KIND_VBD;
+            device->backend_kind = LIBXL__DEVICE_KIND_VBD3;
             break;
         case LIBXL_DISK_BACKEND_QDISK:
             device->backend_kind = LIBXL__DEVICE_KIND_QDISK;
@@ -310,7 +310,6 @@ static void device_disk_add(libxl__egc *
             case LIBXL_DISK_BACKEND_PHY:
                 dev = disk->pdev_path;
 
-        do_backend_phy:
                 flexarray_append(back, "params");
                 flexarray_append(back, dev);
 
@@ -322,27 +321,29 @@ static void device_disk_add(libxl__egc *
                 break;
 
             case LIBXL_DISK_BACKEND_TAP:
-                if (dev == NULL) {
-                    dev = libxl__blktap_devpath(gc, disk->pdev_path,
-                                                disk->format);
-                    if (!dev) {
-                        LOGD(ERROR, domid, "Failed to get blktap devpath for %p",
-                             disk->pdev_path);
-                        rc = ERROR_FAIL;
-                        goto out;
+                dev = libxl__blktap_devpath(gc, disk->pdev_path,
+                                            disk->format);
+                if (!dev) {
+                     LOGD(ERROR, domid, "failed to get blktap devpath for %s: %s\n",
+                          disk->pdev_path, strerror(rc));
+                     rc = ERROR_FAIL;
+                     goto out;
+                }
+                LOG(DEBUG,"\nBLKTAP3_DEBUG: dev path = %s \n", dev);
+                if (!disk->script && disk->backend_domid == LIBXL_TOOLSTACK_DOMID) {
+                    int major, minor;
+                    if (!libxl__device_physdisk_major_minor(dev, &major, &minor)) {
+                        LOG(DEBUG, "\nBLKTAP3_DEBUG: major:minor = %x:%x\n",major,minor);
+                        flexarray_append_pair(back, "physical-device",
+                                GCSPRINTF("%x:%x", major, minor));
                     }
                 }
                 flexarray_append(back, "tapdisk-params");
                 flexarray_append(back, GCSPRINTF("%s:%s",
                     libxl__device_disk_string_of_format(disk->format),
                     disk->pdev_path));
+                break;
 
-                /* tap backends with scripts are rejected by
-                 * libxl__device_disk_set_backend */
-                assert(!disk->script);
-
-                /* now create a phy device to export the device to the guest */
-                goto do_backend_phy;
             case LIBXL_DISK_BACKEND_QDISK:
                 flexarray_append(back, "params");
                 flexarray_append(back, GCSPRINTF("%s:%s",
@@ -540,6 +541,16 @@ static int libxl__disk_from_xenstore(lib
     }
     libxl_string_to_backend(ctx, tmp, &(disk->backend));
 
+    /* NOTE: Below workaround is required while dealing with iso hotswap.
+     * Trying to fix this inside libxl_string_to_backend() will break the
+     * initial disk setup during domain start-up.
+     */
+    tmp = libxl__xs_read(gc, XBT_NULL,
+                         GCSPRINTF("%s/tapdisk-params", libxl_path));
+    if (tmp && strcmp(tmp, "")) {
+    	disk->backend = LIBXL_DISK_BACKEND_TAP;
+    }
+
     disk->vdev = xs_read(ctx->xsh, XBT_NULL,
                          GCSPRINTF("%s/dev", libxl_path), &len);
     if (!disk->vdev) {
@@ -763,6 +774,7 @@ int libxl_cdrom_change(libxl_ctx *ctx, u
 
     libxl__ao_complete(egc, ao, 0);
 out:
+    libxl_device_disk_dispose(&disk_empty);
     if (lock) libxl__unlock_domain_userdata(lock);
     if (rc) return AO_CREATE_FAIL(rc);
     return AO_INPROGRESS;
--- a/tools/libxl/Makefile
+++ b/tools/libxl/Makefile
@@ -20,18 +20,18 @@ LIBUUID_LIBS += -luuid
 endif
 
 LIBXL_LIBS =
-LIBXL_LIBS = $(LDLIBS_libxentoollog) $(LDLIBS_libxenevtchn) $(LDLIBS_libxenctrl) $(LDLIBS_libxenguest) $(LDLIBS_libxenstore) $(LDLIBS_libblktapctl) $(LDLIBS_libxentoolcore) $(PTYFUNCS_LIBS) $(LIBUUID_LIBS)
+LIBXL_LIBS = $(LDLIBS_libxentoollog) $(LDLIBS_libxenevtchn) $(LDLIBS_libxenctrl) $(LDLIBS_libxenguest) $(LDLIBS_libxenstore) $(LDLIBS_libxentoolcore) $(PTYFUNCS_LIBS) $(LIBUUID_LIBS)
 ifeq ($(CONFIG_LIBNL),y)
 LIBXL_LIBS += $(LIBNL3_LIBS)
 endif
 
+CFLAGS_LIBXL += -I/usr/include/blktap
 CFLAGS_LIBXL += $(CFLAGS_libxentoollog)
 CFLAGS_LIBXL += $(CFLAGS_libxentoolcore)
 CFLAGS_LIBXL += $(CFLAGS_libxenevtchn)
 CFLAGS_LIBXL += $(CFLAGS_libxenctrl)
 CFLAGS_LIBXL += $(CFLAGS_libxenguest)
 CFLAGS_LIBXL += $(CFLAGS_libxenstore)
-CFLAGS_LIBXL += $(CFLAGS_libblktapctl) 
 ifeq ($(CONFIG_LIBNL),y)
 CFLAGS_LIBXL += $(LIBNL3_CFLAGS)
 endif
@@ -48,9 +48,9 @@ LIBXLU_LIBS = $(LDLIBS_libxenlight)
 
 LIBXL_OBJS-y = osdeps.o libxl_paths.o libxl_bootloader.o flexarray.o
 ifeq ($(CONFIG_BLKTAP2),y)
-LIBXL_OBJS-y += libxl_blktap2.o
+LIBXL_OBJS-y += libxl_blktap3.o
 else
-LIBXL_OBJS-y += libxl_noblktap2.o
+LIBXL_OBJS-y += libxl_noblktap3.o
 endif
 
 ifeq ($(CONFIG_LIBNL),y)
--- a/tools/libxl/libxl_types_internal.idl
+++ b/tools/libxl/libxl_types_internal.idl
@@ -31,6 +31,7 @@ libxl__device_kind = Enumeration("device
     (14, "PVCALLS"),
     (15, "VSND"),
     (16, "VWIF"),
+    (17, "VBD3"),
     ])
 
 libxl__console_backend = Enumeration("console_backend", [
