################################################################################
SHORT DESCRIPTION:
################################################################################
Disable libxl's functionality for rewriting VM config files when changes are
applied to the running system because they are not there and it causes failure.

################################################################################
LONG DESCRIPTION:
################################################################################
In Xen 4.9, libxl rewrites a VM config file when its running configuration
changes, eg. when adding a network interface to a VM.

OpenXT's toolstack does not currently use or provide the VM config files that
libxl expects so the attempted config rewrite fails, which disables all guest
networking.

Upstream Xen does not provide configuration or command line options to disable
the behaviour, so this patch disables it in the source.

################################################################################
CHANGELOG
################################################################################
Authors:
Christopher Clark <christopher.clark6@baesystems.com>

Introduced in the OpenXT uprev from Xen 4.6 to 4.9.


################################################################################
REMOVAL
################################################################################
OpenXT could integrate further with libxl, making changes to use the config
files that libxl expects. That would allow this patch to be removed.

Alternatively, patches could be submitted upstream to make the use of libxl's
config files optional and OpenXT could continue to avoid it.

################################################################################
UPSTREAM PLAN
################################################################################
Not as implemented: upstream evidently has a requirement for this feature.

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -3604,7 +3604,7 @@ _hidden void libxl__bootloader_run(libxl
         libxl__prepare_ao_device(ao, aodev);                            \
         aodev->action = LIBXL__DEVICE_ACTION_ADD;                       \
         aodev->callback = device_addrm_aocomplete;                      \
-        aodev->update_json = true;                                      \
+        aodev->update_json = false;                                     \
         libxl__device_##type##_add(egc, domid, type, aodev);            \
                                                                         \
         return AO_INPROGRESS;                                           \
--- a/tools/libxl/libxl_create.c
+++ b/tools/libxl/libxl_create.c
@@ -1721,25 +1721,6 @@ static void domcreate_complete(libxl__eg
 
     bool retain_domain = !rc || rc == ERROR_ABORTED;
 
-    if (retain_domain) {
-        libxl__domain_userdata_lock *lock;
-
-        /* Note that we hold CTX lock at this point so only need to
-         * take data store lock
-         */
-        lock = libxl__lock_domain_userdata(gc, dcs->guest_domid);
-        if (!lock) {
-            rc = ERROR_LOCK_FAIL;
-        } else {
-            libxl__update_domain_configuration(gc, d_config_saved, d_config);
-            int cfg_rc = libxl__set_domain_configuration
-                (gc, dcs->guest_domid, d_config_saved);
-            if (!rc)
-                rc = cfg_rc;
-            libxl__unlock_domain_userdata(lock);
-        }
-    }
-
     libxl_domain_config_dispose(d_config_saved);
 
     if (!retain_domain) {
