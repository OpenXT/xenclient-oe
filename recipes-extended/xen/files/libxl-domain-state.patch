################################################################################
SHORT DESCRIPTION:
################################################################################

################################################################################
LONG DESCRIPTION:
################################################################################
Introduce domain lifecycle state updates. OpenXT maintains domain state beyond
the basic Xen states for a domain (such as 'Starting', 'Rebooting', etc). Only
Xl knows when we reach these states, upon which it informs Xenmgr, like Xenvm
did. Also implements some helper functions to support this feature.

################################################################################
CHANGELOG
################################################################################
Authors:
Chris Rogers <rogersc@ainfosec.com>

Updated for Xen 4.9.0

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################
Requires uuid functions added in libxl-fixup-cmdline-ops.patch

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_create.c
+++ b/tools/libxl/libxl_create.c
@@ -1006,6 +1006,12 @@ static void initiate_domain_create(libxl
     dcs->sdss.dm.guest_domid = 0; /* means we haven't spawned */
 
     /*
+     * OpenXT: XenMgr synchronizes with this state change to apply the v4v
+     * firewall rules and requires it to occur after libxl__domain_make(..).
+     */
+    libxl_update_state(ctx, domid, "creating-devices");
+
+    /*
      * Set the dm version quite early so that libxl doesn't have to pass the
      * build info around just to know if the domain has a device model or not.
      */
--- a/tools/libxl/libxl_dom_suspend.c
+++ b/tools/libxl/libxl_dom_suspend.c
@@ -85,6 +85,9 @@ void libxl__domain_suspend_device_model(
         break;
     }
     case LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN:
+
+        libxl_update_state(CTX, domid, "suspending");
+
         /* calls dsps->callback_device_model_done when done */
         libxl__qmp_suspend_save(egc, dsps); /* must be last */
         return;
@@ -154,6 +157,8 @@ static void domain_suspend_callback_comm
         xc_hvm_param_get(CTX->xch, domid, HVM_PARAM_ACPI_S_STATE, &hvm_s_state);
     }
 
+    libxl_update_state(CTX, domid, "suspending");
+
     if ((hvm_s_state == 0) && (dsps->guest_evtchn.port >= 0)) {
         LOGD(DEBUG, domid, "issuing %s suspend request via event channel",
             dsps->type != LIBXL_DOMAIN_TYPE_PV ? "PVH/HVM" : "PV");
@@ -203,6 +208,9 @@ static void domain_suspend_callback_comm
     dsps->pvcontrol.timeout_ms = 60 * 1000;
     dsps->pvcontrol.callback = domain_suspend_common_pvcontrol_suspending;
     libxl__xswait_start(gc, &dsps->pvcontrol);
+
+    libxl_update_state(CTX, domid, "suspended");
+
     return;
 
  err:
--- a/tools/libxl/libxl_domain.c
+++ b/tools/libxl/libxl_domain.c
@@ -498,6 +498,8 @@ int libxl_domain_suspend(libxl_ctx *ctx,
         goto out_err;
     }
 
+    libxl_update_state(ctx, domid, "suspending");
+
     libxl__domain_save_state *dss;
     GCNEW(dss);
 
@@ -567,6 +569,9 @@ int libxl_domain_pause(libxl_ctx *ctx, u
         GC_FREE;
         return ERROR_FAIL;
     }
+
+    libxl_update_state(ctx, domid, "paused");
+
     GC_FREE;
     return 0;
 }
@@ -614,6 +619,9 @@ int libxl_domain_unpause(libxl_ctx *ctx,
         }
     }
     ret = xc_domain_unpause(ctx->xch, domid);
+
+    libxl_update_state(ctx, domid, "running");
+
     if (ret<0) {
         LOGED(ERROR, domid, "Unpausing domain");
         rc = ERROR_FAIL;
--- a/tools/libxl/libxl_utils.c
+++ b/tools/libxl/libxl_utils.c
@@ -1209,6 +1209,62 @@ int libxl_domid_valid_guest(uint32_t dom
     return domid > 0 && domid < DOMID_FIRST_RESERVED;
 }
 
+int libxl_update_state_direct(libxl_ctx *ctx, libxl_uuid xl_uuid, const char * state)
+{
+    char path[sizeof("/state/00000000-0000-0000-0000-000000000000/state")];
+    char uuid[37];
+
+    uuid_unparse(xl_uuid.uuid, uuid);
+    sprintf(path, "/state/%s/state", uuid);
+
+    if (!xs_write(ctx->xsh, XBT_NULL, path, state, strlen(state)))
+    {
+        fprintf(stderr, "Failed to write the xenstore node: %s with state: %s\n", path, state);
+    }
+
+    return 0;
+
+}
+
+int libxl_update_state(libxl_ctx *ctx, uint32_t domid_in, const char *state)
+{
+    int nb_domains, i;
+    uint32_t domid, target_domid;
+    char path[sizeof("/state/00000000-0000-0000-0000-000000000000/state")];
+    char uuid[37];
+    libxl_dominfo *dominfo;
+    libxl_uuid *xl_uuid = NULL;
+
+    if(libxl_is_stubdom(ctx, domid_in, &target_domid))
+        return 0;
+
+    dominfo = libxl_list_domain(ctx, &nb_domains);
+
+    for(i = 0; i < nb_domains; i++)
+    {
+        domid = dominfo[i].domid;
+        if (domid == domid_in)
+        {
+            xl_uuid = &dominfo[i].uuid;
+            break;
+        }
+    }
+    if (!xl_uuid){
+        fprintf(stderr, "Failed to find the uuid\n");
+        return -1;
+    }
+
+    uuid_unparse(xl_uuid->uuid, uuid);
+    sprintf(path, "/state/%s/state", uuid);
+
+    if (!xs_write(ctx->xsh, XBT_NULL, path, state, strlen(state)))
+    {
+        fprintf(stderr, "Failed to write the xenstore node: %s with state: %s\n", path, state);
+    }
+    free(dominfo);
+    return 0;
+}
+
 void libxl_string_copy(libxl_ctx *ctx, char **dst, char * const*src)
 {
     GC_INIT(ctx);
--- a/tools/libxl/libxl_utils.h
+++ b/tools/libxl/libxl_utils.h
@@ -37,6 +37,8 @@ int libxl_get_stubdom_id(libxl_ctx *ctx,
 int libxl_is_stubdom(libxl_ctx *ctx, uint32_t domid, uint32_t *target_domid);
 int libxl_create_logfile(libxl_ctx *ctx, const char *name, char **full_name);
 int libxl_string_to_backend(libxl_ctx *ctx, char *s, libxl_disk_backend *backend);
+int libxl_update_state(libxl_ctx *ctx, uint32_t domid_in, const char *state);
+int libxl_update_state_direct(libxl_ctx *ctx, libxl_uuid xl_uuid, const char *state);
 
 int libxl_read_file_contents(libxl_ctx *ctx, const char *filename,
                              void **data_r, int *datalen_r);
--- a/tools/xl/xl_vmcontrol.c
+++ b/tools/xl/xl_vmcontrol.c
@@ -45,6 +45,7 @@ static void unpause_domain(uint32_t domi
 static void destroy_domain(uint32_t domid, int force)
 {
     int rc;
+    libxl_uuid uuid;
 
     if (domid == 0 && !force) {
         fprintf(stderr, "Not destroying domain 0; use -f to force.\n"
@@ -52,8 +53,18 @@ static void destroy_domain(uint32_t domi
                         "hardware domain and toolstack.\n\n");
         exit(EXIT_FAILURE);
     }
+    
+    rc = libxl_domid_to_uuid(ctx, &uuid, domid);
+    if (rc) {
+        fprintf(stderr, "domid to uuid failed during domain destroy\n");
+        exit(EXIT_FAILURE);
+    }
     rc = libxl_domain_destroy(ctx, domid, 0);
-    if (rc) { fprintf(stderr,"destroy failed (rc=%d)\n",rc); exit(EXIT_FAILURE); }
+    if (rc) {
+        fprintf(stderr,"destroy failed (rc=%d)\n",rc);
+        exit(EXIT_FAILURE);
+    }
+    libxl_update_state_direct(ctx, uuid, "shutdown");
 }
 
 int main_pause(int argc, char **argv)
@@ -103,6 +114,7 @@ static void reboot_domain(uint32_t domid
     int rc;
 
     fprintf(stderr, "Rebooting domain %u\n", domid);
+    libxl_update_state(ctx, domid, "rebooting");
     rc=libxl_domain_reboot(ctx, domid);
     if (rc == ERROR_NOPARAVIRT) {
         if (fallback_trigger) {
@@ -136,6 +148,7 @@ static void shutdown_domain(uint32_t dom
     int rc;
 
     fprintf(stderr, "Shutting down domain %u\n", domid);
+    libxl_update_state(ctx, domid, "shutdowning");
     rc=libxl_domain_shutdown(ctx, domid);
     if (rc == ERROR_NOPARAVIRT) {
         if (fallback_trigger) {
@@ -403,9 +416,11 @@ static domain_restart_type handle_domain
         break;
     case LIBXL_SHUTDOWN_REASON_REBOOT:
         action = d_config->on_reboot;
+        libxl_update_state(ctx, *r_domid, "rebooting");
         break;
     case LIBXL_SHUTDOWN_REASON_SUSPEND:
         LOG("Domain has suspended.");
+        libxl_update_state(ctx, *r_domid, "suspended");
         return 0;
     case LIBXL_SHUTDOWN_REASON_CRASH:
         action = d_config->on_crash;
@@ -971,6 +986,8 @@ start:
         notify_pipe[0] = notify_pipe[1] = -1;
     }
 
+    libxl_update_state(ctx, domid, "created");
+
     if (!paused)
         libxl_domain_unpause(ctx, domid);
 
@@ -1074,6 +1091,9 @@ start:
                  * re-creation fails sometimes.
                  */
                 LOG("Done. Rebooting now");
+                libxl_update_state_direct(ctx, d_config.c_info.uuid, "shutdown"); //Sleep here because daemons with an xs_watch on this node
+                sleep(2);                                                         //won't see the "shutdown" event, just the "rebooted" one.
+                libxl_update_state_direct(ctx, d_config.c_info.uuid, "rebooted"); //Once this is fixed in xenstore libs, sleep can be removed.
                 sleep(2);
                 goto start;
 
@@ -1081,6 +1101,7 @@ start:
                 LOG("Done. Exiting now");
                 libxl_event_free(ctx, event);
                 ret = 0;
+                libxl_update_state_direct(ctx, d_config.c_info.uuid, "shutdown");
                 goto out;
 
             default:
@@ -1091,6 +1112,7 @@ start:
             LOG("Domain %u has been destroyed.", domid);
             libxl_event_free(ctx, event);
             ret = 0;
+            libxl_update_state(ctx, domid, "shutdown");
             goto out;
 
         case LIBXL_EVENT_TYPE_DISK_EJECT:
@@ -1112,6 +1134,7 @@ error_out:
     release_lock();
     if (libxl_domid_valid_guest(domid)) {
         libxl_domain_destroy(ctx, domid, 0);
+        libxl_update_state_direct(ctx, d_config.c_info.uuid, "shutdown");
         domid = INVALID_DOMID;
     }
 
