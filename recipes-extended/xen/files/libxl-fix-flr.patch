################################################################################
SHORT DESCRIPTION:
################################################################################
Fix device reset for pci devices in libxl

################################################################################
LONG DESCRIPTION:
################################################################################
This patch fixes the logic and the control flow path for pci device reset in
libxl.

The reset logic introduced in this patch is delayed until the domain has fully
been destroyed. The reason for this has to do with the
thorough-reset-interface-to-pciback-s-sysfs.patch in the linux patchqueue.
__pcistub_raw_device_reset tries multiple approaches for resetting the device,
flr, slot-level, and bus-level. If we encounter a device that, for example,
doesn't support flr but does support a slot-level reset, we want to make sure
all the functions on that device (GPUS are a good example, they often have 2
functions, video and HDMI audio, and are the only device in the slot) are
released from the domain before attempting the reset or it will fail. This
approach seems to be taken in an attempt to support a wide variety of PCI
devices.

################################################################################
CHANGELOG
################################################################################
Authors:
Chris Rogers <rogersc@ainfosec.com>

################################################################################
REMOVAL
################################################################################
N/A

################################################################################
UPSTREAM PLAN
################################################################################
Depends on the feasibility of upstreaming thorough-reset-interface-to-pciback...

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libs/light/libxl_domain.c
+++ b/tools/libs/light/libxl_domain.c
@@ -1186,6 +1186,14 @@ static void domain_destroy_callback(libx
         dds->rc = rc;
     }
 
+    if(dis->pciw) {
+        for (int i = 0; i < dis->pciw->num_devs; i++) {
+            libxl_device_pci *pci = &dis->pciw->pcis[i];
+            libxl__device_pci_reset(gc, pci->domain, pci->bus, pci->dev, pci->func);
+        }
+        libxl_device_pci_list_free(dis->pciw->pcis, dis->pciw->num_devs);
+    }
+
     dds->domain_finished = 1;
     destroy_finish_check(egc, dds);
 }
@@ -1259,7 +1267,7 @@ void libxl__destroy_domid(libxl__egc *eg
 
     libxl__multidev_begin(ao, &dis->multidev);
     dis->multidev.callback = destroy_domid_pci_done;
-    libxl__device_pci_destroy_all(egc, domid, &dis->multidev);
+    libxl__device_pci_destroy_all(egc, domid, &dis->multidev, &dis->pciw);
     libxl__multidev_prepared(egc, &dis->multidev, 0);
     return;
 
--- a/tools/libs/light/libxl_internal.h
+++ b/tools/libs/light/libxl_internal.h
@@ -1724,12 +1724,20 @@ _hidden int libxl__pci_topology_init(lib
                                      int num_devs);
 
 /* from libxl_pci */
+typedef struct libxl_pci_dev_wrap {
+    libxl_device_pci *pcis;
+    int num_devs;
+} libxl_pci_dev_wrap;
 
 _hidden void libxl__device_pci_add(libxl__egc *egc, uint32_t domid,
                                    libxl_device_pci *pci, bool starting,
                                    libxl__ao_device *aodev);
 _hidden void libxl__device_pci_destroy_all(libxl__egc *egc, uint32_t domid,
-                                           libxl__multidev *);
+                                           libxl__multidev *,
+					   libxl_pci_dev_wrap **pciw);
+_hidden int libxl__device_pci_reset(libxl__gc *gc, unsigned int domain,
+                                    unsigned int bus, unsigned int dev,
+                                    unsigned int func);
 _hidden int libxl__device_pci_setdefault(libxl__gc *gc, uint32_t domid,
                                          libxl_device_pci *pci, bool hotplug);
 _hidden bool libxl__is_igd_vga_passthru(libxl__gc *gc,
@@ -4086,6 +4094,7 @@ struct libxl__destroy_domid_state {
     libxl__devices_remove_state drs;
     libxl__destroy_devicemodel_state ddms;
     libxl__ev_child destroyer;
+    libxl_pci_dev_wrap *pciw;
     bool soft_reset;
     libxl__multidev multidev;
 };
--- a/tools/libs/light/libxl_pci.c
+++ b/tools/libs/light/libxl_pci.c
@@ -1542,13 +1542,13 @@ out:
     pas->callback(egc, pas, rc);
 }
 
-static int libxl__device_pci_reset(libxl__gc *gc, unsigned int domain, unsigned int bus,
+int libxl__device_pci_reset(libxl__gc *gc, unsigned int domain, unsigned int bus,
                                    unsigned int dev, unsigned int func)
 {
     char *reset;
     int fd, rc;
 
-    reset = GCSPRINTF("%s/do_flr", SYSFS_PCIBACK_DRIVER);
+    reset = GCSPRINTF("%s/reset_device", SYSFS_PCIBACK_DRIVER);
     fd = open(reset, O_WRONLY);
     if (fd >= 0) {
         char *buf = GCSPRINTF(PCI_BDF, domain, bus, dev, func);
@@ -2246,11 +2246,6 @@ static void pci_remove_detached(libxl__e
 
     isstubdom = libxl_is_stubdom(CTX, domid, &domainid);
 
-    /* don't do multiple resets while some functions are still passed through */
-    if ((pci->vdevfn & 0x7) == 0) {
-        libxl__device_pci_reset(gc, pci->domain, pci->bus, pci->dev, pci->func);
-    }
-
     if (!isstubdom) {
         rc = xc_deassign_device(CTX->xch, domid, pci_encode_bdf(pci));
         if (rc < 0 && (prs->hvm || errno != ENOSYS))
@@ -2501,7 +2496,8 @@ static int libxl__device_pci_get_path(li
 }
 
 void libxl__device_pci_destroy_all(libxl__egc *egc, uint32_t domid,
-                                   libxl__multidev *multidev)
+                                   libxl__multidev *multidev,
+                                   libxl_pci_dev_wrap **pciw)
 {
     STATE_AO_GC(multidev->ao);
     libxl_device_pci *pcis;
@@ -2521,7 +2517,12 @@ void libxl__device_pci_destroy_all(libxl
                                         aodev);
     }
 
-    libxl_device_pci_list_free(pcis, num);
+    /* pcis is freed in domain_destroy_callback. */
+    *pciw = libxl__malloc(gc, sizeof(libxl_pci_dev_wrap));
+    if (*pciw) {
+        (*pciw)->pcis = pcis;
+        (*pciw)->num_devs = num;
+    }
 }
 
 int libxl__grant_vga_iomem_permission(libxl__gc *gc, const uint32_t domid,
