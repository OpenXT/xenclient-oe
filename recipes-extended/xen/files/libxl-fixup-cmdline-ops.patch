################################################################################
SHORT DESCRIPTION:
################################################################################

################################################################################
LONG DESCRIPTION:
################################################################################
* Implement sleep and hibernate for xl.
* Implemented some functions for the xl command line tool to help xenmgr. For
  example, converting a uuid to domid, the primary method by which xenmgr ids
  domains.

################################################################################
CHANGELOG
################################################################################
Authors: Chris Rogers <rogersc@ainfosec.com>

Patch rebased for Xen 4.9.0

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Not likely: the uuid functions were removed from upstream Xen in commit:
696b09d8dd27654f4b50f5d2d158ee9bfe008aab of Tue Jan 5 08:39:40 2010

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl.h
+++ b/tools/libxl/libxl.h
@@ -1542,6 +1542,8 @@ int libxl_domain_remus_start(libxl_ctx *
 
 int libxl_domain_shutdown(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_reboot(libxl_ctx *ctx, uint32_t domid);
+int libxl_domain_sleep(libxl_ctx *ctx, uint32_t domid);
+int libxl_domain_hibernate(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_destroy(libxl_ctx *ctx, uint32_t domid,
                          const libxl_asyncop_how *ao_how)
                          LIBXL_EXTERNAL_CALLERS_ONLY;
--- a/tools/libxl/libxl_domain.c
+++ b/tools/libxl/libxl_domain.c
@@ -721,6 +721,24 @@ int libxl_domain_reboot(libxl_ctx *ctx,
     return ret;
 }
 
+int libxl_domain_sleep(libxl_ctx *ctx, uint32_t domid)
+{
+    GC_INIT(ctx);
+    int ret;
+    ret = libxl__domain_pvcontrol(gc, domid, "s3");
+    GC_FREE;
+    return ret;
+}
+
+int libxl_domain_hibernate(libxl_ctx *ctx, uint32_t domid)
+{
+    GC_INIT(ctx);
+    int ret;
+    ret = libxl__domain_pvcontrol(gc, domid, "hibernate");
+    GC_FREE;
+    return ret;
+}
+
 static void domain_death_occurred(libxl__egc *egc,
                                   libxl_evgen_domain_death **evg_upd,
                                   const char *why) {
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -169,6 +169,7 @@ libxl_trigger = Enumeration("trigger", [
     (4, "INIT"),
     (5, "RESET"),
     (6, "S3RESUME"),
+    (7, "HIBERNATE"),
     ])
 
 libxl_tsc_mode = Enumeration("tsc_mode", [
@@ -342,6 +343,7 @@ libxl_dominfo = Struct("dominfo",[
     #
     # Otherwise set to a value guaranteed not to clash with any valid
     # LIBXL_SHUTDOWN_REASON_* constant.
+    ("power_command", uint32),
     ("shutdown_reason", libxl_shutdown_reason),
     ("outstanding_memkb",  MemKB),
     ("current_memkb",   MemKB),
--- a/tools/libxl/libxl_utils.c
+++ b/tools/libxl/libxl_utils.c
@@ -94,6 +94,65 @@ int libxl_name_to_domid(libxl_ctx *ctx,
     return ret;
 }
 
+int libxl_get_acpi_state(libxl_ctx *ctx, int32_t domid, uint32_t *acpi_state)
+{
+    unsigned long hvm_s_state = 0;
+    int ret;
+    ret = xc_get_hvm_param(ctx->xch, domid, HVM_PARAM_ACPI_S_STATE, &hvm_s_state);
+    if (ret < 0) {
+        hvm_s_state = INVALID_ACPI_STATE; //since unsigned, use invalid acpi state
+    }
+    *acpi_state = hvm_s_state;
+    return 0;
+}
+
+int libxl_uuid_to_domid(libxl_ctx *ctx, const char *uuid_in, int32_t *domid)
+{
+
+    int i, nb_domains;
+    libxl_dominfo *dominfo;
+    libxl_uuid uuid, uuid2;
+    int ret = 0;
+    *domid = -1;
+    libxl_uuid_from_string(&uuid2, uuid_in);
+    dominfo = libxl_list_domain(ctx, &nb_domains);
+    if (!dominfo)
+        return ERROR_NOMEM;
+
+    for (i = 0; i < nb_domains; i++) {
+        uuid = dominfo[i].uuid;
+        if (libxl_uuid_compare(&uuid, &uuid2) == 0 && libxl_domid_to_name(ctx, dominfo[i].domid)) {
+            *domid = dominfo[i].domid;
+            ret = 0;
+            break;
+        }
+    }
+    free(dominfo);
+    return ret;
+}
+
+int libxl_domid_to_uuid(libxl_ctx *ctx, libxl_uuid *uuid, uint32_t domid_in)
+{
+    int nb_domains, i;
+    uint32_t domid;
+    libxl_dominfo *dominfo;
+
+    dominfo = libxl_list_domain(ctx, &nb_domains);
+
+    for(i = 0; i < nb_domains; i++)
+    {
+        domid = dominfo[i].domid;
+        if (domid == domid_in)
+        {
+            libxl_uuid_copy(ctx, uuid, &dominfo[i].uuid);
+            return 0;
+        }
+    }
+
+    free(dominfo);
+    return -1;
+}
+
 int libxl_domain_qualifier_to_domid(libxl_ctx *ctx, const char *name,
                                     uint32_t *domid)
 {
--- a/tools/libxl/libxl_utils.h
+++ b/tools/libxl/libxl_utils.h
@@ -25,6 +25,9 @@ char *libxl_basename(const char *name);
 
 unsigned long libxl_get_required_shadow_memory(unsigned long maxmem_kb, unsigned int smp_cpus);
 int libxl_name_to_domid(libxl_ctx *ctx, const char *name, uint32_t *domid);
+int libxl_uuid_to_domid(libxl_ctx *ctx, const char *uuid, int32_t *domid);
+int libxl_domid_to_uuid(libxl_ctx *ctx, libxl_uuid *uuid, uint32_t domid);
+int libxl_get_acpi_state(libxl_ctx *ctx, int32_t domid, uint32_t * acpi_state);
 int libxl_domain_qualifier_to_domid(libxl_ctx *ctx, const char *name, uint32_t *domid);
 char *libxl_domid_to_name(libxl_ctx *ctx, uint32_t domid);
 int libxl_cpupool_qualifier_to_cpupoolid(libxl_ctx *ctx, const char *p,
@@ -184,6 +187,8 @@ void libxl_string_copy(libxl_ctx *ctx, c
 
 #define LIBXL_FILLZERO(object) (memset(&(object), 0, sizeof((object))))
 
+#define INVALID_ACPI_STATE ~0
+
 #endif
 
 /*
--- a/tools/xl/xl.h
+++ b/tools/xl/xl.h
@@ -137,6 +137,9 @@ int main_unpause(int argc, char **argv);
 int main_destroy(int argc, char **argv);
 int main_shutdown(int argc, char **argv);
 int main_reboot(int argc, char **argv);
+int main_hibernate(int argc, char **argv);
+int main_uuid(int argc, char **argv);
+int main_acpi(int argc, char **argv);
 int main_list(int argc, char **argv);
 int main_vm_list(int argc, char **argv);
 int main_create(int argc, char **argv);
--- a/tools/xl/xl_cmdtable.c
+++ b/tools/xl/xl_cmdtable.c
@@ -77,6 +77,13 @@ struct cmd_spec cmd_table[] = {
       "                        no PV drivers.\n"
       "-w, --wait              Wait for guest(s) to shutdown.\n"
     },
+    { "hibernate",
+      &main_hibernate, 0, 1,
+      "Issue a hibernate signal to a domain, only works for PV",
+      "[options] <Domain>",
+      "-h                      Print this help.\n"
+      "-w, --wait              Wait for guest to shutdown.\n"
+    },
     { "reboot",
       &main_reboot, 0, 1,
       "Issue a reboot signal to a domain",
@@ -295,6 +302,16 @@ struct cmd_spec cmd_table[] = {
       "Convert a domain id to domain name",
       "<DomainId>",
     },
+    { "acpi-state",
+      &main_acpi, 0, 0,
+      "Return the acpi state for a domain",
+      "<DomainId>",
+    },
+    { "uuid-to-domid",
+      &main_uuid, 0, 0,
+      "Convert a uuid to domain id",
+      "<Uuid>",
+    },
     { "rename",
       &main_rename, 0, 1,
       "Rename a domain",
--- a/tools/xl/xl_misc.c
+++ b/tools/xl/xl_misc.c
@@ -56,6 +56,51 @@ int main_button_press(int argc, char **a
     return 0;
 }
 
+int main_acpi(int argc, char **argv)
+{
+    int32_t domid;
+    uint32_t acpi_state;
+    int opt;
+
+    SWITCH_FOREACH_OPT(opt, "", NULL, "domid", 1) {
+        /* No options */
+    }
+
+    domid = atoi(argv[optind]);
+
+    if (libxl_get_acpi_state(ctx, domid, &acpi_state)) {
+        fprintf(stderr, "Can't get acpi state with domid of '%d', maybe this domain does not           exist.\n", domid);
+        return 1;
+    }
+
+    printf("%d\n", acpi_state);
+
+    return 0;
+
+}
+
+int main_uuid(int argc, char **argv)
+{
+    int32_t domid;
+    int opt;
+    char *uuid = NULL;
+
+    SWITCH_FOREACH_OPT(opt, "", NULL, "uuid", 1) {
+        /* No options */
+    }
+
+    uuid = argv[optind];
+
+    if (libxl_uuid_to_domid(ctx, uuid, &domid)){
+        fprintf(stderr, "Can't get domid with domain uuid of '%s', maybe this domain does not          exist.\n", uuid);
+        return 1;
+    }
+
+    printf("%d\n", domid);
+
+    return 0;
+}
+
 int main_rename(int argc, char **argv)
 {
     uint32_t domid;
@@ -106,7 +151,15 @@ int main_trigger(int argc, char **argv)
         }
     }
 
-    libxl_send_trigger(ctx, domid, trigger, vcpuid);
+    if (trigger == LIBXL_TRIGGER_SLEEP){
+        int rc;
+        rc = libxl_domain_sleep(ctx, domid);
+        if(rc){
+            return -1;
+        }
+    } else {
+        libxl_send_trigger(ctx, domid, trigger, vcpuid);
+    }
 
     return EXIT_SUCCESS;
 }
--- a/tools/xl/xl_vmcontrol.c
+++ b/tools/xl/xl_vmcontrol.c
@@ -140,6 +140,39 @@ static void reboot_domain(uint32_t domid
     }
 }
 
+static void hibernate_domain(uint32_t domid,
+                            libxl_evgen_domain_death **deathw,
+                            libxl_ev_user for_user,
+                            int fallback_trigger)
+{
+   int rc;
+   libxl_update_state(ctx, domid, "shutdowning");
+   rc=libxl_domain_hibernate(ctx, domid);
+   if (rc == ERROR_NOPARAVIRT) {
+       if (fallback_trigger) {
+           fprintf(stderr, "PV control interface not available:"
+                   " sending ACPI power button event.\n");
+           rc = libxl_send_trigger(ctx, domid, LIBXL_TRIGGER_HIBERNATE, 0);
+       } else {
+           fprintf(stderr, "PV control interface not available:"
+                   " external graceful hibernate not possible.\n");
+       }
+   }
+
+   if (rc) {
+       fprintf(stderr, "hibernate failed (rc=%d)\n",rc);
+       exit(-1);
+   }
+
+   if (deathw) {
+       rc = libxl_evenable_domain_death(ctx, domid, for_user, deathw);
+       if (rc) {
+           fprintf(stderr,"wait for death failed (evgen, rc=%d)\n",rc);
+           exit(-1);
+       }
+   }
+}
+
 static void shutdown_domain(uint32_t domid,
                             libxl_evgen_domain_death **deathw,
                             libxl_ev_user for_user,
@@ -207,6 +240,43 @@ static void wait_for_domain_deaths(libxl
     }
 }
 
+int main_hibernate(int argc, char **argv)
+{
+
+    void (*fn)(uint32_t domid,
+               libxl_evgen_domain_death **, libxl_ev_user, int) =
+        &hibernate_domain;
+   int opt;
+   int wait_for_it = 0;
+   static struct option opts[] = {
+       {"wait", 0, 0, 'w'}
+   };
+
+   SWITCH_FOREACH_OPT(opt, "w", opts, "hibernate", 0) {
+       case 'w':
+           wait_for_it = 1;
+           break;
+   }
+
+   if (!argv[optind]) {
+       fprintf(stderr, "You must specify a domain id.\n\n");
+       return -1;
+   }
+
+   libxl_evgen_domain_death *deathw = NULL;
+   uint32_t domid = find_domain(argv[optind]);
+
+   /* Set Fallback Trigger to false for now since xen doesn't have a hibernate trigger,
+       but maybe in the future */
+   fn(domid, wait_for_it ? &deathw : NULL, 0, 0);
+
+   if (wait_for_it)
+       wait_for_domain_deaths(&deathw, 1);
+
+   return 0;
+
+}
+
 static int main_shutdown_or_reboot(int do_reboot, int argc, char **argv)
 {
     const char *what = do_reboot ? "reboot" : "shutdown";
