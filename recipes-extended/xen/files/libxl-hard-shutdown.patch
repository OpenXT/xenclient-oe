################################################################################
SHORT DESCRIPTION:
################################################################################
Perform a hard shutdown for domains without a PV control interface.

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################
Authors:
Chris Rogers <rogersc@ainfosec.com>

Disaggregated from libxl-xenmgr-support.patch by:
Troy Crosley <crosleyt@ainfosec.com>

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl.h
+++ b/tools/libxl/libxl.h
@@ -1549,6 +1549,7 @@ int libxl_domain_remus_start(libxl_ctx *
                              const libxl_asyncop_how *ao_how)
                              LIBXL_EXTERNAL_CALLERS_ONLY;
 
+int libxl_hard_shutdown(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_shutdown(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_reboot(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_sleep(libxl_ctx *ctx, uint32_t domid);
--- a/tools/libxl/libxl_domain.c
+++ b/tools/libxl/libxl_domain.c
@@ -703,6 +703,13 @@ static int libxl__domain_pvcontrol(libxl
     return libxl__domain_pvcontrol_write(gc, XBT_NULL, domid, cmd);
 }
 
+int libxl_hard_shutdown(libxl_ctx *ctx, uint32_t domid)
+{
+    int ret;
+    ret = xc_domain_shutdown(ctx->xch, domid, SHUTDOWN_poweroff);
+    return ret;
+}
+
 int libxl_domain_shutdown(libxl_ctx *ctx, uint32_t domid)
 {
     GC_INIT(ctx);
@@ -972,6 +979,8 @@ void libxl__domain_destroy(libxl__egc *e
         dds->stubdom.domid = stubdomid;
         dds->stubdom.callback = stubdom_destroy_callback;
         dds->stubdom.soft_reset = false;
+        libxl__qmp_stop(gc, dds->domid);
+        libxl__qmp_quit(gc, dds->domid);
         libxl__destroy_domid(egc, &dds->stubdom);
     } else {
         dds->stubdom_finished = 1;
--- a/tools/xl/xl_vmcontrol.c
+++ b/tools/xl/xl_vmcontrol.c
@@ -109,7 +109,7 @@ int main_destroy(int argc, char **argv)
 }
 
 static void reboot_domain(uint32_t domid, libxl_evgen_domain_death **deathw,
-                          libxl_ev_user for_user, int fallback_trigger)
+                          libxl_ev_user for_user, int fallback_trigger, int hyper)
 {
     int rc;
 
@@ -177,7 +177,8 @@ static void hibernate_domain(uint32_t do
 static void shutdown_domain(uint32_t domid,
                             libxl_evgen_domain_death **deathw,
                             libxl_ev_user for_user,
-                            int fallback_trigger)
+                            int fallback_trigger,
+                            int hyper)
 {
     int rc;
 
@@ -185,7 +186,11 @@ static void shutdown_domain(uint32_t dom
     libxl_update_state(ctx, domid, "shutdowning");
     rc=libxl_domain_shutdown(ctx, domid);
     if (rc == ERROR_NOPARAVIRT) {
-        if (fallback_trigger) {
+        if (hyper) {
+            fprintf(stderr, "PV control interface not available:"
+                    " asking for hard shutdown.\n");
+            rc = libxl_hard_shutdown(ctx, domid);
+        } else if (fallback_trigger) {
             fprintf(stderr, "PV control interface not available:"
                     " sending ACPI power button event.\n");
             rc = libxl_send_trigger(ctx, domid, LIBXL_TRIGGER_POWER, 0);
@@ -282,10 +287,10 @@ static int main_shutdown_or_reboot(int d
 {
     const char *what = do_reboot ? "reboot" : "shutdown";
     void (*fn)(uint32_t domid,
-               libxl_evgen_domain_death **, libxl_ev_user, int) =
+               libxl_evgen_domain_death **, libxl_ev_user, int, int) =
         do_reboot ? &reboot_domain : &shutdown_domain;
     int opt, i, nb_domain;
-    int wait_for_it = 0, all = 0, nrdeathws = 0;
+    int wait_for_it = 0, all = 0, nrdeathws = 0, hyper = 0;
     int fallback_trigger = 0;
     static struct option opts[] = {
         {"all", 0, 0, 'a'},
@@ -293,7 +298,7 @@ static int main_shutdown_or_reboot(int d
         COMMON_LONG_OPTS
     };
 
-    SWITCH_FOREACH_OPT(opt, "awF", opts, what, 0) {
+    SWITCH_FOREACH_OPT(opt, "awFc", opts, what, 0) {
     case 'a':
         all = 1;
         break;
@@ -303,6 +308,9 @@ static int main_shutdown_or_reboot(int d
     case 'F':
         fallback_trigger = 1;
         break;
+    case 'c':
+        hyper = 1;
+        break;
     }
 
     if (!argv[optind] && !all) {
@@ -325,7 +333,7 @@ static int main_shutdown_or_reboot(int d
             if (dominfo[i].domid == 0 || dominfo[i].never_stop)
                 continue;
             fn(dominfo[i].domid, deathws ? &deathws[i] : NULL, i,
-               fallback_trigger);
+               fallback_trigger, hyper);
             nrdeathws++;
         }
 
@@ -339,7 +347,7 @@ static int main_shutdown_or_reboot(int d
         libxl_evgen_domain_death *deathw = NULL;
         uint32_t domid = find_domain(argv[optind]);
 
-        fn(domid, wait_for_it ? &deathw : NULL, 0, fallback_trigger);
+        fn(domid, wait_for_it ? &deathw : NULL, 0, fallback_trigger, hyper);
 
         if (wait_for_it)
             wait_for_domain_deaths(&deathw, 1);
@@ -769,8 +777,10 @@ int create_domain(struct domain_create *
     int notify_pipe[2] = { -1, -1 };
     struct save_file_header hdr;
     uint32_t domid_soft_reset = INVALID_DOMID;
+    int restoring;
 
-    int restoring = (restore_file || (migrate_fd >= 0));
+start:
+    restoring = (restore_file || (migrate_fd >= 0));
 
     libxl_domain_config_init(&d_config);
 
@@ -967,7 +977,6 @@ int create_domain(struct domain_create *
     if (dom_info->dryrun)
         goto out;
 
-start:
     assert(domid == INVALID_DOMID);
 
     rc = acquire_lock();
@@ -1161,8 +1170,6 @@ start:
                  */
                 dom_info->console_autoconnect = 0;
 
-                /* Some settings only make sense on first boot. */
-                paused = 0;
                 if (common_domname
                     && strcmp(d_config.c_info.name, common_domname)) {
                     d_config.c_info.name = strdup(common_domname);
--- a/tools/libxl/libxl_qmp.c
+++ b/tools/libxl/libxl_qmp.c
@@ -1019,6 +1019,11 @@ int libxl__qmp_system_wakeup(libxl__gc *
     return qmp_run_command(gc, domid, "system_wakeup", NULL, NULL, NULL);
 }
 
+int libxl__qmp_quit(libxl__gc *gc, int domid)
+{
+    return qmp_run_command(gc, domid, "quit", NULL, NULL, NULL);
+}
+
 int libxl__qmp_restore(libxl__gc *gc, int domid, const char *state_file)
 {
     libxl__json_object *args = NULL;
@@ -1047,6 +1052,11 @@ static int qmp_change(libxl__gc *gc, lib
     return rc;
 }
 
+int libxl__qmp_stop(libxl__gc *gc, int domid)
+{
+    return qmp_run_command(gc, domid, "stop", NULL, NULL, NULL);
+}
+
 int libxl__qmp_resume(libxl__gc *gc, int domid)
 {
     return qmp_run_command(gc, domid, "cont", NULL, NULL, NULL);
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -1976,6 +1976,10 @@ _hidden int libxl__qmp_pci_del(libxl__gc
                                libxl_device_pci *pcidev);
 /* Resume hvm domain */
 _hidden int libxl__qmp_system_wakeup(libxl__gc *gc, int domid);
+/* Exit QEMU */
+_hidden int libxl__qmp_quit(libxl__gc *gc, int domid);
+/* Suspend QEMU. */
+_hidden int libxl__qmp_stop(libxl__gc *gc, int domid);
 /* Resume QEMU. */
 _hidden int libxl__qmp_resume(libxl__gc *gc, int domid);
 /* Load current QEMU state from file. */
