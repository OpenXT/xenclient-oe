################################################################################
SHORT DESCRIPTION:
################################################################################
implement iso hotswap

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################
Authors: Chris Rogers <rogersc@ainfosec.com>
         Mahantesh Salimath <salimathm@ainfosec.com>
################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl.h
+++ b/tools/libxl/libxl.h
@@ -1883,6 +1883,9 @@ libxl_device_usbdev_list(libxl_ctx *ctx,
 
 void libxl_device_usbdev_list_free(libxl_device_usbdev *list, int nr);
 
+int libxl_cdrom_change(libxl_ctx *ctx, uint32_t domid, char * iso, libxl_device_disk *disk, char *vdev,
+                       const libxl_asyncop_how *ao_how)
+                       LIBXL_EXTERNAL_CALLERS_ONLY;
 /* Network Interfaces */
 int libxl_device_nic_add(libxl_ctx *ctx, uint32_t domid, libxl_device_nic *nic,
                          const libxl_asyncop_how *ao_how)
--- a/tools/libxl/libxl_blktap2.c
+++ b/tools/libxl/libxl_blktap2.c
@@ -23,6 +23,18 @@ int libxl__blktap_enabled(libxl__gc *gc)
     return !tap_ctl_check(&msg);
 }
 
+int libxl__get_tap_minor(libxl__gc *gc, libxl_disk_format format, const char *disk)
+{
+    const char *type = NULL;
+    tap_list_t tap;
+
+    memset(&tap, 0, sizeof(tap_list_t));
+
+    type = libxl__device_disk_string_of_format(format);
+    tap_ctl_find(type, disk, &tap);
+    return tap.minor;
+}
+
 char *libxl__blktap_devpath(libxl__gc *gc,
                             const char *disk,
                             libxl_disk_format format)
@@ -51,7 +63,7 @@ char *libxl__blktap_devpath(libxl__gc *g
     return NULL;
 }
 
-static bool tapdev_is_shared(libxl__gc *gc, const char *params)
+bool tapdev_is_shared(libxl__gc *gc, const char *params)
 {
     char **domids, **vbds;
     char *tp;
--- a/tools/libxl/libxl_device.c
+++ b/tools/libxl/libxl_device.c
@@ -18,7 +18,7 @@
 
 #include "libxl_internal.h"
 
-static char *libxl__device_frontend_path(libxl__gc *gc, libxl__device *device)
+char *libxl__device_frontend_path(libxl__gc *gc, libxl__device *device)
 {
     char *dom_path = libxl__xs_get_dompath(gc, device->domid);
 
--- a/tools/libxl/libxl_disk.c
+++ b/tools/libxl/libxl_disk.c
@@ -670,25 +670,140 @@ int libxl_device_disk_getinfo(libxl_ctx
     return rc;
 }
 
+int libxl_cdrom_change(libxl_ctx *ctx, uint32_t domid, char *iso, libxl_device_disk *olddisk, char *vdev,
+                       const libxl_asyncop_how *ao_how)
+{
+    AO_CREATE(ctx, domid, ao_how);
+    int rc = -1;
+    libxl__device device;
+    libxl_device_disk disk_empty;
+    xs_transaction_t t = XBT_NULL;
+    char *devpath = NULL;
+    char *be_path = NULL;
+    char *fe_path = NULL;
+    char *tmp = NULL;
+    uint32_t stubdomid = libxl_get_stubdom_id(ctx, domid);
+    libxl__domain_userdata_lock *lock = NULL;
+
+    memset(&device, 0, sizeof(libxl__device));
+    memset(&disk_empty, 0, sizeof(libxl_device_disk));
+
+    struct xs_permissions roperm[2];
+    roperm[0].id = 0;
+    roperm[0].perms = XS_PERM_NONE;
+    roperm[1].id = stubdomid;
+    roperm[1].perms = XS_PERM_READ;
+
+    /* get our empty disk setup */
+    libxl_device_disk_init(&disk_empty);
+    disk_empty.format = LIBXL_DISK_FORMAT_EMPTY;
+    disk_empty.vdev = libxl__strdup(NOGC, olddisk->vdev);
+    disk_empty.pdev_path = libxl__strdup(NOGC, "");
+    disk_empty.is_cdrom = 1;
+    libxl__device_disk_setdefault(gc, stubdomid, &disk_empty, true);
+
+    lock = libxl__lock_domain_userdata(gc, stubdomid);
+    if (!lock) {
+        rc = ERROR_LOCK_FAIL;
+        goto out;
+    }
+
+    /* tap iso, if it's already tapped it will return the existing tap */
+    devpath = libxl__blktap_devpath(gc, iso, LIBXL_DISK_FORMAT_EMPTY, "/config/platform-crypto-keys");
+
+    rc = libxl__device_from_disk(gc, stubdomid, olddisk, &device);
+    if (rc){
+        fprintf(stderr, "can't create device from disk\n");
+        goto out;
+    }
+    /* insert empty cdrom */
+    libxl__qmp_insert_cdrom(gc, domid, &disk_empty);
+
+    be_path = libxl__device_backend_path(gc, &device);
+    fe_path = libxl__device_frontend_path(gc, &device);
+
+    /* disconnect iso for now */
+    do {
+        t = xs_transaction_start(ctx->xsh);
+        tmp = libxl__xs_read(gc, t, libxl__sprintf(gc, "%s/tapdisk-params", be_path));
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/online", be_path), "%s", "0");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/state", be_path), "%s", "5");
+    } while (xs_transaction_end(ctx->xsh, t, false) == false && errno == EAGAIN);
+
+    /* make sure we're disconnected */
+    rc = libxl__wait_for_backend(gc, be_path, GCSPRINTF("%d", XenbusStateClosed));
+    if (rc < 0)
+        goto out;
+
+    /* Destroy old xenbus */
+    do {
+        t = xs_transaction_start(ctx->xsh);
+        libxl__xs_rm_checked(gc, t, be_path);
+        libxl__xs_rm_checked(gc, t, fe_path);
+    } while (xs_transaction_end(ctx->xsh, t, false) == false && errno == EAGAIN);
+
+    /* cleanup old tap if it's not shared with anyone else */
+    if(!tapdev_is_shared(gc, tmp))
+        libxl__device_destroy_tapdisk(gc, tmp, stubdomid);
+
+    /*write new device */
+    do {
+        t = xs_transaction_start(ctx->xsh);
+        xs_mkdir(ctx->xsh, t, be_path);
+        xs_set_permissions(ctx->xsh, t, be_path, roperm, ARRAY_SIZE(roperm));
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/params", be_path), "%s", devpath);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/type", be_path), "%s", "phy");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/physical-device", be_path), "fe:%x", libxl__get_tap_minor(gc, LIBXL_DISK_FORMAT_EMPTY, iso));
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/frontend", be_path), "%s", fe_path);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/device-type", be_path), "%s", "cdrom");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/online", be_path), "%s", "1");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/state", be_path), "%s", "1");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/removable", be_path), "%s", "1");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/mode", be_path), "%s", "r");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/frontend-id", be_path), "%u", stubdomid);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/dev", be_path), "%s", "hdc");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/tapdisk-params", be_path), "%s", libxl__sprintf(gc, "aio:%s", iso));
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/hotplug-status", be_path), "%s", "connected");
+
+        roperm[0].id = stubdomid;
+        roperm[1].id = 0;
+        xs_mkdir(ctx->xsh, t, fe_path);
+        xs_set_permissions(ctx->xsh, t, fe_path, roperm, ARRAY_SIZE(roperm));
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/state", fe_path), "%s", "1");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/backend-id", fe_path), "%s", "0");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/backend", fe_path), "%s", be_path);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/virtual-device", fe_path), "%s", vdev);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/device-type", fe_path), "%s", "cdrom");
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/backend-uuid", fe_path), "%s", "00000000-0000-0000-0000-000000000000");
+     } while (xs_transaction_end(ctx->xsh, t, false) == false && errno == EAGAIN);
+
+    rc = libxl__wait_for_backend(gc, be_path, GCSPRINTF("%d", XenbusStateConnected));
+    if (rc < 0)
+        goto out;
+
+    /* tell qemu to remount /dev/xvdc */
+    libxl__qmp_change_cdrom(gc, domid, olddisk);
+
+    libxl__ao_complete(egc, ao, 0);
+out:
+    if (lock) libxl__unlock_domain_userdata(lock);
+    if (rc) return AO_CREATE_FAIL(rc);
+    return AO_INPROGRESS;
+}
+
 int libxl_cdrom_insert(libxl_ctx *ctx, uint32_t domid, libxl_device_disk *disk,
                        const libxl_asyncop_how *ao_how)
 {
     AO_CREATE(ctx, domid, ao_how);
     int num = 0, i;
-    libxl_device_disk *disks = NULL, disk_saved, disk_empty;
-    libxl_domain_config d_config;
+    libxl_device_disk *disks = NULL, disk_empty;
     int rc, dm_ver;
     libxl__device device;
     const char *be_path, *libxl_path;
-    char * tmp;
     libxl__domain_userdata_lock *lock = NULL;
     xs_transaction_t t = XBT_NULL;
-    flexarray_t *insert = NULL, *empty = NULL;
 
-    libxl_domain_config_init(&d_config);
     libxl_device_disk_init(&disk_empty);
-    libxl_device_disk_init(&disk_saved);
-    libxl_device_disk_copy(ctx, &disk_saved, disk);
 
     disk_empty.format = LIBXL_DISK_FORMAT_EMPTY;
     disk_empty.vdev = libxl__strdup(NOGC, disk->vdev);
@@ -729,43 +844,18 @@ int libxl_cdrom_insert(libxl_ctx *ctx, u
             break;
         }
     }
+
     if (i == num) {
         LOGD(ERROR, domid, "Virtual device not found");
         rc = ERROR_FAIL;
         goto out;
     }
 
-    rc = libxl__device_disk_setdefault(gc, domid, disk, false);
-    if (rc) goto out;
-
     if (!disk->pdev_path) {
         disk->pdev_path = libxl__strdup(NOGC, "");
         disk->format = LIBXL_DISK_FORMAT_EMPTY;
     }
 
-    rc = libxl__device_from_disk(gc, domid, disk, &device);
-    if (rc) goto out;
-
-    be_path = libxl__device_backend_path(gc, &device);
-    libxl_path = libxl__device_libxl_path(gc, &device);
-
-    insert = flexarray_make(gc, 4, 1);
-
-    flexarray_append_pair(insert, "type",
-                          libxl__device_disk_string_of_backend(disk->backend));
-    if (disk->format != LIBXL_DISK_FORMAT_EMPTY)
-        flexarray_append_pair(insert, "params",
-                        GCSPRINTF("%s:%s",
-                            libxl__device_disk_string_of_format(disk->format),
-                            disk->pdev_path));
-    else
-        flexarray_append_pair(insert, "params", "");
-
-    empty = flexarray_make(gc, 4, 1);
-    flexarray_append_pair(empty, "type",
-                          libxl__device_disk_string_of_backend(disk->backend));
-    flexarray_append_pair(empty, "params", "");
-
     /* Note: CTX lock is already held at this point so lock hierarchy
      * is maintained.
      */
@@ -783,85 +873,39 @@ int libxl_cdrom_insert(libxl_ctx *ctx, u
         if (rc) goto out;
     }
 
-    for (;;) {
-        rc = libxl__xs_transaction_start(gc, &t);
-        if (rc) goto out;
-        /* Sanity check: make sure the device exists before writing here */
-        tmp = libxl__xs_read(gc, t, GCSPRINTF("%s/frontend", libxl_path));
-        if (!tmp)
-        {
-            LOGD(ERROR, domid, "Internal error: %s does not exist",
-                 GCSPRINTF("%s/frontend", libxl_path));
-            rc = ERROR_FAIL;
-            goto out;
-        }
-
-        char **kvs = libxl__xs_kvs_of_flexarray(gc, empty);
-
-        rc = libxl__xs_writev(gc, t, be_path, kvs);
-        if (rc) goto out;
-
-        rc = libxl__xs_writev(gc, t, libxl_path, kvs);
-        if (rc) goto out;
-
-        rc = libxl__xs_transaction_commit(gc, &t);
-        if (!rc) break;
-        if (rc < 0) goto out;
+    rc = libxl__device_from_disk(gc, domid, disk, &device);
+    if (rc){
+        fprintf(stderr, "can't create device from disk\n");
+        goto out;
     }
 
-    rc = libxl__get_domain_configuration(gc, domid, &d_config);
-    if (rc) goto out;
-
-    device_add_domain_config(gc, &d_config, &libxl__disk_devtype, &disk_saved);
+    be_path = libxl__device_backend_path(gc, &device);
+    libxl_path = libxl__device_libxl_path(gc, &device);
 
-    rc = libxl__dm_check_start(gc, &d_config, domid);
-    if (rc) goto out;
+    /* Update the xenstore with new disk params */
+    do {
+        t = xs_transaction_start(ctx->xsh);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/params", be_path), "%s", disk->pdev_path);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/physical-device-path", be_path), "%s", disk->pdev_path);
+        libxl__xs_printf(gc, t, libxl__sprintf(gc, "%s/params", libxl_path), "%s", disk->pdev_path);
+     } while (xs_transaction_end(ctx->xsh, t, false) == false && errno == EAGAIN);
 
+    /* We need to change the disk now. This is implemented
+     * by inserting a non-empty disk.
+     */
     if (dm_ver == LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN) {
         rc = libxl__qmp_insert_cdrom(gc, domid, disk);
         if (rc) goto out;
     }
 
-    for (;;) {
-        rc = libxl__xs_transaction_start(gc, &t);
-        if (rc) goto out;
-        /* Sanity check: make sure the device exists before writing here */
-        tmp = libxl__xs_read(gc, t, GCSPRINTF("%s/frontend", libxl_path));
-        if (!tmp)
-        {
-            LOGD(ERROR, domid, "Internal error: %s does not exist",
-                 GCSPRINTF("%s/frontend", libxl_path));
-            rc = ERROR_FAIL;
-            goto out;
-        }
-
-        rc = libxl__set_domain_configuration(gc, domid, &d_config);
-        if (rc) goto out;
-
-        char **kvs = libxl__xs_kvs_of_flexarray(gc, insert);
-
-        rc = libxl__xs_writev(gc, t, be_path, kvs);
-        if (rc) goto out;
-
-        rc = libxl__xs_writev(gc, t, libxl_path, kvs);
-        if (rc) goto out;
-
-        rc = libxl__xs_transaction_commit(gc, &t);
-        if (!rc) break;
-        if (rc < 0) goto out;
-    }
-
     /* success, no actual async */
     libxl__ao_complete(egc, ao, 0);
 
     rc = 0;
 
 out:
-    libxl__xs_transaction_abort(gc, &t);
     libxl__device_list_free(&libxl__disk_devtype, disks, num);
     libxl_device_disk_dispose(&disk_empty);
-    libxl_device_disk_dispose(&disk_saved);
-    libxl_domain_config_dispose(&d_config);
 
     if (lock) libxl__unlock_domain_userdata(lock);
 
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -1235,6 +1235,7 @@ _hidden int libxl__device_exists(libxl__
 _hidden int libxl__device_generic_add(libxl__gc *gc, xs_transaction_t t,
         libxl__device *device, char **bents, char **fents, char **ro_fents);
 _hidden char *libxl__device_backend_path(libxl__gc *gc, libxl__device *device);
+_hidden char *libxl__device_frontend_path(libxl__gc *gc, libxl__device *device);
 _hidden char *libxl__device_libxl_path(libxl__gc *gc, libxl__device *device);
 _hidden int libxl__parse_backend_path(libxl__gc *gc, const char *path,
                                       libxl__device *dev);
@@ -1771,6 +1772,9 @@ _hidden char *libxl__blktap_devpath(libx
                                     const char *disk,
                                     libxl_disk_format format);
 
+_hidden int libxl__get_tap_minor(libxl__gc *gc, libxl_disk_format format, const char *disk);
+_hidden bool tapdev_is_shared(libxl__gc *gc, const char *params);
+
 /* libxl__device_destroy_tapdisk:
  *   Destroys any tapdisk process associated with the backend represented
  *   by be_path.
@@ -1838,6 +1842,7 @@ _hidden int libxl__qmp_restore(libxl__gc
 /* Set dirty bitmap logging status */
 _hidden int libxl__qmp_set_global_dirty_log(libxl__gc *gc, int domid, bool enable);
 _hidden int libxl__qmp_insert_cdrom(libxl__gc *gc, int domid, const libxl_device_disk *disk);
+_hidden int libxl__qmp_change_cdrom(libxl__gc *gc, int domid, const libxl_device_disk *disk);
 /* Add a virtual CPU */
 _hidden int libxl__qmp_cpu_add(libxl__gc *gc, int domid, int index);
 /* Query the bitmap of CPUs */
--- a/tools/libxl/libxl_qmp.c
+++ b/tools/libxl/libxl_qmp.c
@@ -975,6 +975,17 @@ int libxl__qmp_set_global_dirty_log(libx
                            NULL, NULL);
 }
 
+int libxl__qmp_change_cdrom(libxl__gc *gc, int domid,
+							const libxl_device_disk *disk)
+{
+    libxl__json_object *args = NULL;
+    int dev_number = libxl__device_disk_dev_number(disk->vdev, NULL, NULL);
+
+    QMP_PARAMETERS_SPRINTF(&args, "device", "ide-%i", dev_number);
+    qmp_parameters_add_string(gc, &args, "target", "/dev/xvdc");
+    return qmp_run_command(gc, domid, "change", args, NULL, NULL);
+}
+
 int libxl__qmp_insert_cdrom(libxl__gc *gc, int domid,
                             const libxl_device_disk *disk)
 {
@@ -984,6 +995,7 @@ int libxl__qmp_insert_cdrom(libxl__gc *g
     QMP_PARAMETERS_SPRINTF(&args, "device", "ide-%i", dev_number);
 
     if (disk->format == LIBXL_DISK_FORMAT_EMPTY) {
+        qmp_parameters_add_bool(gc, &args, "force", true);
         return qmp_run_command(gc, domid, "eject", args, NULL, NULL);
     } else {
         qmp_parameters_add_string(gc, &args, "target", disk->pdev_path);
--- a/tools/libxl/libxl_utils.c
+++ b/tools/libxl/libxl_utils.c
@@ -1383,6 +1383,12 @@ int libxl__random_bytes(libxl__gc *gc, u
     return ret;
 }
 
+int libxl_util_xs_read(libxl_ctx *ctx, char *path, char **out)
+{
+    *out = xs_read(ctx->xsh, XBT_NULL, path, NULL);
+    return 0;
+}
+
 /*
  * Local variables:
  * mode: C
--- a/tools/libxl/libxl_utils.h
+++ b/tools/libxl/libxl_utils.h
@@ -174,6 +174,8 @@ int libxl_cpumap_to_nodemap(libxl_ctx *c
                             const libxl_bitmap *cpumap,
                             libxl_bitmap *nodemap);
 
+int libxl_util_xs_read(libxl_ctx *ctx, char *path, char **out);
+
  static inline uint32_t libxl__sizekb_to_mb(uint32_t s) {
     return (s + 1023) / 1024;
 }
--- a/tools/xl/xl_cdrom.c
+++ b/tools/xl/xl_cdrom.c
@@ -32,36 +32,86 @@ static int cd_insert(uint32_t domid, con
     XLU_Config *config = 0;
     struct stat b;
     int r;
+    uint32_t stubdomid = 0;
+    int i, nb, devid = -1;
+    libxl_device_disk *disks = NULL;
+    libxl_device_disk olddisk;
+    libxl_diskinfo diskinfo;
+    char *dev = NULL;
+    char *strdevid = NULL;
+    char *xspath = NULL;
+
+    memset(&diskinfo, 0, sizeof(libxl_diskinfo));
+    memset(&olddisk, 0, sizeof(libxl_device_disk));
 
     xasprintf(&buf, "vdev=%s,access=r,devtype=cdrom,target=%s",
               virtdev, phys ? phys : "");
 
     parse_disk_config(&config, buf, &disk);
 
-    /* ATM the existence of the backing file is not checked for qdisk
-     * in libxl_cdrom_insert() because RAW is used for remote
-     * protocols as well as plain files.  This will ideally be changed
-     * for 4.4, but this work-around fixes the problem of "cd-insert"
-     * returning success for non-existent files. */
-    if (disk.format != LIBXL_DISK_FORMAT_EMPTY
-        && stat(disk.pdev_path, &b)) {
-        fprintf(stderr, "Cannot stat file: %s\n",
-                disk.pdev_path);
-        r = 1;
-        goto out;
-    }
+    stubdomid = libxl_get_stubdom_id(ctx, domid);
 
-    if (libxl_cdrom_insert(ctx, domid, &disk, NULL)) {
-        r = 1;
-        goto out;
+    /* If stubdom, protocol changes slightly. Retap new iso in dom0,
+     * send qmp message to stubdom to change cdrom medium using blkfront
+     * target */
+    if (stubdomid > 0) {
+        disks = libxl_device_disk_list(ctx, stubdomid, &nb);
+        if (disks) {
+            for (i=0; i<nb; i++) {
+                if (!libxl_device_disk_getinfo(ctx, stubdomid, &disks[i], &diskinfo)) {
+                    xasprintf(&xspath, "%s/dev", diskinfo.backend);
+                    if (!xspath) {
+                        r = 0;
+                        goto out;
+                    }
+                    libxl_util_xs_read(ctx, xspath, &dev);
+                    if (!dev) {
+                        r = 0;
+                        goto out;
+                    }
+                    if (!strcmp(dev, "hdc"))
+                        devid = diskinfo.devid;
+                    libxl_diskinfo_dispose(&diskinfo);
+                }
+                libxl_device_disk_dispose(&disks[i]);
+            }
+            free(disks);
+        }
+        xasprintf(&strdevid, "%d", devid);
+
+        libxl_vdev_to_device_disk(ctx, stubdomid, strdevid, &olddisk);
+
+        libxl_cdrom_change(ctx, domid, phys, &olddisk, strdevid, NULL);
+
+    } else {
+        /* ATM the existence of the backing file is not checked for qdisk
+         * in libxl_cdrom_insert() because RAW is used for remote
+         * protocols as well as plain files.  This will ideally be changed
+         * for 4.4, but this work-around fixes the problem of "cd-insert"
+         * returning success for non-existent files. */
+        if (disk.format != LIBXL_DISK_FORMAT_EMPTY
+            && stat(disk.pdev_path, &b)) {
+            fprintf(stderr, "Cannot stat file: %s\n",
+                    disk.pdev_path);
+            r = 1;
+            goto out;
+        }
+
+        if (libxl_cdrom_insert(ctx, domid, &disk, NULL)) {
+            r = 1;
+            goto out;
+        }
     }
-
     r = 0;
-
 out:
     libxl_device_disk_dispose(&disk);
     free(buf);
-
+    if (dev)
+        free(dev);
+    if (strdevid)
+        free(strdevid);
+    if (xspath)
+        free(xspath);
     return r;
 }
 
