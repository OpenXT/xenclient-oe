################################################################################
SHORT DESCRIPTION:
################################################################################
Use an initramfs instead of a disk for Linux stubdomains created by LibXL

################################################################################
LONG DESCRIPTION:
################################################################################
As implemented by the original RFC, LibXL expects Linux stubdomains to use a
disk, with a qemu qdisk backend in dom0.
This is not desired in OpenXT, instead we pack the whole rootfs as an initramfs.

################################################################################
CHANGELOG
################################################################################
Authors:
Martin Osterloh <osterlohm@ainfosec.com>
Jed Lejosne <lejosnej@ainfosec.com>

################################################################################
REMOVAL
################################################################################
Probably not desired.

################################################################################
UPSTREAM PLAN
################################################################################
This is specific to OpenXT, but could be upstreamed as an option.

################################################################################
INTERNAL DEPENDENCIES
################################################################################
libxl-RFC-*.patch

################################################################################
PATCHES
################################################################################
Index: xen-4.6.4/tools/libxl/libxl_dm.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_dm.c
+++ xen-4.6.4/tools/libxl/libxl_dm.c
@@ -1199,7 +1199,7 @@ static int libxl__build_device_model_arg
                     if (b_info->stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX)
                         drive = libxl__sprintf
                                 (gc, "file=%s%c,if=ide,index=%d,media=disk,cache=writeback,format=%s",
-                                 "/dev/xvd", 'a' + disk, disk, "host_device");
+                                 "/dev/xvd", 'a' + disk, disk, format);
                     else
                         drive = libxl__sprintf
                                 (gc, "file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback",
@@ -1402,7 +1402,6 @@ void libxl__spawn_stub_dm(libxl__egc *eg
     char **args;
     struct xs_permissions perm[2];
     xs_transaction_t t;
-    libxl_device_disk disk_stub;
 
     /* convenience aliases */
     libxl_domain_config *const dm_config = &sdss->dm_config;
@@ -1491,20 +1490,12 @@ void libxl__spawn_stub_dm(libxl__egc *eg
         stubdom_state->pv_ramdisk.path = "";
         break;
     case LIBXL_STUBDOMAIN_VERSION_LINUX:
-        libxl_device_disk_init(&disk_stub);
-        disk_stub.readwrite = 0;
-        disk_stub.format = LIBXL_DISK_FORMAT_RAW;
-        disk_stub.is_cdrom = 0;
-        disk_stub.vdev = "xvdz";
-        disk_stub.pdev_path = libxl__abs_path(gc, "stubdom-disk.img",
-                                              libxl__xenfirmwaredir_path());
-        ret = libxl__device_disk_setdefault(gc, &disk_stub);
-        if (ret) goto out;
+        /* OpenXT: the stubdomain rootfs is in an initramfs, not a disk */
         stubdom_state->pv_kernel.path
-            = libxl__abs_path(gc, "vmlinuz-stubdom", libxl__xenfirmwaredir_path());
-        stubdom_state->pv_cmdline
-            = "debug console=hvc0 root=/dev/xvdz ro init=/init";
-        stubdom_state->pv_ramdisk.path = "";
+            = libxl__abs_path(gc, "stubdomain-bzImage",
+                              libxl__xenfirmwaredir_path());
+        stubdom_state->pv_ramdisk.path = libxl__abs_path(gc, "stubdomain-initramfs",
+                                                         libxl__xenfirmwaredir_path());
         break;
     default:
         abort();
@@ -1579,10 +1570,7 @@ retry_transaction:
 
     libxl__multidev_begin(ao, &sdss->multidev);
     sdss->multidev.callback = spawn_stub_launch_dm;
-    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
-        libxl__ao_device *aodev = libxl__multidev_prepare(&sdss->multidev);
-        libxl__device_disk_add(egc, dm_domid, &disk_stub, aodev);
-    }
+    /* OpenXT: Again, no disk for the stubdom itself */
     libxl__add_disks(egc, ao, dm_domid, dm_config, &sdss->multidev);
     libxl__multidev_prepared(egc, &sdss->multidev, 0);
 
@@ -1691,6 +1679,12 @@ static void spawn_stub_launch_dm(libxl__
     sdss->pvqemu.build_state = &sdss->dm_state;
     sdss->pvqemu.callback = spawn_stubdom_pvqemu_cb;
 
+    /* OpenXT: stubdom have no disk backend, so we have to trigger the spawn callback manually */
+    if (libxl_defbool_val(guest_config->b_info.device_model_stubdomain)) {
+        spawn_stubdom_pvqemu_cb(egc, &sdss->pvqemu, 0);
+        return;
+    }
+
     libxl__spawn_local_dm(egc, &sdss->pvqemu);
 
     return;
@@ -1724,42 +1718,6 @@ out:
     stubdom_pvqemu_cb(egc, &sdss->multidev, rc);
 }
 
-static void stub_dm_watch_event(libxl__egc *egc, libxl__xswait_state *xswa,
-                                int rc, const char *p)
-{
-    EGC_GC;
-    libxl__spawn_state *spawn = CONTAINER_OF(xswa, libxl__spawn_state, xswait);
-    libxl__dm_spawn_state *pvqemu =
-        CONTAINER_OF(spawn, libxl__dm_spawn_state, spawn);
-    libxl__stub_dm_spawn_state *sdss =
-        CONTAINER_OF(pvqemu, libxl__stub_dm_spawn_state, pvqemu);
-    uint32_t dm_domid = sdss->pvqemu.guest_domid;
-
-    if (rc) {
-        if (rc == ERROR_TIMEDOUT)
-           LIBXL__LOG(CTX, XTL_DEBUG, "%s: startup timed out", xswa->what);
-        if (dm_domid) {
-            sdss->dis.ao = sdss->dm.spawn.ao;
-            sdss->dis.domid = dm_domid;
-            /* FIXME: the following line references a non-existent function,
-             *   even without the typo. Commenting out for now.
-             */
-            /* sdss->dis.callback = spaw_stubdom_pvqemu_destroy_cb; */
-            libxl__destroy_domid(egc, &sdss->dis);
-        }
-       return;
-    }
-
-    if (!p)
-        return;
-
-    if (strcmp(p, "running"))
-        return;
-
-    libxl__xswait_stop(gc, xswa);
-    sdss->callback(egc, &sdss->dm, rc);
-}
-
 static void stubdom_pvqemu_cb(libxl__egc *egc,
                               libxl__multidev *multidev,
                               int rc)
@@ -1776,16 +1734,7 @@ static void stubdom_pvqemu_cb(libxl__egc
         goto out;
     }
 
-    /* wait for PV stubdom QEMU instance to be ready */
-    libxl__xswait_init(xswait);
-    xswait->ao = sdss->dm.spawn.ao;
-    xswait->what = GCSPRINTF("stub domain %d startup", dm_domid);
-    xswait->path = GCSPRINTF("/local/domain/0/device-model/%d/state",
-                             sdss->dm.guest_domid);
-    xswait->timeout_ms = LIBXL_DEVICE_MODEL_START_TIMEOUT * 1000;
-    xswait->callback = stub_dm_watch_event;
-    rc = libxl__xswait_start(gc, xswait);
-    if (rc) goto out;
+    /* OpenXT: no need to wait for a dom0 device model, there's none. */
 
     rc = libxl_domain_unpause(CTX, dm_domid);
     if (rc) goto out;
