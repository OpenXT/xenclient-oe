################################################################################
SHORT DESCRIPTION:
################################################################################
Log to syslog instead of logfiles

################################################################################
LONG DESCRIPTION:
################################################################################
LibXL only has one way to log messages, which uses log files.
In OpenXT, we want all logs to go through syslog.
This patch does that.

################################################################################
CHANGELOG
################################################################################
Authors:
Jed Lejosne <lejosnej@ainfosec.com>

Updated for Xen 4.9

################################################################################
REMOVAL
################################################################################
If syslog support gets added upstream, we should remove this patch

################################################################################
UPSTREAM PLAN
################################################################################
As is it, this patch is not upstream-able.
Givent the opportunity, we could make it right (adding an option to choose files
or syslog) and then upstream it.

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_dm.c
+++ b/tools/libxl/libxl_dm.c
@@ -44,27 +44,6 @@ static const char *qemu_xen_path(libxl__
     return QEMU_XEN_PATH;
 }
 
-static int libxl__create_qemu_logfile(libxl__gc *gc, char *name)
-{
-    char *logfile;
-    int rc, logfile_w;
-
-    rc = libxl_create_logfile(CTX, name, &logfile);
-    if (rc) return rc;
-
-    logfile_w = open(logfile, O_WRONLY|O_CREAT|O_APPEND, 0644);
-
-    if (logfile_w < 0) {
-        LOGE(ERROR, "unable to open Qemu logfile: %s", logfile);
-        free(logfile);
-        return ERROR_FAIL;
-    }
-
-    free(logfile);
-
-    return logfile_w;
-}
-
 /*
  *  userlookup_helper_getpwnam(libxl__gc*, const char *user,
  *                             struct passwd **pwd_r);
@@ -2481,11 +2460,10 @@ void libxl__spawn_local_dm(libxl__egc *e
 
     libxl_ctx *ctx = CTX;
     libxl_domain_config *guest_config = dmss->guest_config;
-    const libxl_domain_create_info *c_info = &guest_config->c_info;
     const libxl_domain_build_info *b_info = &guest_config->b_info;
     const libxl_vnc_info *vnc = libxl__dm_vnc(guest_config);
     char *path;
-    int logfile_w, null;
+    int null;
     int rc;
     char **args, **arg, **envs;
     xs_transaction_t t;
@@ -2556,12 +2534,6 @@ void libxl__spawn_local_dm(libxl__egc *e
         libxl__xs_printf(gc, XBT_NULL, GCSPRINTF("%s/disable_pf", path),
                          "%d", !libxl_defbool_val(b_info->u.hvm.xen_platform_pci));
 
-    logfile_w = libxl__create_qemu_logfile(gc, GCSPRINTF("qemu-dm-%s",
-                                                         c_info->name));
-    if (logfile_w < 0) {
-        rc = logfile_w;
-        goto out;
-    }
     null = open("/dev/null", O_RDONLY);
     if (null < 0) {
         LOGED(ERROR, domid, "unable to open /dev/null");
@@ -2639,14 +2611,13 @@ retry_transaction:
             if (rc)
                 _exit(-1);
         }
-        libxl__exec(gc, null, logfile_w, logfile_w, dm, args, envs);
+        libxl__exec(gc, null, null, null, dm, args, envs);
     }
 
     rc = 0;
 
 out_close:
     if (null >= 0) close(null);
-    if (logfile_w >= 0) close(logfile_w);
 out:
     if (dm_state_fd >= 0) close(dm_state_fd);
     if (rc)
@@ -2778,7 +2749,7 @@ void libxl__spawn_qdisk_backend(libxl__e
     flexarray_t *dm_args, *dm_envs;
     char **args, **envs;
     const char *dm;
-    int logfile_w, null = -1, rc;
+    int null = -1, rc;
     uint32_t domid = dmss->guest_domid;
 
     dmss_init(dmss);
@@ -2805,11 +2776,6 @@ void libxl__spawn_qdisk_backend(libxl__e
     libxl__set_qemu_env_for_xsa_180(gc, dm_envs);
     envs = (char **) flexarray_contents(dm_envs);
 
-    logfile_w = libxl__create_qemu_logfile(gc, GCSPRINTF("qdisk-%u", domid));
-    if (logfile_w < 0) {
-        rc = logfile_w;
-        goto out;
-    }
     null = open("/dev/null", O_RDONLY);
     if (null < 0) {
        rc = ERROR_FAIL;
@@ -2842,13 +2808,12 @@ void libxl__spawn_qdisk_backend(libxl__e
         goto out;
     if (!rc) { /* inner child */
         setsid();
-        libxl__exec(gc, null, logfile_w, logfile_w, dm, args, envs);
+        libxl__exec(gc, null, null, null, dm, args, envs);
     }
 
     rc = 0;
 out:
     dmss_dispose(gc, dmss);
-    if (logfile_w >= 0) close(logfile_w);
     if (null >= 0) close(null);
     /* callback on error only, success goes via dmss->spawn.*_cb */
     if (rc) dmss->callback(egc, dmss, rc);
--- a/tools/libxl/libxl_internal.c
+++ b/tools/libxl/libxl_internal.c
@@ -211,6 +211,34 @@ char *libxl__dirname(libxl__gc *gc, cons
     return libxl__strndup(gc, s, c - s);
 }
 
+static int xtl_level_to_syslog_level(xentoollog_level x)
+{
+    int s;
+
+    switch(x) {
+    case XTL_DEBUG:
+        s = LOG_DEBUG;
+        break;
+    case XTL_NOTICE:
+        s = LOG_NOTICE;
+        break;
+    case XTL_WARN:
+        s = LOG_WARNING;
+        break;
+    case XTL_ERROR:
+        s = LOG_ERR;
+        break;
+    case XTL_CRITICAL:
+        s = LOG_CRIT;
+        break;
+    default:
+        s = LOG_INFO;
+        break;
+    }
+
+    return s;
+}
+
 void libxl__logv(libxl_ctx *ctx, xentoollog_level msglevel, int errnoval,
              const char *file, int line, const char *func,
              uint32_t domid, const char *fmt, va_list ap)
@@ -237,10 +265,15 @@ void libxl__logv(libxl_ctx *ctx, xentool
     if (domid != INVALID_DOMID)
         snprintf(domain, sizeof(domain), "Domain %"PRIu32":", domid);
  x:
-    xtl_log(ctx->lg, msglevel, errnoval, "libxl",
-            "%s%s%s%s%s" "%s",
-            fileline, func&&file?":":"", func?func:"", func||file?": ":"",
-            domain, base);
+    /* xtl_log(ctx->lg, msglevel, errnoval, "libxl", */
+    /*         "%s%s%s%s%s" "%s", */
+    /*         fileline, func&&file?":":"", func?func:"", func||file?": ":"", */
+    /*         domain, base); */
+    /* OpenXT: we use syslog */
+    syslog(LOG_USER | xtl_level_to_syslog_level(msglevel), "[%d] %s%s%s%s%s%s",
+           getpid(), fileline, func&&file?":":"", func?func:"",
+           func||file?":":"", domain, base);
+
     if (base != enomem) free(base);
     errno = esave;
 }
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -60,6 +60,9 @@
 
 #include <xen-tools/libs.h>
 
+/* OpenXT: we use syslog */
+#include <syslog.h>
+
 #include "xentoollog.h"
 
 #include <xen/io/xenbus.h>
--- a/tools/xl/xl.c
+++ b/tools/xl/xl.c
@@ -24,6 +24,9 @@
 #include <inttypes.h>
 #include <regex.h>
 
+/* OpenXT: we use syslog */
+#include <syslog.h>
+
 #include <libxl.h>
 #include <libxl_utils.h>
 #include <libxlutil.h>
@@ -343,6 +346,8 @@ static void xl_ctx_free(void)
         free(lockfile);
         lockfile = NULL;
     }
+    /* OpenXT: we use syslog */
+    closelog();
 }
 
 int main(int argc, char **argv)
@@ -385,6 +390,8 @@ int main(int argc, char **argv)
     logger = xtl_createlogger_stdiostream(stderr, minmsglevel,
         (progress_use_cr ? XTL_STDIOSTREAM_PROGRESS_USE_CR : 0));
     if (!logger) exit(EXIT_FAILURE);
+    /* OpenXT: we use syslog, we could probably comment out the above. */
+    openlog("xl", LOG_CONS, LOG_USER);
 
     xl_ctx_alloc();
 
--- a/tools/xl/xl_utils.c
+++ b/tools/xl/xl_utils.c
@@ -20,6 +20,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <syslog.h>
 
 #include <libxl.h>
 #include <libxl_utils.h>
@@ -36,10 +37,12 @@ void dolog(const char *file, int line, c
     va_start(ap, fmt);
     rc = vasprintf(&s, fmt, ap);
     va_end(ap);
-    if (rc >= 0)
+    if (rc >= 0) {
         /* we ignore write errors since we have no way to report them;
          * the alternative would be to abort the whole program */
         libxl_write_exactly(NULL, logfile, s, rc, NULL, NULL);
+        syslog(LOG_USER | LOG_INFO, "[%d] %s", getpid(), s);
+    }
     free(s);
 }
 
@@ -250,7 +253,6 @@ void print_bitmap(uint8_t *map, int mapl
 
 int do_daemonize(char *name, const char *pidfile)
 {
-    char *fullname;
     pid_t child1;
     int nullfd, ret = 0;
 
@@ -264,22 +266,10 @@ int do_daemonize(char *name, const char
 
     postfork();
 
-    ret = libxl_create_logfile(ctx, name, &fullname);
-    if (ret) {
-        LOG("failed to open logfile %s: %s",fullname,strerror(errno));
-        exit(-1);
-    }
-
-    CHK_SYSCALL(logfile = open(fullname, O_WRONLY|O_CREAT|O_APPEND, 0644));
-    free(fullname);
-    assert(logfile >= 3);
-
     CHK_SYSCALL(nullfd = open("/dev/null", O_RDONLY));
     assert(nullfd >= 3);
 
     dup2(nullfd, 0);
-    dup2(logfile, 1);
-    dup2(logfile, 2);
 
     close(nullfd);
 
