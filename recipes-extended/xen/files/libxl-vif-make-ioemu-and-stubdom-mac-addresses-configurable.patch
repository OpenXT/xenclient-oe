################################################################################
SHORT DESCRIPTION:
################################################################################
New LibXL vif MAC address options

################################################################################
LONG DESCRIPTION:
################################################################################
A vif declaration in a guest configuration file can spawn up to three different
network interfaces:
* A pv network backend-frontend for the guest
* An emulated network interface for the guest
* A pv network backend-frontend for the stubdomain

Without this patch, all 3 interfaces will have the same MAC address, which
doesn't work.

This patch allows to configure specific MAC addresses for each interface.

If these new options are not used, the behavior stays the same as before, and
all interfaces will have the same MAC address. This may or may not be desirable.

################################################################################
CHANGELOG
################################################################################
Authors:
Jed Lejosne <lejosnej@ainfosec.com>

################################################################################
REMOVAL
################################################################################
If the problem gets solved upstream, we should remove this patch

################################################################################
UPSTREAM PLAN
################################################################################
We should try to upstream this.

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_dm.c
+++ b/tools/libxl/libxl_dm.c
@@ -823,8 +823,11 @@ static int libxl__build_device_model_arg
 
         for (i = 0; i < num_nics; i++) {
             if (nics[i].nictype == LIBXL_NIC_TYPE_VIF_IOEMU) {
-                char *smac = GCSPRINTF(
-                                   LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac));
+                char *smac;
+                if (!libxl__mac_is_default(&nics[i].mac_ioemu))
+                    smac = GCSPRINTF(LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac_ioemu));
+                else
+                    smac = GCSPRINTF(LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac));
                 const char *ifname = libxl__device_nic_devname(gc,
                                                 domid, nics[i].devid,
                                                 LIBXL_NIC_TYPE_VIF_IOEMU);
@@ -1462,8 +1465,11 @@ static int libxl__build_device_model_arg
         }
         for (i = 0; i < num_nics; i++) {
             if (nics[i].nictype == LIBXL_NIC_TYPE_VIF_IOEMU) {
-                char *smac = GCSPRINTF(LIBXL_MAC_FMT,
-                                       LIBXL_MAC_BYTES(nics[i].mac));
+                char *smac;
+                if (!libxl__mac_is_default(&nics[i].mac_ioemu))
+                    smac = GCSPRINTF(LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac_ioemu));
+                else
+                    smac = GCSPRINTF(LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac));
                 const char *ifname = libxl__device_nic_devname(gc,
                                                 guest_domid, nics[i].devid,
                                                 LIBXL_NIC_TYPE_VIF_IOEMU);
@@ -1985,6 +1991,10 @@ static void libxl__dm_vifs_from_hvm_gues
         if (dm_config->nics[i].ifname)
             dm_config->nics[i].ifname = GCSPRINTF("%s" TAP_DEVICE_SUFFIX,
                                                   dm_config->nics[i].ifname);
+        if (!libxl__mac_is_default(&guest_config->nics[i].mac_stubdom))
+            memcpy(dm_config->nics[i].mac, guest_config->nics[i].mac_stubdom, 6);
+
+		dm_config->nics[i].mac[0] = dm_config->nics[i].mac[0] ^ 0x2;
     }
 
     dm_config->num_nics = nr;
--- a/tools/libxl/libxl_internal.c
+++ b/tools/libxl/libxl_internal.c
@@ -377,7 +377,7 @@ _hidden int libxl__compare_macs(libxl_ma
     return 0;
 }
 
-_hidden int libxl__mac_is_default(libxl_mac *mac)
+_hidden int libxl__mac_is_default(const libxl_mac *mac)
 {
     return (!(*mac)[0] && !(*mac)[1] && !(*mac)[2] &&
             !(*mac)[3] && !(*mac)[4] && !(*mac)[5]);
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -1940,7 +1940,7 @@ _hidden int libxl__parse_mac(const char
 /* compare mac address @a and @b. 0 if the same, -ve if a<b and +ve if a>b */
 _hidden int libxl__compare_macs(libxl_mac *a, libxl_mac *b);
 /* return true if mac address is all zero (the default value) */
-_hidden int libxl__mac_is_default(libxl_mac *mac);
+_hidden int libxl__mac_is_default(const libxl_mac *mac);
 /* init a recursive mutex */
 _hidden int libxl__init_recursive_mutex(libxl_ctx *ctx, pthread_mutex_t *lock);
 
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -692,6 +692,8 @@ libxl_device_nic = Struct("device_nic",
     ("mtu", integer),
     ("model", string),
     ("mac", libxl_mac),
+    ("mac_ioemu", libxl_mac),
+    ("mac_stubdom", libxl_mac),
     ("ip", string),
     ("bridge", string),
     ("ifname", string),
--- a/tools/xl/xl_parse.c
+++ b/tools/xl/xl_parse.c
@@ -441,6 +441,26 @@ int parse_nic_config(libxl_device_nic *n
             nic->mac[i] = val;
             oparg = endptr + 1;
         }
+    } else if (MATCH_OPTION("mac_ioemu", token, oparg)) {
+        for (i = 0; i < 6; i++) {
+            val = strtoul(oparg, &endptr, 16);
+            if ((oparg == endptr) || (val > 255)) {
+                fprintf(stderr, "Invalid parameter `mac'.\n");
+                return 1;
+            }
+            nic->mac_ioemu[i] = val;
+            oparg = endptr + 1;
+        }
+    } else if (MATCH_OPTION("mac_stubdom", token, oparg)) {
+        for (i = 0; i < 6; i++) {
+            val = strtoul(oparg, &endptr, 16);
+            if ((oparg == endptr) || (val > 255)) {
+                fprintf(stderr, "Invalid parameter `mac'.\n");
+                return 1;
+            }
+            nic->mac_stubdom[i] = val;
+            oparg = endptr + 1;
+        }
     } else if (MATCH_OPTION("bridge", token, oparg)) {
         replace_string(&nic->bridge, oparg);
     } else if (MATCH_OPTION("netdev", token, oparg)) {
