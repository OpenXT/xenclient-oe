################################################################################
SHORT DESCRIPTION:
################################################################################
libxl vwif support (deprecated)

################################################################################
LONG DESCRIPTION:
################################################################################
This patch overloads NICs with a second "kind": VWIF.
VWIF NICs are wireless NICs, which can be driven in the backend by netback (plus
some helper to fill in the fake wireless access point info in xenstore).
A custom frontend (like xenwnet) is required to expose a wireless nic to the
guest.

As of Xen 4.11, I consider this patch deprecated.
libxl (over-)uses macros and generic functions to handle devices, and those are
not compatible with "multi-kind" device types.
To deal with that, this patch keeps introducing more and more really ugly hacks.
A more correct way to do this would be to introduce a new type of device
alltogether. But that would lead to a massive amount of code duplication,
as "wnics" would be parsed and handled almost exactly like nics.

The main motivation behind VWIFs is to show the wireless signal strength inside
the guest, allowing for a better user experience.
But just for that small tray icon, a whole driver has to be maintained for all
supported guest operating systems, as well as some backend code.
See the REMOVAL section below for a simpler solution.

################################################################################
CHANGELOG
################################################################################
Rebased for Xen 4.8, 4.9, 4.11

################################################################################
REMOVAL
################################################################################
A small app should be written for every supported operating system.
That app would have a tray icon that shows the signal strength, while allowing
the NIC to be a regular VIF, driven by the standard netfront.
With such an app, this patch could be discarded, and frontend driver(s) could be
thrown away.

See https://openxt.atlassian.net/browse/OXT-1455

################################################################################
UPSTREAM PLAN
################################################################################
Please don't.

################################################################################
INTERNAL DEPENDENCIES
################################################################################
Some toolstack code to write vlan nodes and custom frontend drivers like xenwnet

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_device.c
+++ b/tools/libxl/libxl_device.c
@@ -789,7 +789,8 @@ int libxl__device_destroy(libxl__gc *gc,
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
-        if (dev->kind == LIBXL__DEVICE_KIND_VIF) {
+        if (dev->kind == LIBXL__DEVICE_KIND_VIF ||
+            dev->kind == LIBXL__DEVICE_KIND_VWIF) {
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
@@ -1337,7 +1338,9 @@ static void device_destroy_be_watch_cb(l
      * in xenstore. NDVM doesn't do that, so let's not wait forever
      * here. libxl will take care of the xenstore nodes later
      */
-    if (dir && aodev->dev->kind != LIBXL__DEVICE_KIND_VIF) {
+    if (dir &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VIF &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VWIF) {
         /* backend path still exists, wait a little longer... */
         return;
     }
@@ -1470,6 +1473,15 @@ int libxl__device_nextid(libxl__gc *gc,
     else
         nextid = strtoul(l[nb - 1], NULL, 10) + 1;
 
+    /* We need VIFs and VWIFs the be on the same ID pool */
+    if (device == LIBXL__DEVICE_KIND_VIF) {
+        int nextidvwif;
+
+        nextidvwif = libxl__device_nextid(gc, domid, LIBXL__DEVICE_KIND_VWIF);
+        if (nextidvwif > nextid)
+            return nextidvwif;
+    }
+
     return nextid;
 }
 
@@ -1608,9 +1620,11 @@ static int add_device(libxl__egc *egc, l
 
     switch(dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds++;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs++;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
@@ -1656,9 +1670,11 @@ static int remove_device(libxl__egc *egc
 
     switch(ddev->dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds--;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs--;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
@@ -1993,7 +2009,8 @@ void libxl__device_add_async(libxl__egc
     aodev->action = LIBXL__DEVICE_ACTION_ADD;
     libxl__wait_device_connection(egc, aodev);
 
-    if (device->backend_kind == LIBXL__DEVICE_KIND_VIF)
+    if (device->backend_kind == LIBXL__DEVICE_KIND_VIF ||
+        device->backend_kind == LIBXL__DEVICE_KIND_VWIF)
         libxl__xs_printf(gc, XBT_NULL,
                          GCSPRINTF("%s/hotplug-status",
                                    libxl__device_backend_path(gc, device)),
--- a/tools/libxl/libxl_dm.c
+++ b/tools/libxl/libxl_dm.c
@@ -1491,9 +1491,12 @@ static int libxl__build_device_model_arg
                                                 LIBXL_NIC_TYPE_VIF_IOEMU);
                 flexarray_append(dm_args, "-device");
                 flexarray_append(dm_args,
-                   GCSPRINTF("%s,id=vif%d,netdev=net%d,mac=%s",
-                             nics[i].model, nics[i].devid,
-                             nics[i].devid, smac));
+                   GCSPRINTF("%s,id=%s%d,netdev=net%d,mac=%s",
+                             nics[i].model,
+                             (libxl_defbool_val(nics[i].wireless)) ? "vwif" : "vif",
+                             nics[i].devid,
+                             nics[i].devid,
+                             smac));
                 flexarray_append(dm_args, "-netdev");
                 flexarray_append(dm_args,
                                  GCSPRINTF("type=tap,id=net%d,ifname=%s,"
@@ -1997,6 +2000,9 @@ static void libxl__dm_vifs_from_hvm_gues
         libxl_device_nic_init(&dm_config->nics[i]);
         libxl_device_nic_copy(ctx, &dm_config->nics[i], &guest_config->nics[i]);
         dm_config->nics[i].nictype = LIBXL_NIC_TYPE_VIF;
+        /* Stubdoms use Linux netfront, which doesn't handle VWIFs */
+        libxl_defbool_set(&dm_config->nics[i].wireless, false);
+
         if (dm_config->nics[i].ifname)
             dm_config->nics[i].ifname = GCSPRINTF("%s" TAP_DEVICE_SUFFIX,
                                                   dm_config->nics[i].ifname);
--- a/tools/libxl/libxl_linux.c
+++ b/tools/libxl/libxl_linux.c
@@ -60,7 +60,8 @@ static char **get_hotplug_env(libxl__gc
     env[nr++] = GCSPRINTF("backend/%s/%u/%d", type, dev->domid, dev->devid);
     env[nr++] = "XENBUS_BASE_PATH";
     env[nr++] = "backend";
-    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) {
+    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF ||
+        dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) {
         libxl_nic_type nictype;
         char *gatewaydev;
 
@@ -216,6 +217,7 @@ int libxl__get_hotplug_script_info(libxl
         rc = libxl__hotplug_disk(gc, dev, args, env, action);
         break;
     case LIBXL__DEVICE_KIND_VIF:
+    case LIBXL__DEVICE_KIND_VWIF:
         /*
          * If domain has a stubdom we don't have to execute hotplug scripts
          * for emulated interfaces
--- a/tools/libxl/libxl_nic.c
+++ b/tools/libxl/libxl_nic.c
@@ -58,6 +58,7 @@ static int libxl__device_nic_setdefault(
 {
     int rc;
 
+    libxl_defbool_setdefault(&nic->wireless, false);
     if (!nic->mtu)
         nic->mtu = 1492;
     if (!nic->model) {
@@ -259,6 +260,7 @@ static int libxl__nic_from_xenstore(libx
     int rc;
 
     libxl_device_nic_init(nic);
+    libxl_defbool_setdefault(&nic->wireless, false);
 
     rc = libxl__xs_read_checked(gc, XBT_NULL,
                                 GCSPRINTF("%s/handle", libxl_path), &tmp);
@@ -277,6 +279,10 @@ static int libxl__nic_from_xenstore(libx
         rc = ERROR_FAIL;
         goto out;
     }
+
+    if (strstr(tmp, "vwif"))
+        libxl_defbool_set(&nic->wireless, true);
+
     rc = libxl__backendpath_parse_domid(gc, tmp, &nic->backend_domid);
     if (rc) goto out;
 
@@ -413,10 +419,17 @@ int libxl_device_nic_getinfo(libxl_ctx *
 
     nicinfo->devid = nic->devid;
 
-    nicpath = libxl__domain_device_frontend_path(gc, domid, nicinfo->devid,
-                                                 LIBXL__DEVICE_KIND_VIF);
-    libxl_path = libxl__domain_device_libxl_path(gc, domid, nicinfo->devid,
-                                                 LIBXL__DEVICE_KIND_VIF);
+    if (libxl_defbool_val(nic->wireless)) {
+        nicpath = libxl__domain_device_frontend_path(gc, domid, nicinfo->devid,
+                                                     LIBXL__DEVICE_KIND_VWIF);
+        libxl_path = libxl__domain_device_libxl_path(gc, domid, nicinfo->devid,
+                                                     LIBXL__DEVICE_KIND_VWIF);
+    } else {
+        nicpath = libxl__domain_device_frontend_path(gc, domid, nicinfo->devid,
+                                                     LIBXL__DEVICE_KIND_VIF);
+        libxl_path = libxl__domain_device_libxl_path(gc, domid, nicinfo->devid,
+                                                     LIBXL__DEVICE_KIND_VIF);
+    }
     nicinfo->backend = xs_read(ctx->xsh, XBT_NULL,
                                 GCSPRINTF("%s/backend", libxl_path), NULL);
     if (!nicinfo->backend) {
@@ -502,9 +515,73 @@ out:
 }
 
 static LIBXL_DEFINE_UPDATE_DEVID(nic)
-static LIBXL_DEFINE_DEVICE_FROM_TYPE(nic)
+/*
+ * OpenXT: we need a special case for vwifs, so we can't use this macro:
+ * static LIBXL_DEFINE_DEVICE_FROM_TYPE(nic)
+ */
+static int libxl__device_from_nic(libxl__gc *gc, uint32_t domid,
+                                  libxl_device_nic *type,
+                                  libxl__device *device)
+{
+    device->backend_devid   = type->devid;
+    device->backend_domid   = type->backend_domid;
+    device->backend_kind    = libxl__nic_devtype.type;
+    device->devid           = type->devid;
+    device->domid           = domid;
+    device->kind            = libxl__nic_devtype.type;
+    /* Generic code above, OpenXT vwif bits below */
+    if (libxl_defbool_val(type->wireless)) {
+        device->backend_kind = LIBXL__DEVICE_KIND_VWIF;
+        device->kind         = LIBXL__DEVICE_KIND_VWIF;
+    }
+
+    return 0;
+}
+
+/*
+ * OpenXT: we need a special case for vwifs, so we can't use this macro:
+ * LIBXL_DEFINE_DEVID_TO_DEVICE(nic)
+ */
+int libxl_devid_to_device_nic(libxl_ctx *ctx, uint32_t domid,
+                              int devid,
+                              libxl_device_nic *type)
+{
+    GC_INIT(ctx);
+
+    char *device_path;
+    const char *tmp;
+    int rc;
+
+    libxl_device_nic_init(type);
+
+    device_path = GCSPRINTF("%s/device/%s/%d",
+                            libxl__xs_libxl_path(gc, domid),
+                            "vif", devid);
+
+    if (libxl__xs_read_mandatory(gc, XBT_NULL, device_path, &tmp)) {
+        device_path = GCSPRINTF("%s/device/%s/%d",
+                                libxl__xs_libxl_path(gc, domid),
+                                "vwif", devid);
+        if (libxl__xs_read_mandatory(gc, XBT_NULL, device_path, &tmp)) {
+            rc = ERROR_NOTFOUND;
+            goto out;
+        }
+    }
+
+    if (libxl__nic_devtype.from_xenstore) {
+        rc = libxl__nic_devtype.from_xenstore(gc, device_path,
+                                              devid, type);
+        if (rc) goto out;
+    }
+
+    rc = 0;
+
+ out:
+
+    GC_FREE;
+    return rc;
+}
 
-LIBXL_DEFINE_DEVID_TO_DEVICE(nic)
 LIBXL_DEFINE_DEVICE_ADD(nic)
 LIBXL_DEFINE_DEVICES_ADD(nic)
 LIBXL_DEFINE_DEVICE_REMOVE(nic)
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -720,6 +720,7 @@ libxl_device_nic = Struct("device_nic",
     ("rate_bytes_per_interval", uint64),
     ("rate_interval_usecs", uint32),
     ("gatewaydev", string),
+    ("wireless", libxl_defbool),
     # Note that the COLO configuration settings should be considered unstable.
     # They may change incompatibly in future versions of Xen.
     ("coloft_forwarddev", string),
--- a/tools/libxl/libxl_types_internal.idl
+++ b/tools/libxl/libxl_types_internal.idl
@@ -30,6 +30,7 @@ libxl__device_kind = Enumeration("device
     (13, "VUART"),
     (14, "PVCALLS"),
     (15, "VSND"),
+    (16, "VWIF"),
     ])
 
 libxl__console_backend = Enumeration("console_backend", [
--- a/tools/xl/xl_parse.c
+++ b/tools/xl/xl_parse.c
@@ -581,6 +581,8 @@ int parse_nic_config(libxl_device_nic *n
         replace_string(&nic->colo_checkpoint_port, oparg);
     } else if (MATCH_OPTION("accel", token, oparg)) {
         fprintf(stderr, "the accel parameter for vifs is currently not supported\n");
+    } else if (MATCH_OPTION("wireless", token, oparg)) {
+        libxl_defbool_set(&nic->wireless, (oparg && *oparg == '1'));
     } else if (MATCH_OPTION("devid", token, oparg)) {
         nic->devid = parse_ulong(oparg);
     } else {
