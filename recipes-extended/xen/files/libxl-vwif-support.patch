################################################################################
SHORT DESCRIPTION:
################################################################################
libxl vwif support

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################

Rebased for Xen 4.8, 4.9

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- a/tools/libxl/libxl_device.c
+++ b/tools/libxl/libxl_device.c
@@ -757,7 +757,8 @@ int libxl__device_destroy(libxl__gc *gc,
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
-        if (dev->kind == LIBXL__DEVICE_KIND_VIF) {
+        if (dev->kind == LIBXL__DEVICE_KIND_VIF ||
+            dev->kind == LIBXL__DEVICE_KIND_VWIF) {
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
@@ -1298,7 +1299,9 @@ static void device_destroy_be_watch_cb(l
      * in xenstore. NDVM doesn't do that, so let's not wait forever
      * here. libxl will take care of the xenstore nodes later
      */
-    if (dir && aodev->dev->kind != LIBXL__DEVICE_KIND_VIF) {
+    if (dir &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VIF &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VWIF) {
         /* backend path still exists, wait a little longer... */
         return;
     }
@@ -1430,6 +1433,15 @@ int libxl__device_nextid(libxl__gc *gc,
     else
         nextid = strtoul(l[nb - 1], NULL, 10) + 1;
 
+    /* We need VIFs and VWIFs the be on the same ID pool */
+    if (!strcmp(device, "vif")) {
+        int nextidvwif;
+
+        nextidvwif = libxl__device_nextid(gc, domid, "vwif");
+        if (nextidvwif > nextid)
+            return nextidvwif;
+    }
+
     return nextid;
 }
 
@@ -1568,9 +1580,11 @@ static int add_device(libxl__egc *egc, l
 
     switch(dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds++;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs++;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
@@ -1616,9 +1630,11 @@ static int remove_device(libxl__egc *egc
 
     switch(ddev->dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds--;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs--;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
@@ -1953,7 +1969,8 @@ void libxl__device_add_async(libxl__egc
     aodev->action = LIBXL__DEVICE_ACTION_ADD;
     libxl__wait_device_connection(egc, aodev);
 
-    if (device->backend_kind == LIBXL__DEVICE_KIND_VIF)
+    if (device->backend_kind == LIBXL__DEVICE_KIND_VIF ||
+        device->backend_kind == LIBXL__DEVICE_KIND_VWIF)
         libxl__xs_printf(gc, XBT_NULL,
                          GCSPRINTF("%s/hotplug-status",
                                    libxl__device_backend_path(gc, device)),
--- a/tools/libxl/libxl_dm.c
+++ b/tools/libxl/libxl_dm.c
@@ -1250,9 +1250,12 @@ static int libxl__build_device_model_arg
                                                 LIBXL_NIC_TYPE_VIF_IOEMU);
                 flexarray_append(dm_args, "-device");
                 flexarray_append(dm_args,
-                   GCSPRINTF("%s,id=vif%d,netdev=net%d,mac=%s",
-                             nics[i].model, nics[i].devid,
-                             nics[i].devid, smac));
+                   GCSPRINTF("%s,id=%s%d,netdev=net%d,mac=%s",
+                             nics[i].model,
+                             (libxl_defbool_val(nics[i].wireless)) ? "vwif" : "vif",
+                             nics[i].devid,
+                             nics[i].devid,
+                             smac));
                 flexarray_append(dm_args, "-netdev");
                 flexarray_append(dm_args,
                                  GCSPRINTF("type=tap,id=net%d,ifname=%s,"
@@ -1762,6 +1765,9 @@ static void libxl__dm_vifs_from_hvm_gues
         libxl_device_nic_init(&dm_config->nics[i]);
         libxl_device_nic_copy(ctx, &dm_config->nics[i], &guest_config->nics[i]);
         dm_config->nics[i].nictype = LIBXL_NIC_TYPE_VIF;
+        /* Stubdoms use Linux netfront, which doesn't handle VWIFs */
+        libxl_defbool_set(&dm_config->nics[i].wireless, false);
+
         if (dm_config->nics[i].ifname)
             dm_config->nics[i].ifname = GCSPRINTF("%s" TAP_DEVICE_SUFFIX,
                                                   dm_config->nics[i].ifname);
--- a/tools/libxl/libxl_linux.c
+++ b/tools/libxl/libxl_linux.c
@@ -51,7 +51,8 @@ static char **get_hotplug_env(libxl__gc
     env[nr++] = GCSPRINTF("backend/%s/%u/%d", type, dev->domid, dev->devid);
     env[nr++] = "XENBUS_BASE_PATH";
     env[nr++] = "backend";
-    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) {
+    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF ||
+        dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) {
         libxl_nic_type nictype;
         char *gatewaydev;
 
@@ -207,6 +208,7 @@ int libxl__get_hotplug_script_info(libxl
         rc = libxl__hotplug_disk(gc, dev, args, env, action);
         break;
     case LIBXL__DEVICE_KIND_VIF:
+    case LIBXL__DEVICE_KIND_VWIF:
         /*
          * If domain has a stubdom we don't have to execute hotplug scripts
          * for emulated interfaces
--- a/tools/libxl/libxl_nic.c
+++ b/tools/libxl/libxl_nic.c
@@ -58,6 +58,7 @@ static int libxl__device_nic_setdefault(
 {
     int rc;
 
+    libxl_defbool_setdefault(&nic->wireless, false);
     if (!nic->mtu)
         nic->mtu = 1492;
     if (!nic->model) {
@@ -122,10 +123,16 @@ static int libxl__device_from_nic(libxl_
 {
     device->backend_devid    = nic->devid;
     device->backend_domid    = nic->backend_domid;
-    device->backend_kind     = LIBXL__DEVICE_KIND_VIF;
+    if (libxl_defbool_val(nic->wireless)) {
+        device->backend_kind = LIBXL__DEVICE_KIND_VWIF;
+        device->kind         = LIBXL__DEVICE_KIND_VWIF;
+    }
+    else {
+        device->backend_kind = LIBXL__DEVICE_KIND_VIF;
+        device->kind         = LIBXL__DEVICE_KIND_VIF;
+    }
     device->devid            = nic->devid;
     device->domid            = domid;
-    device->kind             = LIBXL__DEVICE_KIND_VIF;
 
     return 0;
 }
@@ -275,6 +282,7 @@ static int libxl__nic_from_xenstore(libx
     int rc;
 
     libxl_device_nic_init(nic);
+    libxl_defbool_setdefault(&nic->wireless, false);
 
     rc = libxl__xs_read_checked(gc, XBT_NULL,
                                 GCSPRINTF("%s/handle", libxl_path), &tmp);
@@ -293,6 +301,10 @@ static int libxl__nic_from_xenstore(libx
         rc = ERROR_FAIL;
         goto out;
     }
+
+    if (strstr(tmp, "vwif"))
+        libxl_defbool_set(&nic->wireless, true);
+
     rc = libxl__backendpath_parse_domid(gc, tmp, &nic->backend_domid);
     if (rc) goto out;
 
@@ -416,6 +428,10 @@ int libxl_devid_to_device_nic(libxl_ctx
     libxl_path = GCSPRINTF("%s/device/vif/%d", libxl_dom_path, devid);
 
     rc = libxl__nic_from_xenstore(gc, libxl_path, devid, nic);
+    if (rc) {
+        libxl_path = GCSPRINTF("%s/device/vwif/%d", libxl_dom_path, devid);
+        rc = libxl__nic_from_xenstore(gc, libxl_path, devid, nic);
+    }
     if (rc) goto out;
 
     rc = 0;
@@ -453,9 +469,16 @@ int libxl_device_nic_getinfo(libxl_ctx *
     dompath = libxl__xs_get_dompath(gc, domid);
     nicinfo->devid = nic->devid;
 
-    nicpath = GCSPRINTF("%s/device/vif/%d", dompath, nicinfo->devid);
-    libxl_path = GCSPRINTF("%s/device/vif/%d",
-                           libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    if (libxl_defbool_val(nic->wireless)) {
+        nicpath = GCSPRINTF("%s/device/vwif/%d", dompath, nicinfo->devid);
+        libxl_path = GCSPRINTF("%s/device/vwif/%d",
+                               libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    } else {
+        nicpath = GCSPRINTF("%s/device/vif/%d", dompath, nicinfo->devid);
+        libxl_path = GCSPRINTF("%s/device/vif/%d",
+                               libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    }
+
     nicinfo->backend = xs_read(ctx->xsh, XBT_NULL,
                                 GCSPRINTF("%s/backend", libxl_path), NULL);
     if (!nicinfo->backend) {
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -696,6 +696,7 @@ libxl_device_nic = Struct("device_nic",
     ("rate_bytes_per_interval", uint64),
     ("rate_interval_usecs", uint32),
     ("gatewaydev", string),
+    ("wireless", libxl_defbool),
     # Note that the COLO configuration settings should be considered unstable.
     # They may change incompatibly in future versions of Xen.
     ("coloft_forwarddev", string),
--- a/tools/libxl/libxl_types_internal.idl
+++ b/tools/libxl/libxl_types_internal.idl
@@ -28,6 +28,7 @@ libxl__device_kind = Enumeration("device
     (11, "9PFS"),
     (12, "VDISPL"),
     (13, "VUART"),
+    (14, "VWIF"),
     ])
 
 libxl__console_backend = Enumeration("console_backend", [
--- a/tools/xl/xl_parse.c
+++ b/tools/xl/xl_parse.c
@@ -577,6 +577,8 @@ int parse_nic_config(libxl_device_nic *n
         replace_string(&nic->colo_checkpoint_port, oparg);
     } else if (MATCH_OPTION("accel", token, oparg)) {
         fprintf(stderr, "the accel parameter for vifs is currently not supported\n");
+    } else if (MATCH_OPTION("wireless", token, oparg)) {
+        libxl_defbool_set(&nic->wireless, (oparg && *oparg == '1'));
     } else if (MATCH_OPTION("devid", token, oparg)) {
         nic->devid = parse_ulong(oparg);
     } else {
