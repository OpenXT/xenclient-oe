Index: xen-4.6.4/tools/libxl/libxl_types.idl
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_types.idl
+++ xen-4.6.4/tools/libxl/libxl_types.idl
@@ -603,6 +603,7 @@ libxl_device_nic = Struct("device_nic",
     ("rate_bytes_per_interval", uint64),
     ("rate_interval_usecs", uint32),
     ("gatewaydev", string),
+    ("wireless", libxl_defbool),
     ])
 
 libxl_device_pci = Struct("device_pci", [
Index: xen-4.6.4/tools/libxl/libxl.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl.c
+++ xen-4.6.4/tools/libxl/libxl.c
@@ -2110,6 +2110,15 @@ static int libxl__device_nextid(libxl__g
     else
         nextid = strtoul(l[nb - 1], NULL, 10) + 1;
 
+    /* We need VIFs and VWIFs the be on the same ID pool */
+    if (!strcmp(device, "vif")) {
+        int nextidvwif;
+
+        nextidvwif = libxl__device_nextid(gc, domid, "vwif");
+        if (nextidvwif > nextid)
+            return nextidvwif;
+    }
+
     return nextid;
 }
 
@@ -3325,6 +3334,7 @@ int libxl__device_nic_setdefault(libxl__
 {
     int rc;
 
+    libxl_defbool_setdefault(&nic->wireless, false);
     if (!nic->mtu)
         nic->mtu = 1492;
     if (!nic->model) {
@@ -3383,10 +3393,16 @@ static int libxl__device_from_nic(libxl_
 {
     device->backend_devid    = nic->devid;
     device->backend_domid    = nic->backend_domid;
-    device->backend_kind     = LIBXL__DEVICE_KIND_VIF;
+    if (libxl_defbool_val(nic->wireless))
+        device->backend_kind     = LIBXL__DEVICE_KIND_VWIF;
+    else
+        device->backend_kind     = LIBXL__DEVICE_KIND_VIF;
     device->devid            = nic->devid;
     device->domid            = domid;
-    device->kind             = LIBXL__DEVICE_KIND_VIF;
+    if (libxl_defbool_val(nic->wireless))
+        device->kind             = LIBXL__DEVICE_KIND_VWIF;
+    else
+        device->kind             = LIBXL__DEVICE_KIND_VIF;
 
     return 0;
 }
@@ -3416,6 +3432,7 @@ void libxl__device_nic_add(libxl__egc *e
     back = flexarray_make(gc, 18, 1);
 
     if (nic->devid == -1) {
+        /* This works for vwifs too */
         if ((nic->devid = libxl__device_nextid(gc, domid, "vif")) < 0) {
             rc = ERROR_FAIL;
             goto out;
@@ -3616,6 +3633,10 @@ int libxl_devid_to_device_nic(libxl_ctx
     libxl_path = GCSPRINTF("%s/device/vif/%d", libxl_dom_path, devid);
 
     rc = libxl__device_nic_from_xenstore(gc, libxl_path, nic);
+    if (rc) {
+        libxl_path = GCSPRINTF("%s/device/vwif/%d", libxl_dom_path, devid);
+        rc = libxl__device_nic_from_xenstore(gc, libxl_path, nic);
+    }
     if (rc) goto out;
 
     rc = 0;
@@ -3627,13 +3648,14 @@ out:
 static int libxl__append_nic_list(libxl__gc *gc,
                                            uint32_t domid,
                                            libxl_device_nic **nics,
-                                           int *nnics)
+                                           int *nnics,
+                                           bool vwif)
 {
     char *libxl_dir_path = NULL;
     char **dir = NULL;
     unsigned int n = 0;
     libxl_device_nic *pnic = NULL, *pnic_end = NULL;
-    int rc;
+    int rc, rc2;
 
     libxl_dir_path = GCSPRINTF("%s/device/vif",
                                libxl__xs_libxl_path(gc, domid));
@@ -3654,9 +3676,14 @@ static int libxl__append_nic_list(libxl_
         }
         *nnics += n;
     }
-    return 0;
+    rc = 0;
 
  out:
+    if (!vwif) {
+        rc2 = libxl__append_nic_list(gc, domid, nics, nnics, true);
+        if (rc2 == 0)
+            return 0;
+    }
     return rc;
 }
 
@@ -3668,7 +3695,7 @@ libxl_device_nic *libxl_device_nic_list(
 
     *num = 0;
 
-    rc = libxl__append_nic_list(gc, domid, &nics, num);
+    rc = libxl__append_nic_list(gc, domid, &nics, num, false);
     if (rc) goto out_err;
 
     GC_FREE;
@@ -3695,9 +3722,15 @@ int libxl_device_nic_getinfo(libxl_ctx *
     dompath = libxl__xs_get_dompath(gc, domid);
     nicinfo->devid = nic->devid;
 
-    nicpath = GCSPRINTF("%s/device/vif/%d", dompath, nicinfo->devid);
-    libxl_path = GCSPRINTF("%s/device/vif/%d",
-                           libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    if (libxl_defbool_val(nic->wireless)) {
+        nicpath = GCSPRINTF("%s/device/vwif/%d", dompath, nicinfo->devid);
+        libxl_path = GCSPRINTF("%s/device/vwif/%d",
+                               libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    } else {
+        nicpath = GCSPRINTF("%s/device/vif/%d", dompath, nicinfo->devid);
+        libxl_path = GCSPRINTF("%s/device/vif/%d",
+                               libxl__xs_libxl_path(gc, domid), nicinfo->devid);
+    }
     nicinfo->backend = xs_read(ctx->xsh, XBT_NULL,
                                 GCSPRINTF("%s/backend", libxl_path), NULL);
     if (!nicinfo->backend) {
@@ -4490,9 +4523,11 @@ static int add_device(libxl__egc *egc, l
 
     switch(dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds++;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs++;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs++;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
@@ -4533,9 +4568,11 @@ static int remove_device(libxl__egc *egc
 
     switch(ddev->dev->backend_kind) {
     case LIBXL__DEVICE_KIND_VBD:
+    case LIBXL__DEVICE_KIND_VWIF:
     case LIBXL__DEVICE_KIND_VIF:
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD) dguest->num_vbds--;
-        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VBD)  dguest->num_vbds--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) dguest->num_vifs--;
+        if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF)  dguest->num_vifs--;
 
         GCNEW(aodev);
         libxl__prepare_ao_device(ao, aodev);
Index: xen-4.6.4/tools/libxl/libxl_types_internal.idl
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_types_internal.idl
+++ xen-4.6.4/tools/libxl/libxl_types_internal.idl
@@ -22,6 +22,7 @@ libxl__device_kind = Enumeration("device
     (6, "VKBD"),
     (7, "CONSOLE"),
     (8, "VTPM"),
+    (9, "VWIF"),
     ])
 
 libxl__console_backend = Enumeration("console_backend", [
Index: xen-4.6.4/tools/libxl/xl_cmdimpl.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/xl_cmdimpl.c
+++ xen-4.6.4/tools/libxl/xl_cmdimpl.c
@@ -1057,6 +1057,10 @@ static int parse_nic_config(libxl_device
         parse_vif_rate(config, oparg, nic);
     } else if (MATCH_OPTION("accel", token, oparg)) {
         fprintf(stderr, "the accel parameter for vifs is currently not supported\n");
+    } else if (MATCH_OPTION("wireless", token, oparg)) {
+        libxl_defbool_set(&nic->wireless, (oparg && *oparg == '1'));
+    } else if (MATCH_OPTION("devid", token, oparg)) {
+        nic->devid = strtol(oparg, NULL, 10);
     } else {
         fprintf(stderr, "unrecognized argument `%s'\n", token);
         return 1;
Index: xen-4.6.4/tools/libxl/libxl_dm.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_dm.c
+++ xen-4.6.4/tools/libxl/libxl_dm.c
@@ -1257,6 +1257,8 @@ static void libxl__dm_vifs_from_hvm_gues
         libxl_device_nic_init(&dm_config->nics[i]);
         libxl_device_nic_copy(ctx, &dm_config->nics[i], &guest_config->nics[i]);
         dm_config->nics[i].nictype = LIBXL_NIC_TYPE_VIF;
+        /* Stubdoms use Linux netfront, which doesn't handle VWIFs */
+        libxl_defbool_set(&dm_config->nics[i].wireless, false);
         if (dm_config->nics[i].ifname)
             dm_config->nics[i].ifname = GCSPRINTF("%s" TAP_DEVICE_SUFFIX,
                                                   dm_config->nics[i].ifname);
Index: xen-4.6.4/tools/libxl/libxl_linux.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_linux.c
+++ xen-4.6.4/tools/libxl/libxl_linux.c
@@ -105,7 +105,8 @@ static char **get_hotplug_env(libxl__gc
     env[nr++] = "backend";
     env[nr++] = "netdev";
     env[nr++] = gatewaydev ? : "";
-    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF) {
+    if (dev->backend_kind == LIBXL__DEVICE_KIND_VIF ||
+        dev->backend_kind == LIBXL__DEVICE_KIND_VWIF) {
         if (libxl__nic_type(gc, dev, &nictype)) {
             LOG(ERROR, "unable to get nictype");
             return NULL;
@@ -250,6 +251,7 @@ int libxl__get_hotplug_script_info(libxl
         rc = libxl__hotplug_disk(gc, dev, args, env, action);
         break;
     case LIBXL__DEVICE_KIND_VIF:
+    case LIBXL__DEVICE_KIND_VWIF:
         /*
          * If domain has a stubdom we don't have to execute hotplug scripts
          * for emulated interfaces
Index: xen-4.6.4/tools/libxl/libxl_device.c
===================================================================
--- xen-4.6.4.orig/tools/libxl/libxl_device.c
+++ xen-4.6.4/tools/libxl/libxl_device.c
@@ -671,7 +671,8 @@ int libxl__device_destroy(libxl__gc *gc,
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
-        if (dev->kind == LIBXL__DEVICE_KIND_VIF) {
+        if (dev->kind == LIBXL__DEVICE_KIND_VIF ||
+            dev->kind == LIBXL__DEVICE_KIND_VWIF) {
             libxl__xs_path_cleanup(gc, t, be_path);
         }
 
@@ -1185,7 +1186,9 @@ static void device_destroy_be_watch_cb(l
      * in xenstore. NDVM doesn't do that, so let's not wait forever
      * here. libxl will take care of the xenstore nodes later
      */
-    if (dir && aodev->dev->kind != LIBXL__DEVICE_KIND_VIF) {
+    if (dir &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VIF &&
+        aodev->dev->kind != LIBXL__DEVICE_KIND_VWIF) {
         /* backend path still exists, wait a little longer... */
         return;
     }
