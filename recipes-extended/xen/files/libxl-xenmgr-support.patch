################################################################################
SHORT DESCRIPTION:
################################################################################

################################################################################
LONG DESCRIPTION:
################################################################################
This patch contains several changes that couldn't be grouped elsewhere. These
changes support running xl on OpenXT with xenmgr as the toplevel toolstack
component. Some of the changes include tweaking qemu options, reworking the
vfb/vkb initialization, and writing OpenXT specific xenstore nodes.  Refer
to the patch below for a comprehensive list of changes.

################################################################################
CHANGELOG
################################################################################
Authors:
Chris Rogers <rogersc@ainfosec.com>

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
Index: xen-4.6.5/tools/libxl/libxl.c
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl.c
+++ xen-4.6.5/tools/libxl/libxl.c
@@ -1142,6 +1142,13 @@ static int libxl__domain_pvcontrol(libxl
     return libxl__domain_pvcontrol_write(gc, XBT_NULL, domid, cmd);
 }
 
+int libxl_hard_shutdown(libxl_ctx *ctx, uint32_t domid)
+{
+    int ret;
+    ret = xc_domain_shutdown(ctx->xch, domid, SHUTDOWN_poweroff);
+    return ret;
+}
+
 int libxl_domain_shutdown(libxl_ctx *ctx, uint32_t domid)
 {
     GC_INIT(ctx);
@@ -1546,6 +1553,8 @@ void libxl__domain_destroy(libxl__egc *e
         dds->stubdom.ao = ao;
         dds->stubdom.domid = stubdomid;
         dds->stubdom.callback = stubdom_destroy_callback;
+        libxl__qmp_stop(gc, dds->domid);
+        libxl__qmp_quit(gc, dds->domid);
         libxl__destroy_domid(egc, &dds->stubdom);
     } else {
         dds->stubdom_finished = 1;
@@ -3396,6 +3405,7 @@ void libxl__device_nic_add(libxl__egc *e
     flexarray_t *front;
     flexarray_t *back;
     libxl__device *device;
+    libxl_uuid uuid; 
     int rc;
     xs_transaction_t t = XBT_NULL;
     libxl_domain_config d_config;
@@ -3477,6 +3487,9 @@ void libxl__device_nic_add(libxl__egc *e
     flexarray_append(front, "mac");
     flexarray_append(front, libxl__sprintf(gc,
                                     LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nic->mac)));
+    libxl_domid_to_uuid(CTX, &uuid, nic->backend_domid);
+    flexarray_append(front, "backend-uuid");
+    flexarray_append(front, libxl__sprintf(gc, "%s", libxl__uuid2string(gc, uuid)));
 
     if (aodev->update_json) {
         lock = libxl__lock_domain_userdata(gc, domid);
@@ -3525,6 +3538,8 @@ void libxl__device_nic_add(libxl__egc *e
     aodev->action = LIBXL__DEVICE_ACTION_ADD;
     libxl__wait_device_connection(egc, aodev);
 
+    libxl__xs_write(gc, XBT_NULL, GCSPRINTF("%s/hotplug-status", libxl__device_backend_path(gc, device)), "connected");
+
     rc = 0;
 out:
     libxl__xs_transaction_abort(gc, &t);
@@ -4252,6 +4267,9 @@ int libxl__device_vfb_add(libxl__gc *gc,
                               libxl__xs_kvs_of_flexarray(gc, back, back->count),
                               libxl__xs_kvs_of_flexarray(gc, front, front->count),
                               NULL);
+
+    libxl__xs_write(gc, XBT_NULL, GCSPRINTF("%s/hotplug-status", libxl__device_backend_path(gc, &device)), "connected");
+
     rc = 0;
 out:
     return rc;
@@ -6856,7 +6874,7 @@ int libxl_retrieve_domain_configuration(
                     break;                                              \
             }                                                           \
                                                                         \
-            if (j < num) {         /* found in xenstore */              \
+            if (j < num || !strcmp(#type, "nic")) {  /* found in xenstore */ \
                 libxl_device_##type *dst, *src;                         \
                 dst = q;                                                \
                 src = &p[j];                                            \
Index: xen-4.6.5/tools/libxl/libxl_create.c
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl_create.c
+++ xen-4.6.5/tools/libxl/libxl_create.c
@@ -635,11 +635,30 @@ retry_transaction:
                     roperm, ARRAY_SIZE(roperm));
     libxl__xs_mkdir(gc, t,
                     libxl__sprintf(gc, "%s/control", dom_path),
-                    roperm, ARRAY_SIZE(roperm));
-    if (info->type == LIBXL_DOMAIN_TYPE_HVM)
+                    rwperm, ARRAY_SIZE(rwperm));
+    libxl__xs_mkdir(gc, t,
+                    libxl__sprintf(gc, "%s/error", dom_path),
+                    rwperm, ARRAY_SIZE(rwperm));
+    libxl__xs_mkdir(gc, t,
+                    libxl__sprintf(gc, "%s/drivers", dom_path),
+                    rwperm, ARRAY_SIZE(rwperm));
+    libxl__xs_mkdir(gc, t,
+                    libxl__sprintf(gc, "%s/attr", dom_path),
+                    rwperm, ARRAY_SIZE(rwperm));
+    libxl__xs_mkdir(gc, t,
+                    libxl__sprintf(gc, "%s/data", dom_path),
+                    rwperm, ARRAY_SIZE(rwperm));
+    libxl__xs_mkdir(gc, t,
+                    libxl__sprintf(gc, "%s/messages", dom_path),
+                    rwperm, ARRAY_SIZE(rwperm));
+    if (info->type == LIBXL_DOMAIN_TYPE_HVM) {
         libxl__xs_mkdir(gc, t,
                         libxl__sprintf(gc, "%s/hvmloader", dom_path),
                         roperm, ARRAY_SIZE(roperm));
+        libxl__xs_write(gc, t,
+                        libxl__sprintf(gc, "%s/hvmloader/seabios-legacy-load-roms", dom_path),
+                        "1");
+    }
 
     libxl__xs_mkdir(gc, t,
                     libxl__sprintf(gc, "%s/control/shutdown", dom_path),
@@ -680,6 +699,11 @@ retry_transaction:
     libxl__xs_writev(gc, t, dom_path, info->xsdata);
     libxl__xs_writev(gc, t, libxl__sprintf(gc, "%s/platform", dom_path), info->platformdata);
 
+    if(d_config->b_info.display_depth)
+        xs_write(ctx->xsh, t, libxl__sprintf(gc, "%s/platform/restrictdisplaydepth", dom_path), "1", 1);
+    if(d_config->b_info.display_res)
+        xs_write(ctx->xsh, t, libxl__sprintf(gc, "%s/platform/restrictdisplayres", dom_path), "1", 1);
+
     xs_write(ctx->xsh, t, libxl__sprintf(gc, "%s/control/platform-feature-multiprocessor-suspend", dom_path), "1", 1);
     xs_write(ctx->xsh, t, libxl__sprintf(gc, "%s/control/platform-feature-xs_reset_watches", dom_path), "1", 1);
     if (!xs_transaction_end(ctx->xsh, t, 0)) {
@@ -1283,17 +1307,12 @@ static void domcreate_launch_dm(libxl__e
     {
         libxl__device_console console;
         libxl__device device;
-        libxl_device_vkb vkb;
 
         init_console_info(gc, &console, 0);
         console.backend_domid = state->console_domid;
         libxl__device_console_add(gc, domid, &console, state, &device);
         libxl__device_console_dispose(&console);
 
-        libxl_device_vkb_init(&vkb);
-        libxl__device_vkb_add(gc, domid, &vkb);
-        libxl_device_vkb_dispose(&vkb);
-
         dcs->dmss.dm.guest_domid = domid;
         if (libxl_defbool_val(d_config->b_info.device_model_stubdomain))
             libxl__spawn_stub_dm(egc, &dcs->dmss);
@@ -1315,19 +1334,21 @@ static void domcreate_launch_dm(libxl__e
         libxl__device_console console;
         libxl__device device;
 
+        fprintf(stderr, "WARNING: before adding vkb device.\n");
+        for (i = 0; i < d_config->num_vkbs; i++) {
+            fprintf(stderr, "WARNING: adding vkb device.\n");
+            libxl__device_vkb_add(gc, domid, &d_config->vkbs[i]);
+        }
+
         for (i = 0; i < d_config->num_vfbs; i++) {
+            fprintf(stderr, "WARNING: adding vfb device.\n");
             libxl__device_vfb_add(gc, domid, &d_config->vfbs[i]);
-            libxl__device_vkb_add(gc, domid, &d_config->vkbs[i]);
         }
 
         init_console_info(gc, &console, 0);
 
-        ret = libxl__need_xenpv_qemu(gc, 1, &console,
-                d_config->num_vfbs, d_config->vfbs,
-                d_config->num_disks, &d_config->disks[0],
-                d_config->num_channels, &d_config->channels[0]);
-        if (ret < 0)
-            goto error_out;
+        /* Disable QEMU for PV guests. */
+        ret = 0;
 
         console.backend_domid = state->console_domid;
         libxl__device_console_add(gc, domid, &console, state, &device);
Index: xen-4.6.5/tools/libxl/libxl_dm.c
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl_dm.c
+++ xen-4.6.5/tools/libxl/libxl_dm.c
@@ -620,7 +620,7 @@ static int libxl__build_device_model_arg
     }
     for (i = 0; b_info->extra && b_info->extra[i] != NULL; i++)
         flexarray_append(dm_args, b_info->extra[i]);
-    flexarray_append(dm_args, "-M");
+    flexarray_append(dm_args, "-machine");
     switch (b_info->type) {
     case LIBXL_DOMAIN_TYPE_PV:
         flexarray_append(dm_args, "xenpv");
@@ -1323,7 +1323,7 @@ static int libxl__write_stub_dmargs(libx
     while (args[i] != NULL) {
         if (linux_stubdom ||
             (strcmp(args[i], "-sdl") &&
-             strcmp(args[i], "-M") && strcmp(args[i], "xenfv"))) {
+             strcmp(args[i], "-machine") && strcmp(args[i], "xenfv"))) {
             strcat(dmargs, " ");
             strcat(dmargs, args[i]);
         }
@@ -1526,9 +1526,26 @@ void libxl__spawn_stub_dm(libxl__egc *eg
                              &stubdom_state->config);
     if (ret)
         goto out;
+
     uint32_t dm_domid = sdss->pvqemu.guest_domid;
-    pid_t pid;
 
+    libxl__xs_write(gc, XBT_NULL,
+                   libxl__sprintf(gc, "%s/image/device-model-domid",
+                                  libxl__xs_get_dompath(gc, guest_domid)),
+                   "%d", dm_domid);
+
+	int32_t timeout = 0;
+	char * ready = NULL;
+    /* Block and wait for v4v firewall rules */
+    while (timeout < 30) {
+        ready = libxl__xs_read(gc, XBT_NULL, libxl__sprintf(gc, "%s/v4v-firewall-ready", libxl__xs_get_dompath(gc, guest_domid)));
+        if(ready)
+            break;
+        sleep(1);
+  	    timeout++;
+    }
+
+    pid_t pid;
     /* OpenXT: Start the QMP helper */
     pid = fork();
     if (pid == -1)
@@ -1573,10 +1590,6 @@ void libxl__spawn_stub_dm(libxl__egc *eg
     libxl__write_stub_dmargs(gc, dm_domid, guest_domid, args,
         guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX);
     libxl__xs_write(gc, XBT_NULL,
-                   libxl__sprintf(gc, "%s/image/device-model-domid",
-                                  libxl__xs_get_dompath(gc, guest_domid)),
-                   "%d", dm_domid);
-    libxl__xs_write(gc, XBT_NULL,
                    libxl__sprintf(gc, "%s/target",
                                   libxl__xs_get_dompath(gc, dm_domid)),
                    "%d", guest_domid);
Index: xen-4.6.5/tools/libxl/libxl_types.idl
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl_types.idl
+++ xen-4.6.5/tools/libxl/libxl_types.idl
@@ -449,6 +449,10 @@ libxl_domain_build_info = Struct("domain
     ("device_model_ssidref", uint32),
     ("device_model_ssid_label", string),
 
+    #display restrictions
+    ("display_depth", uint32),
+    ("display_res", uint32),
+
     # extra parameters pass directly to qemu, NULL terminated
     ("extra",            libxl_string_list),
     # extra parameters pass directly to qemu for PV guest, NULL terminated
Index: xen-4.6.5/tools/libxl/xl_cmdimpl.c
===================================================================
--- xen-4.6.5.orig/tools/libxl/xl_cmdimpl.c
+++ xen-4.6.5/tools/libxl/xl_cmdimpl.c
@@ -1270,8 +1270,9 @@ static void parse_config_data(const char
 {
     const char *buf;
     long l, vcpus = 0;
+    long vkb_flag, vfb_flag;
     XLU_Config *config;
-    XLU_ConfigList *cpus, *vbds, *nics, *pcis, *cvfbs, *cpuids, *vtpms;
+    XLU_ConfigList *cpus, *vbds, *nics, *pcis, *cpuids, *vtpms;
     XLU_ConfigList *channels, *ioports, *irqs, *iomem, *viridian, *dtdevs;
     int num_ioports, num_irqs, num_iomem, num_cpus, num_viridian;
     int pci_power_mgmt = 0;
@@ -1490,6 +1491,11 @@ static void parse_config_data(const char
 
     xlu_cfg_get_defbool(config, "driver_domain", &c_info->driver_domain, 0);
 
+    if(!xlu_cfg_get_long(config, "restrictdisplaydepth", &l, 0))
+        b_info->display_depth = l;
+    if(!xlu_cfg_get_long(config, "restrictdisplayres", &l, 0))
+        b_info->display_res = l;
+
     switch(b_info->type) {
     case LIBXL_DOMAIN_TYPE_HVM:
         kernel_basename = libxl_basename(b_info->kernel);
@@ -1955,64 +1961,38 @@ skip_nic:
         fprintf(stderr, "WARNING: vif2: netchannel2 is deprecated and not supported by xl\n");
     }
 
-    d_config->num_vfbs = 0;
-    d_config->num_vkbs = 0;
-    d_config->vfbs = NULL;
-    d_config->vkbs = NULL;
-
-    if (!xlu_cfg_get_list (config, "vfb", &cvfbs, 0, 0)) {
-        while ((buf = xlu_cfg_get_listitem (cvfbs, d_config->num_vfbs)) != NULL) {
-            libxl_device_vfb *vfb;
-            libxl_device_vkb *vkb;
-
-            char *buf2 = strdup(buf);
-            char *p, *p2;
-
-            vfb = ARRAY_EXTEND_INIT(d_config->vfbs, d_config->num_vfbs,
-                                    libxl_device_vfb_init);
-
-            vkb = ARRAY_EXTEND_INIT(d_config->vkbs, d_config->num_vkbs,
-                                    libxl_device_vkb_init);
-
-            p = strtok(buf2, ",");
-            if (!p)
-                goto skip_vfb;
-            do {
-                while (*p == ' ')
-                    p++;
-                if ((p2 = strchr(p, '=')) == NULL)
-                    break;
-                *p2 = '\0';
-                if (!strcmp(p, "vnc")) {
-                    libxl_defbool_set(&vfb->vnc.enable, atoi(p2 + 1));
-                } else if (!strcmp(p, "vnclisten")) {
-                    free(vfb->vnc.listen);
-                    vfb->vnc.listen = strdup(p2 + 1);
-                } else if (!strcmp(p, "vncpasswd")) {
-                    free(vfb->vnc.passwd);
-                    vfb->vnc.passwd = strdup(p2 + 1);
-                } else if (!strcmp(p, "vncdisplay")) {
-                    vfb->vnc.display = atoi(p2 + 1);
-                } else if (!strcmp(p, "vncunused")) {
-                    libxl_defbool_set(&vfb->vnc.findunused, atoi(p2 + 1));
-                } else if (!strcmp(p, "keymap")) {
-                    free(vfb->keymap);
-                    vfb->keymap = strdup(p2 + 1);
-                } else if (!strcmp(p, "sdl")) {
-                    libxl_defbool_set(&vfb->sdl.enable, atoi(p2 + 1));
-                } else if (!strcmp(p, "opengl")) {
-                    libxl_defbool_set(&vfb->sdl.opengl, atoi(p2 + 1));
-                } else if (!strcmp(p, "display")) {
-                    free(vfb->sdl.display);
-                    vfb->sdl.display = strdup(p2 + 1);
-                } else if (!strcmp(p, "xauthority")) {
-                    free(vfb->sdl.xauthority);
-                    vfb->sdl.xauthority = strdup(p2 + 1);
-                }
-            } while ((p = strtok(NULL, ",")) != NULL);
+    //Support adding vkbs by themselves
+    if (!xlu_cfg_get_long (config, "vkb", &vkb_flag, 0)){
+        d_config->num_vkbs = 0;
+        d_config->vkbs = NULL;
+
+        if (vkb_flag == 1) {
+            for(i = 0; i < 2; i++) {
+                libxl_device_vkb *vkb;
+                fprintf(stderr, "WARNING: init vkb device\n");
+                d_config->vkbs = (libxl_device_vkb *) realloc(d_config->vkbs,                          sizeof(libxl_device_vkb) * (d_config->num_vkbs + 1));
+                vkb = d_config->vkbs + d_config->num_vkbs;
+                libxl_device_vkb_init(vkb);
+                vkb->devid = d_config->num_vkbs;
+                fprintf(stderr, "WARNING: vkb device of devid %d created.\n", vkb->devid);
+                d_config->num_vkbs++;
+            }
+        }
+    }
 
-skip_vfb:
-            free(buf2);
+    if (!xlu_cfg_get_long (config, "vfb", &vfb_flag, 0)) {
+        d_config->num_vfbs = 0;
+        d_config->vfbs = NULL;
+
+        if (vfb_flag == 1) {
+            libxl_device_vfb * vfb;
+            fprintf(stderr, "WARNING: init vfb device\n");
+            d_config->vfbs = (libxl_device_vfb *) realloc(d_config->vfbs,                              sizeof(libxl_device_vfb) * (d_config->num_vfbs + 1));
+            vfb = d_config->vfbs + d_config->num_vfbs;
+            libxl_device_vfb_init(vfb);
+            vfb->devid = d_config->num_vfbs;
+            fprintf(stderr, "WARNING: vfb device of devid %d created.\n", vfb->devid);
+            d_config->num_vfbs++;
         }
     }
 
@@ -2701,8 +2681,10 @@ static uint32_t create_domain(struct dom
     int restore_fd_to_close = -1;
     const libxl_asyncprogress_how *autoconnect_console_how;
     struct save_file_header hdr;
+    int restoring;
 
-    int restoring = (restore_file || (migrate_fd >= 0));
+start:
+    restoring = (restore_file || (migrate_fd >= 0));
 
     libxl_domain_config_init(&d_config);
 
@@ -2872,7 +2854,6 @@ static uint32_t create_domain(struct dom
     if (dom_info->dryrun)
         goto out;
 
-start:
     assert(domid == INVALID_DOMID);
 
     rc = acquire_lock();
@@ -3015,8 +2996,6 @@ start:
                  */
                 dom_info->console_autoconnect = 0;
 
-                /* Some settings only make sense on first boot. */
-                paused = 0;
                 if (common_domname
                     && strcmp(d_config.c_info.name, common_domname)) {
                     d_config.c_info.name = strdup(common_domname);
@@ -3695,13 +3674,17 @@ static void unpause_domain(uint32_t domi
 static void destroy_domain(uint32_t domid, int force)
 {
     int rc;
-
+    libxl_uuid uuid;
     if (domid == 0 && !force) {
         fprintf(stderr, "Not destroying domain 0; use -f to force.\n"
                         "This can only be done when using a disaggregated "
                         "hardware domain and toolstack.\n\n");
         exit(-1);
     }
+
+    rc = libxl_domid_to_uuid(ctx, &uuid, domid);
+    if(rc) {fprintf(stderr, "domid to uuid failed during domain destroy\n"); exit(-1);}
+
     rc = libxl_domain_destroy(ctx, domid, 0);
     if (rc) { fprintf(stderr,"destroy failed (rc=%d)\n",rc); exit(-1); }
     libxl_update_state_direct(ctx, uuid, "shutdown");
@@ -3775,7 +3758,8 @@ static void hibernate_domain(uint32_t do
 static void shutdown_domain(uint32_t domid,
                             libxl_evgen_domain_death **deathw,
                             libxl_ev_user for_user,
-                            int fallback_trigger)
+                            int fallback_trigger,
+                            int hyper)
 {
     int rc;
 
@@ -3783,7 +3767,11 @@ static void shutdown_domain(uint32_t dom
     libxl_update_state(ctx, domid, "shutdowning");
     rc=libxl_domain_shutdown(ctx, domid);
     if (rc == ERROR_NOPARAVIRT) {
-        if (fallback_trigger) {
+        if (hyper) {
+            fprintf(stderr, "PV control interface not available:"
+                    " asking for hard shutdown.\n");
+            rc = libxl_hard_shutdown(ctx, domid);
+        } else if (fallback_trigger) {
             fprintf(stderr, "PV control interface not available:"
                     " sending ACPI power button event.\n");
             rc = libxl_send_trigger(ctx, domid, LIBXL_TRIGGER_POWER, 0);
@@ -3808,7 +3796,7 @@ static void shutdown_domain(uint32_t dom
 }
 
 static void reboot_domain(uint32_t domid, libxl_evgen_domain_death **deathw,
-                          libxl_ev_user for_user, int fallback_trigger)
+                          libxl_ev_user for_user, int fallback_trigger, int hyper)
 {
     int rc;
 
@@ -4900,10 +4888,10 @@ static int main_shutdown_or_reboot(int d
 {
     const char *what = do_reboot ? "reboot" : "shutdown";
     void (*fn)(uint32_t domid,
-               libxl_evgen_domain_death **, libxl_ev_user, int) =
+               libxl_evgen_domain_death **, libxl_ev_user, int, int) =
         do_reboot ? &reboot_domain : &shutdown_domain;
     int opt, i, nb_domain;
-    int wait_for_it = 0, all =0;
+    int wait_for_it = 0, all =0, hyper = 0;
     int fallback_trigger = 0;
     static struct option opts[] = {
         {"all", 0, 0, 'a'},
@@ -4911,7 +4899,7 @@ static int main_shutdown_or_reboot(int d
         COMMON_LONG_OPTS
     };
 
-    SWITCH_FOREACH_OPT(opt, "awF", opts, what, 0) {
+    SWITCH_FOREACH_OPT(opt, "awFc", opts, what, 0) {
     case 'a':
         all = 1;
         break;
@@ -4921,6 +4909,9 @@ static int main_shutdown_or_reboot(int d
     case 'F':
         fallback_trigger = 1;
         break;
+    case 'c':
+        hyper = 1;
+        break;
     }
 
     if (!argv[optind] && !all) {
@@ -4943,7 +4934,7 @@ static int main_shutdown_or_reboot(int d
             if (dominfo[i].domid == 0)
                 continue;
             fn(dominfo[i].domid, deathws ? &deathws[i] : NULL, i,
-               fallback_trigger);
+               fallback_trigger, hyper);
         }
 
         if (wait_for_it) {
@@ -4956,7 +4947,7 @@ static int main_shutdown_or_reboot(int d
         libxl_evgen_domain_death *deathw = NULL;
         uint32_t domid = find_domain(argv[optind]);
 
-        fn(domid, wait_for_it ? &deathw : NULL, 0, fallback_trigger);
+        fn(domid, wait_for_it ? &deathw : NULL, 0, fallback_trigger, hyper);
 
         if (wait_for_it)
             wait_for_domain_deaths(&deathw, 1);
Index: xen-4.6.5/tools/libxl/libxl_internal.h
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl_internal.h
+++ xen-4.6.5/tools/libxl/libxl_internal.h
@@ -1749,6 +1749,8 @@ _hidden int libxl__qmp_pci_del(libxl__gc
                                libxl_device_pci *pcidev);
 /* Resume hvm domain */
 _hidden int libxl__qmp_system_wakeup(libxl__gc *gc, int domid);
+/* Exit QEMU */
+_hidden int libxl__qmp_quit(libxl__gc *gc, int domid);
 /* Suspend QEMU. */
 _hidden int libxl__qmp_stop(libxl__gc *gc, int domid);
 /* Resume QEMU. */
Index: xen-4.6.5/tools/libxl/libxl_qmp.c
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl_qmp.c
+++ xen-4.6.5/tools/libxl/libxl_qmp.c
@@ -896,6 +896,11 @@ int libxl__qmp_system_wakeup(libxl__gc *
     return qmp_run_command(gc, domid, "system_wakeup", NULL, NULL, NULL);
 }
 
+int libxl__qmp_quit(libxl__gc *gc, int domid)
+{
+    return qmp_run_command(gc, domid, "quit", NULL, NULL, NULL);
+}
+
 int libxl__qmp_save(libxl__gc *gc, int domid, const char *filename)
 {
     libxl__json_object *args = NULL;
Index: xen-4.6.5/tools/libxl/libxl.h
===================================================================
--- xen-4.6.5.orig/tools/libxl/libxl.h
+++ xen-4.6.5/tools/libxl/libxl.h
@@ -1169,6 +1169,7 @@ int libxl_domain_remus_start(libxl_ctx *
                              const libxl_asyncop_how *ao_how)
                              LIBXL_EXTERNAL_CALLERS_ONLY;
 
+int libxl_hard_shutdown(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_shutdown(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_reboot(libxl_ctx *ctx, uint32_t domid);
 int libxl_domain_sleep(libxl_ctx *ctx, uint32_t domid);
