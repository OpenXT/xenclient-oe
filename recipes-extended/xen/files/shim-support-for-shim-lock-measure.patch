From 86e06607ac74f6c7fbe5b85dbc67bde75f1245c3 Mon Sep 17 00:00:00 2001
From: Tamas K Lengyel <tamas@tklengyel.com>
Date: Fri, 2 Feb 2018 17:39:56 -0700
Subject: [PATCH] Shim lock measure

Support measuring critical components into the TPM using shim_lock->Measure

Signed-off-by: Tamas K Lengyel <lengyelt@ainfosec.com>

--- a/xen/common/efi/boot.c
+++ b/xen/common/efi/boot.c
@@ -45,8 +45,17 @@ typedef EFI_STATUS
     IN const VOID *Buffer,
     IN UINT32 Size);
 
+typedef EFI_STATUS
+(/* _not_ EFIAPI */ *EFI_SHIM_LOCK_MEASURE) (
+    IN const VOID *Buffer,
+    IN UINT32 Size,
+    IN UINT8 Pcr);
+
 typedef struct {
     EFI_SHIM_LOCK_VERIFY Verify;
+    void* Hash;
+    void* Context;
+    EFI_SHIM_LOCK_MEASURE Measure;
 } EFI_SHIM_LOCK_PROTOCOL;
 
 struct _EFI_APPLE_PROPERTIES;
@@ -1139,7 +1148,7 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
     unsigned int i, argc;
     CHAR16 **argv, *file_name, *cfg_file_name = L"openxt.cfg", *options = NULL;
     UINTN gop_mode = ~0;
-    EFI_SHIM_LOCK_PROTOCOL *shim_lock;
+    EFI_SHIM_LOCK_PROTOCOL *shim_lock = NULL;
     EFI_GRAPHICS_OUTPUT_PROTOCOL *gop = NULL;
     union string section = { NULL }, name;
     bool base_video = false;
@@ -1224,6 +1233,8 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
     PrintStr(L"Xen " __stringify(XEN_VERSION) "." __stringify(XEN_SUBVERSION)
              XEN_EXTRAVERSION " (c/s " XEN_CHANGESET ") EFI loader\r\n");
 
+    efi_bs->LocateProtocol(&shim_lock_guid, NULL, (void **)&shim_lock);
+
     efi_arch_relocate_image(0);
 
     if ( use_cfg_file )
@@ -1264,6 +1275,11 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
         }
         else if ( !read_file(dir_handle, cfg_file_name, &cfg, NULL) )
             blexit(L"Configuration file not found.");
+
+        if ( shim_lock &&
+            (status = shim_lock->Measure(cfg.ptr, cfg.size, 8)) != EFI_SUCCESS )
+                PrintErrMesg(L"Configuration file could not be measured", status);
+
         pre_parse(&cfg);
 
         if ( section.w )
@@ -1313,6 +1329,11 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
             {
                 read_file(dir_handle, s2w(&name), &ramdisk, NULL);
                 efi_bs->FreePool(name.w);
+
+                if ( shim_lock &&
+                    (status = shim_lock->Measure(ramdisk.ptr, ramdisk.size, 8))
+                     != EFI_SUCCESS )
+                        PrintErrMesg(L"ramdisk could not be measured", status);
             }
         }
 
@@ -1323,6 +1344,11 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
             {
                 read_file(dir_handle, s2w(&name), &xsm, NULL);
                 efi_bs->FreePool(name.w);
+
+                if ( shim_lock &&
+                    (status = shim_lock->Measure(xsm.ptr, xsm.size, 8))
+                     != EFI_SUCCESS)
+                        PrintErrMesg(L"XSM policy could not be measured", status);
             }
         }
 
@@ -1386,11 +1412,22 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SY
      * device tree through the efi_check_dt_boot function, in this stage
      * verify it.
      */
-    if ( kernel.ptr &&
-         !EFI_ERROR(efi_bs->LocateProtocol(&shim_lock_guid, NULL,
-                                           (void **)&shim_lock)) &&
-         (status = shim_lock->Verify(kernel.ptr, kernel.size)) != EFI_SUCCESS )
-        PrintErrMesg(L"Dom0 kernel image could not be verified", status);
+    if ( kernel.ptr && shim_lock ) {
+        if ( efi_secureboot_enabled() )
+        {
+            if ( (status = shim_lock->Verify(kernel.ptr, kernel.size))
+                != EFI_SUCCESS )
+                PrintErrMesg(L"Dom0 kernel image could not be verified",
+                             status);
+        }
+        else
+        {
+            if ( (status = shim_lock->Measure(kernel.ptr, kernel.size, 4))
+                != EFI_SUCCESS )
+                PrintErrMesg(L"Dom0 kernel image could not be measured",
+                             status);
+        }
+    }
 
     efi_arch_edd();
 
--- a/xen/common/efi/runtime.c
+++ b/xen/common/efi/runtime.c
@@ -211,6 +211,32 @@ void efi_reset_system(bool warm)
     printk(XENLOG_WARNING "EFI: could not reset system (%#lx)\n", status);
 }
 
+bool efi_secureboot_enabled(void)
+{
+    EFI_GUID efi_gv = EFI_GLOBAL_VARIABLE;
+    UINT8 SecureBoot = 0, SetupMode = 0;
+    UINTN DataSize = sizeof(SecureBoot);
+    EFI_STATUS efi_status;
+
+    efi_status = efi_rs->GetVariable(L"SecureBoot", &efi_gv, NULL,
+                                     &DataSize, &SecureBoot);
+    if ( EFI_ERROR(efi_status) )
+        return false;
+
+    if ( !SecureBoot )
+        return false;
+
+    efi_status = efi_rs->GetVariable(L"SetupMode", &efi_gv, NULL,
+                                     &DataSize, &SetupMode);
+    if ( EFI_ERROR(efi_status) )
+        return false;
+
+    if ( SetupMode )
+        return false;
+
+    return true;
+}
+
 #endif /* CONFIG_ARM */
 
 const CHAR16 *wmemchr(const CHAR16 *s, CHAR16 c, UINTN n)
--- a/xen/include/xen/efi.h
+++ b/xen/include/xen/efi.h
@@ -44,6 +44,7 @@ int efi_runtime_call(struct xenpf_efi_ru
 #endif
 int efi_compat_get_info(uint32_t idx, union compat_pf_efi_info *);
 int efi_compat_runtime_call(struct compat_pf_efi_runtime_call *);
+bool efi_secureboot_enabled(void);
 
 #endif /* !__ASSEMBLY__ */
 
