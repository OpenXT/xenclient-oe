################################################################################
SHORT DESCRIPTION: 
################################################################################
Changes to support PCI passthrough with the new QEmu without the need for
multiple ioreq servers.

################################################################################
LONG DESCRIPTION: 
################################################################################
Stubdomains need to be given sufficient privilege over the guest which it
provides emulation for in order for PCI passthrough to work correctly.

The capability for multiple device models (the ioreq server patch) was removed
as the current implementation of it is far different from what upstream Xen has
settled on in 4.5.

OXT-118

################################################################################
CHANGELOG 
################################################################################
Authors:
    Signed-off: Eric Chanudet <chanudete@ainfosec.com> (stubdom permissions)
    Signed-off: Rian Quinn <quinnr@ainfosec.com> (ioreq removal)

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
Index: xen-4.6.5/xen/arch/x86/physdev.c
===================================================================
--- xen-4.6.5.orig/xen/arch/x86/physdev.c
+++ xen-4.6.5/xen/arch/x86/physdev.c
@@ -144,9 +144,41 @@ int physdev_map_pirq(domid_t domid, int
         if ( !msi->table_base )
             msi->entry_nr = 1;
         irq = *index;
-        if ( irq == -1 )
-    case MAP_PIRQ_TYPE_MULTI_MSI:
+        if ( irq == -1 ) {
             irq = create_irq(NUMA_NO_NODE);
+            /* Allow stubdomain to deal with this IRQ. */
+            if ( d == current->domain->target )
+            {
+                ret = irq_permit_access(current->domain, irq);
+                if ( ret )
+                    printk(XENLOG_G_ERR "Could not grant stubdom%u access to IRQ%d (error %d)\n",
+                           current->domain->domain_id, irq, ret);
+
+            }
+        }
+
+        if ( irq < nr_irqs_gsi || irq >= nr_irqs )
+        {
+            dprintk(XENLOG_G_ERR, "dom%d: can't create irq for msi!\n",
+                    d->domain_id);
+            ret = -EINVAL;
+            goto free_domain;
+        }
+
+        msi->irq = irq;
+        map_data = msi;
+        break;
+    case MAP_PIRQ_TYPE_MULTI_MSI:
+        irq = create_irq(NUMA_NO_NODE);
+        /* Allow stubdomain to deal with this IRQ. */
+        if ( d == current->domain->target )
+        {
+            ret = irq_permit_access(current->domain, irq);
+            if ( ret )
+                printk(XENLOG_G_ERR "Could not grant stubdom%u access to IRQ%d (error %d)\n",
+                       current->domain->domain_id, irq, ret);
+
+        }
 
         if ( irq < nr_irqs_gsi || irq >= nr_irqs )
         {
@@ -243,8 +275,20 @@ int physdev_map_pirq(domid_t domid, int
         {
         case MAP_PIRQ_TYPE_MSI:
             if ( *index == -1 )
-        case MAP_PIRQ_TYPE_MULTI_MSI:
+            {
+                if ( (d == current->domain->target) &&
+                     irq_deny_access(current->domain, irq) )
+                    printk(XENLOG_G_ERR "dom%d: could not revoke access to IRQ%d.\n",
+                           d->domain_id, irq );
                 destroy_irq(irq);
+            }
+            break;
+        case MAP_PIRQ_TYPE_MULTI_MSI:
+            destroy_irq(irq);
+            if ( (d == current->domain->target) &&
+                  irq_deny_access(current->domain, irq) )
+                printk(XENLOG_G_ERR "dom%d: could not revoke access to IRQ%d.\n",
+                       d->domain_id, irq );
             break;
         }
  free_domain:
@@ -277,6 +321,18 @@ int physdev_unmap_pirq(domid_t domid, in
 
     spin_lock(&pcidevs_lock);
     spin_lock(&d->event_lock);
+    /* Remove stubdomain's permission on IRQ. */
+    if (d == current->domain->target)
+    {
+        int irq;
+
+        irq = domain_pirq_to_irq(d, pirq);
+        if ( irq <= 0 )
+            printk(XENLOG_G_ERR "dom%d invalid pirq:%d!\n", d->domain_id, pirq);
+        else if ( irq_deny_access(current->domain, irq) )
+            printk(XENLOG_G_ERR "Could not revoke stubdom%u access to IRQ%d.\n",
+                        current->domain->domain_id, irq);
+    }
     ret = unmap_domain_pirq(d, pirq);
     spin_unlock(&d->event_lock);
     spin_unlock(&pcidevs_lock);
