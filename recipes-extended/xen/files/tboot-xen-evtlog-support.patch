################################################################################
SHORT DESCRIPTION:
################################################################################
Add new hypercall to provide access to the TXT event log.

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################
Written for OpenXT. Feature introduced in the stable-7 release.
Patch updated for Xen 4.8, 4.9.

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Yes if we can. Work needed on it first.

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################
--- /dev/null
+++ b/xen/include/public/txt.h
@@ -0,0 +1,64 @@
+/******************************************************************************
+ * txt.h
+ *
+ * Control domain TXT/TPM services.
+ *
+ * Copyright (c) 2017 Assured Information Security, Inc
+ *
+ * Authors:
+ * Ross Philipson <philipsonr@ainfosec.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to
+ * deal in the Software without restriction, including without limitation the
+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+ * sell copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef __XEN_PUBLIC_TXT_H__
+#define __XEN_PUBLIC_TXT_H__
+
+#include "xen.h"
+
+/* version of ABI */
+#define TXT_SPEC_VERSION          1
+
+/*
+ * Return TXT TPM event log
+ *
+ * @arg == pointer to xen_txt_evtlog_t input/output structure.
+ */
+#define TXTOP_evtlog    0
+
+struct xen_txt_evtlog {
+    /* IN/OUT */
+    uint64_t  size;
+    /* OUT */
+    XEN_GUEST_HANDLE(void) buffer;
+};
+typedef struct xen_txt_evtlog xen_txt_evtlog_t;
+DEFINE_XEN_GUEST_HANDLE(xen_txt_evtlog_t);
+
+#endif /* __XEN_PUBLIC_TXT_H__ */
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
--- a/xen/arch/x86/hvm/hypercall.c
+++ b/xen/arch/x86/hvm/hypercall.c
@@ -139,6 +139,9 @@ static const hypercall_table_t hvm_hyper
     COMPAT_CALL(mmuext_op),
     HYPERCALL(xenpmu_op),
     COMPAT_CALL(dm_op),
+#ifdef CONFIG_TXT_OP
+    HYPERCALL(txt_op),
+#endif
     HYPERCALL(arch_1)
 };
 
--- a/xen/arch/x86/hypercall.c
+++ b/xen/arch/x86/hypercall.c
@@ -68,6 +68,9 @@ const hypercall_args_t hypercall_args_ta
     ARGS(v4v_op, 6),
     ARGS(xenpmu_op, 2),
     ARGS(dm_op, 3),
+#ifdef CONFIG_TXT_OP
+    ARGS(txt_op, 3),
+#endif
     ARGS(mca, 1),
     ARGS(arch_1, 1),
 };
--- a/xen/arch/x86/pv/hypercall.c
+++ b/xen/arch/x86/pv/hypercall.c
@@ -81,6 +81,9 @@ const hypercall_table_t pv_hypercall_tab
     HYPERCALL(v4v_op),
     HYPERCALL(xenpmu_op),
     COMPAT_CALL(dm_op),
+#ifdef CONFIG_TXT_OP
+    HYPERCALL(txt_op),
+#endif
     HYPERCALL(mca),
     HYPERCALL(arch_1),
 };
--- a/xen/arch/x86/tboot.c
+++ b/xen/arch/x86/tboot.c
@@ -3,6 +3,7 @@
 #include <xen/lib.h>
 #include <xen/sched.h>
 #include <xen/domain_page.h>
+#include <xen/guest_access.h>
 #include <xen/iommu.h>
 #include <xen/acpi.h>
 #include <xen/pfn.h>
@@ -13,6 +14,9 @@
 #include <asm/tboot.h>
 #include <asm/setup.h>
 #include <crypto/vmac.h>
+#include <xen/vmap.h>
+#include <xen/hypercall.h>
+#include <public/txt.h>
 
 /* tboot=<physical address of shared page> */
 static unsigned long __initdata opt_tboot_pa;
@@ -548,6 +552,64 @@ int tboot_wake_ap(int apicid, unsigned l
     return 1;
 }
 
+long do_txt_op(unsigned int cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
+{
+    long ret = 0;
+
+    switch (cmd) {
+    case TXTOP_evtlog: {
+        struct xen_txt_evtlog evtlog;
+        void *va_evtlog;
+        XEN_GUEST_HANDLE(void) buffer_hnd;
+
+        if ( !g_tboot_shared )
+            return -ENOSYS;
+
+        /* TODO Add XSM check here */
+
+        if ( copy_from_guest(&evtlog, arg, 1) )
+            return -EFAULT;
+
+        /* Does the guest need to know the size? */
+        if ( evtlog.size == 0 ) {
+            evtlog.size = g_tboot_shared->evt_log_size;
+
+            if ( copy_to_guest(arg, &evtlog, 1) )
+                return -EFAULT;
+
+            break;
+        }
+
+        if ( evtlog.size < g_tboot_shared->evt_log_size )
+            return -EINVAL;
+
+        /* Map the event log region into Xen's virt mem */
+        va_evtlog = ioremap(g_tboot_shared->evt_log_region,
+                            g_tboot_shared->evt_log_size);
+        if ( !va_evtlog )
+            return -ENOMEM;
+
+        evtlog.size = g_tboot_shared->evt_log_size;
+        if ( copy_to_guest(arg, &evtlog, 1) ) {
+            iounmap(va_evtlog);
+            return -EFAULT;
+        }
+
+        buffer_hnd = guest_handle_cast(evtlog.buffer, void);
+        if ( copy_to_guest(buffer_hnd, va_evtlog, evtlog.size) )
+            ret = -EFAULT;
+
+        iounmap(va_evtlog);
+
+        break;
+    }
+    default:
+        ret = -ENOSYS;
+    }
+
+    return ret;
+}
+
 /*
  * Local variables:
  * mode: C
--- a/xen/include/asm-x86/tboot.h
+++ b/xen/include/asm-x86/tboot.h
@@ -102,6 +102,9 @@ typedef struct __packed {
     uint32_t  flags;
     uint64_t  ap_wake_addr;      /* phys addr of kernel/VMM SIPI vector */
     uint32_t  ap_wake_trigger;   /* kernel/VMM writes APIC ID to wake AP */
+    /* TPM event log fields: */
+    uint64_t  evt_log_size;      /* size of e820 TPM event log(s) region */
+    uint64_t  evt_log_region;    /* e820 region containing TPM event log(s) */
 } tboot_shared_t;
 
 #define TB_SHUTDOWN_REBOOT      0
--- a/xen/include/public/xen.h
+++ b/xen/include/public/xen.h
@@ -121,6 +121,7 @@ DEFINE_XEN_GUEST_HANDLE(xen_ulong_t);
 #define __HYPERVISOR_v4v_op               39 /* reserved for XenClient */
 #define __HYPERVISOR_xenpmu_op            40
 #define __HYPERVISOR_dm_op                41
+#define __HYPERVISOR_txt_op               42
 
 /* Architecture-specific hypercall definitions. */
 #define __HYPERVISOR_arch_0               48
--- a/xen/include/xen/hypercall.h
+++ b/xen/include/xen/hypercall.h
@@ -148,6 +148,11 @@ do_dm_op(
     unsigned int nr_bufs,
     XEN_GUEST_HANDLE_PARAM(xen_dm_op_buf_t) bufs);

+#ifdef CONFIG_TXT_OP 
+extern long
+do_txt_op(unsigned int cmd, XEN_GUEST_HANDLE_PARAM(void) arg);
+
+#endif
 #ifdef CONFIG_COMPAT
 
 extern int
