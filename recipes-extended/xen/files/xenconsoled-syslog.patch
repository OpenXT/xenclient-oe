################################################################################
SHORT DESCRIPTION: 
################################################################################
Enable Xen dmesg logging to syslog.

################################################################################
LONG DESCRIPTION: 
################################################################################
Makes xenconsoled reports guests logs to syslog by default (instead of
individual logging files). Use --log-dir=<path> revert this behavior to normal,
loging guests in individual files written in <path>.

################################################################################
CHANGELOG 
################################################################################

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Possibly upstreamable if it was cleaned up a bit.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/tools/console/daemon/io.c
+++ b/tools/console/daemon/io.c
@@ -57,9 +57,11 @@
 #define MAX_STRLEN(x) ((sizeof(x) * CHAR_BIT + CHAR_BIT-1) / 10 * 3 + 2)
 
 /* How many events are allowed in each time period */
-#define RATE_LIMIT_ALLOWANCE 30
+#define RATE_LIMIT_ALLOWANCE 300
 /* Duration of each time period in ms */
 #define RATE_LIMIT_PERIOD 200
+/* Syslog buffer size */
+#define SYSLOG_BUFFER_SIZE 1024
 
 extern int log_reload;
 extern int log_guest;
@@ -85,8 +87,8 @@ static unsigned int nr_fds;
 struct buffer {
 	char *data;
 	size_t consumed;
-	size_t size;
-	size_t capacity;
+	size_t size;         /* Amount of data currently in the buffer */
+	size_t capacity;     /* Amount of allocated data for the buffer */
 	size_t max_capacity;
 };
 
@@ -143,8 +145,10 @@ static struct console_type console_type[
 
 struct domain {
 	int domid;
+	char *name;
 	bool is_dead;
 	unsigned last_seen;
+	struct buffer slbuffer;
 	struct domain *next;
 	struct console console[NUM_CONSOLE_TYPE];
 };
@@ -157,6 +161,59 @@ typedef void (*VOID_ITER_FUNC_ARG2)(stru
 typedef int (*INT_ITER_FUNC_ARG3)(struct console *,
 				  struct domain *dom, void **);
 
+
+static void flush_slb(struct domain *dom, struct buffer *slb)
+{
+	syslog(LOG_INFO, "%s (%i): %.*s", dom->name, dom->domid, (int)slb->size, slb->data);
+	slb->size = 0;
+}
+
+static void cutlines(struct domain *dom, struct buffer *b, int i)
+{
+	struct buffer *slb = &dom->slbuffer;
+
+	while (i < b->size) {
+		if (slb->size >= slb->capacity)
+			flush_slb(dom, slb); /* line too long */
+
+		if (!(b->data[i] == '\n' || b->data[i] == '\r'))
+			slb->data[slb->size++] = b->data[i];
+		else if (slb->size > 0)
+			flush_slb(dom, slb); /* line end marker detected */
+		++i;
+	}
+}
+
+static char *safe_xs_read(const char *key, int tries)
+{
+	char *data = NULL;
+	unsigned int len;
+	struct timespec req = { .tv_sec = 0, .tv_nsec = 100000000 }; /* 100 ms */
+	int i;
+
+	for (i = 0; i < tries; i++) {
+		data = xs_read(xs, XBT_NULL, key, &len);
+		if (data && len > 0)
+			break;
+		free(data);
+		nanosleep(&req, NULL);
+	}
+	return data;
+}
+
+static char *name_from_dompath(const char *path)
+{
+	char namepath[64] = { 0 }, *name;
+	strncat( namepath, path , sizeof(namepath) - 1 );
+	strncat( namepath, "/name", sizeof(namepath) - strlen(namepath) - 1 );
+
+	name = safe_xs_read(namepath, 1);
+	/* without any name after 100 tries, just default to unnamed */
+	if (!name)
+		name = strdup("unnamed");
+	return name;
+}
+
 static inline bool console_enabled(struct console *con)
 {
 	return con->local_port != -1;
@@ -323,7 +380,7 @@ static void buffer_append(struct console
 	if ((size == 0) || (size > sizeof(intf->out)))
 		return;
 
-	if ((buffer->capacity - buffer->size) < size) {
+	if ((buffer->capacity - buffer->size) < size + 1) {
 		buffer->capacity += (size + 1024);
 		buffer->data = realloc(buffer->data, buffer->capacity);
 		if (buffer->data == NULL) {
@@ -332,9 +389,11 @@ static void buffer_append(struct console
 		}
 	}
 
-	while (cons != prod)
-		buffer->data[buffer->size++] = intf->out[
-			MASK_XENCONS_IDX(cons++, intf->out)];
+	while (cons != prod) {
+		char ch = intf->out[MASK_XENCONS_IDX(cons, intf->out)];
+		buffer->data[buffer->size++] = ch;
+		++cons;
+	}
 
 	xen_mb();
 	intf->out_cons = cons;
@@ -361,6 +420,8 @@ static void buffer_append(struct console
 			dolog(LOG_ERR, "Write to log failed "
 			      "on domain %d: %d (%s)\n",
 			      dom->domid, errno, strerror(errno));
+	} else {
+		cutlines(dom, buffer, buffer->size - size);
 	}
 
 	if (discard_overflowed_data && buffer->max_capacity &&
@@ -420,7 +481,12 @@ static int create_hv_log(void)
 {
 	char logfile[PATH_MAX];
 	int fd;
-	snprintf(logfile, PATH_MAX-1, "%s/hypervisor.log", log_dir);
+
+	if (!log_dir) {
+		return -1;
+	} else {
+		snprintf(logfile, PATH_MAX-1, "%s/hypervisor.log", log_dir);
+	}
 	logfile[PATH_MAX-1] = '\0';
 
 	fd = open(logfile, O_WRONLY|O_CREAT|O_APPEND, 0644);
@@ -444,35 +510,29 @@ static int create_hv_log(void)
 static int create_console_log(struct console *con)
 {
 	char logfile[PATH_MAX];
-	char *namepath, *data, *s;
+	char *dompath;
 	int fd;
-	unsigned int len;
 	struct domain *dom = con->d;
 
-	namepath = xs_get_domain_path(xs, dom->domid);
-	s = realloc(namepath, strlen(namepath) + 6);
-	if (s == NULL) {
-		free(namepath);
+	dompath = xs_get_domain_path(xs, dom->domid);
+	if (!dompath) {
 		return -1;
 	}
-	namepath = s;
-	strcat(namepath, "/name");
-	data = xs_read(xs, XBT_NULL, namepath, &len);
-	free(namepath);
-	if (!data)
+	dom->name = name_from_dompath(dompath);
+	free(dompath);
+	if (!dom->name) {
 		return -1;
-	if (!len) {
-		free(data);
+	}
+	if (!log_dir) {
 		return -1;
 	}
 
-	snprintf(logfile, PATH_MAX-1, "%s/guest-%s%s.log",
-		 log_dir, data, con->log_suffix);
+	snprintf(logfile, PATH_MAX - 1, "%s/%s.log",
+		 log_dir, dom->name);
 
-	free(data);
 	logfile[PATH_MAX-1] = '\0';
 
-	fd = open(logfile, O_WRONLY|O_CREAT|O_APPEND, 0644);
+	fd = open(logfile, O_WRONLY | O_CREAT | O_APPEND, 0644);
 	if (fd == -1)
 		dolog(LOG_ERR, "Failed to open log %s: %d (%s)",
 		      logfile, errno, strerror(errno));
@@ -631,6 +691,12 @@ static int console_create_tty(struct con
 	if (fcntl(con->master_fd, F_SETFL, O_NONBLOCK) == -1)
 		goto out;
 
+	memset(&dom->slbuffer, 0, sizeof(dom->slbuffer));
+	dom->slbuffer.capacity = dom->slbuffer.max_capacity = SYSLOG_BUFFER_SIZE;
+	dom->slbuffer.data = malloc(dom->slbuffer.capacity);
+	if (!dom->slbuffer.data)
+		goto out;
+
 	return 1;
 out:
 	console_close_tty(con);
@@ -833,6 +899,7 @@ static int console_init(struct console *
 	con->local_port = -1;
 	con->remote_port = -1;
 	con->xce_pollfd_idx = -1;
+	dom->name = NULL;
 	con->next_period = ((long long)ts.tv_sec * 1000) + (ts.tv_nsec / 1000000) + RATE_LIMIT_PERIOD;
 	con->d = dom;
 	con->ttyname = (*con_type)->ttyname;
@@ -930,6 +997,14 @@ static void console_cleanup(struct conso
 
 	free(con->xspath);
 	con->xspath = NULL;
+
+	free(con->d->slbuffer.data);
+	con->d->slbuffer.data = NULL;
+
+	if (con->d->name) {
+		free(con->d->name);
+		con->d->name = NULL;
+	}
 }
 
 static void cleanup_domain(struct domain *d)
@@ -1157,7 +1232,10 @@ static void handle_xs(void)
 
 static void handle_hv_logs(xenevtchn_handle *xce_handle, bool force)
 {
-	static char buffer[1024*16];
+	char buffer[1024*16 + 1];
+	static char lbuf[1024*16 + 1];
+	static int loff = 0;
+	int i = 0;
 	char *bufptr = buffer;
 	unsigned int size;
 	static uint32_t index = 0;
@@ -1166,25 +1244,47 @@ static void handle_hv_logs(xenevtchn_han
 	if (!force && ((port = xenevtchn_pending(xce_handle)) == -1))
 		return;
 
-	do
-	{
-		int logret;
+	if (log_hv_fd != -1) {
+		do
+		{
+			int logret;
+
+			size = sizeof(buffer);
+			if (xc_readconsolering(xc, bufptr, &size, 0, 1, &index) != 0 ||
+		    	    size == 0)
+				break;
+
+			if (log_time_hv)
+				logret = write_with_timestamp(log_hv_fd, buffer, size,
+							      &log_time_hv_needts);
+			else
+				logret = write_all(log_hv_fd, buffer, size);
 
+			if (logret < 0)
+				dolog(LOG_ERR, "Failed to write hypervisor log: "
+				      "%d (%s)", errno, strerror(errno));
+		} while (size == sizeof(buffer));
+	} else {
 		size = sizeof(buffer);
-		if (xc_readconsolering(xc, bufptr, &size, 0, 1, &index) != 0 ||
-		    size == 0)
-			break;
-
-		if (log_time_hv)
-			logret = write_with_timestamp(log_hv_fd, buffer, size,
-						      &log_time_hv_needts);
-		else
-			logret = write_all(log_hv_fd, buffer, size);
-
-		if (logret < 0)
-			dolog(LOG_ERR, "Failed to write hypervisor log: "
-				       "%d (%s)", errno, strerror(errno));
-	} while (size == sizeof(buffer));
+		if (xc_readconsolering(xc, bufptr, &size, 0, 1, &index) == 0 && size > 0) {
+			while (i < size) {
+				while ((i < size) &&
+				       (buffer[i] != '\n') && (buffer[i] != '\r')) {
+					lbuf[loff++] = buffer[i++];
+				}
+				if ((buffer[i] == '\n') || (buffer[i] == '\r')) {
+					lbuf[loff] = '\0';
+					++i;
+					if ((i < size) &&
+					    ((buffer[i] == '\n') || (buffer[i] == '\r'))) {
+						++i;
+					}
+					syslog(LOG_INFO, "hypervisor: %s", lbuf);
+					loff = 0;
+				}
+			}
+		}
+        }
 
 	if (port != -1)
 		(void)xenevtchn_unmask(xce_handle, port);
@@ -1326,8 +1426,6 @@ void handle_io(void)
 			goto out;
 		}
 		log_hv_fd = create_hv_log();
-		if (log_hv_fd == -1)
-			goto out;
 		log_hv_evtchn = xenevtchn_bind_virq(xce_handle, VIRQ_CON_RING);
 		if (log_hv_evtchn == -1) {
 			dolog(LOG_ERR, "Failed to bind to VIRQ_CON_RING: "
--- a/tools/console/daemon/main.c
+++ b/tools/console/daemon/main.c
@@ -25,6 +25,7 @@
 #include <string.h>
 #include <signal.h>
 #include <sys/types.h>
+#include <sys/time.h>
 #include <sys/resource.h>
 
 #include "xenctrl.h"
@@ -182,10 +183,6 @@ int main(int argc, char **argv)
 		}
 	}
 
-	if (!log_dir) {
-		log_dir = strdup(XEN_LOG_DIR "/console");
-	}
-
 	if (geteuid() != 0) {
 		fprintf(stderr, "%s requires root to run.\n", argv[0]);
 		exit(EPERM);
@@ -194,7 +191,6 @@ int main(int argc, char **argv)
 	signal(SIGHUP, handle_hup);
 
 	openlog("xenconsoled", syslog_option, LOG_DAEMON);
-	setlogmask(syslog_mask);
 
 	increase_fd_limit();
 
