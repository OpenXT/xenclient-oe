################################################################################
SHORT DESCRIPTION: 
################################################################################
Disable TMEM stats in the xenstat tools.

################################################################################
LONG DESCRIPTION: 
################################################################################
TMEM is not used in OpenXT and access to TMEM information through hypercalls
is blocked by XSM. The tool should not try to access TMEM information.

################################################################################
CHANGELOG 
################################################################################
Created by: Ross Philipson, philipsonr@ainfosec.com, 11/19/2016

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################
Once we have a version of Xen that support Kconfig, TMEM can be disabled with
that. If done properly it should disable TMEM stats in this tool just as this
patch does. This patch can be removed at that point.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

################################################################################
PATCHES 
################################################################################
--- a/tools/xenstat/libxenstat/src/xenstat.c
+++ b/tools/xenstat/libxenstat/src/xenstat.c
@@ -145,6 +145,7 @@ static inline unsigned long long parse(c
 	return ret;
 }
 
+#ifdef TMEM_STATS
 void domain_get_tmem_stats(xenstat_handle * handle, xenstat_domain * domain)
 {
 	char buffer[4096];
@@ -157,6 +158,7 @@ void domain_get_tmem_stats(xenstat_handl
 	domain->tmem_stats.succ_pers_puts = parse(buffer,"Pp");
 	domain->tmem_stats.succ_pers_gets = parse(buffer,"Gp");
 }
+#endif
 
 xenstat_node *xenstat_get_node(xenstat_handle * handle, unsigned int flags)
 {
@@ -166,7 +168,9 @@ xenstat_node *xenstat_get_node(xenstat_h
 	xc_domaininfo_t domaininfo[DOMAIN_CHUNK_SIZE];
 	int new_domains;
 	unsigned int i;
+#ifdef TMEM_STATS
 	int rc;
+#endif
 
 	/* Create the node */
 	node = (xenstat_node *) calloc(1, sizeof(xenstat_node));
@@ -190,9 +194,12 @@ xenstat_node *xenstat_get_node(xenstat_h
 	node->free_mem = ((unsigned long long)physinfo.free_pages)
 	    * handle->page_size;
 
+#ifdef TMEM_STATS
 	rc = xc_tmem_control(handle->xc_handle, -1,
                          XEN_SYSCTL_TMEM_OP_QUERY_FREEABLE_MB, -1, 0, 0, NULL);
 	node->freeable_mb = (rc < 0) ? 0 : rc;
+#endif
+
 	/* malloc(0) is not portable, so allocate a single domain.  This will
 	 * be resized below. */
 	node->domains = malloc(sizeof(xenstat_domain));
@@ -260,7 +267,9 @@ xenstat_node *xenstat_get_node(xenstat_h
 			domain->networks = NULL;
 			domain->num_vbds = 0;
 			domain->vbds = NULL;
+#ifdef TMEM_STATS
 			domain_get_tmem_stats(handle,domain);
+#endif
 
 			domain++;
 			node->num_domains++;
@@ -342,10 +351,12 @@ unsigned long long xenstat_node_free_mem
 	return node->free_mem;
 }
 
+#ifdef TMEM_STATS
 long xenstat_node_freeable_mb(xenstat_node * node)
 {
 	return node->freeable_mb;
 }
+#endif
 
 unsigned int xenstat_node_num_domains(xenstat_node * node)
 {
@@ -729,6 +740,7 @@ unsigned long long xenstat_vbd_wr_sects(
 	return vbd->wr_sects;
 }
 
+#ifdef TMEM_STATS
 /*
  * Tmem functions
  */
@@ -761,7 +773,7 @@ unsigned long long xenstat_tmem_succ_per
 {
 	return tmem->succ_pers_gets;
 }
-
+#endif
 
 static char *xenstat_get_domain_name(xenstat_handle *handle, unsigned int domain_id)
 {
--- a/tools/xenstat/libxenstat/src/xenstat.h
+++ b/tools/xenstat/libxenstat/src/xenstat.h
@@ -27,7 +27,9 @@ typedef struct xenstat_node xenstat_node
 typedef struct xenstat_vcpu xenstat_vcpu;
 typedef struct xenstat_network xenstat_network;
 typedef struct xenstat_vbd xenstat_vbd;
+#ifdef TMEM_STATS
 typedef struct xenstat_tmem xenstat_tmem;
+#endif
 
 /* Initialize the xenstat library.  Returns a handle to be used with
  * subsequent calls to the xenstat library, or NULL if an error occurs. */
@@ -70,8 +72,10 @@ unsigned long long xenstat_node_tot_mem(
 /* Get amount of free memory on a node */
 unsigned long long xenstat_node_free_mem(xenstat_node * node);
 
+#ifdef TMEM_STATS
 /* Get amount of tmem freeable memory (in MiB) on a node */
 long xenstat_node_freeable_mb(xenstat_node * node);
+#endif
 
 /* Find the number of domains existing on a node */
 unsigned int xenstat_node_num_domains(xenstat_node * node);
@@ -133,8 +137,10 @@ unsigned int xenstat_domain_num_vbds(xen
 xenstat_vbd *xenstat_domain_vbd(xenstat_domain * domain,
 				    unsigned int vbd);
 
+#ifdef TMEM_STATS
 /* Get the tmem information for a given domain */
 xenstat_tmem *xenstat_domain_tmem(xenstat_domain * domain);
+#endif
 
 /*
  * VCPU functions - extract information from a xenstat_vcpu
@@ -193,6 +199,7 @@ unsigned long long xenstat_vbd_wr_reqs(x
 unsigned long long xenstat_vbd_rd_sects(xenstat_vbd * vbd);
 unsigned long long xenstat_vbd_wr_sects(xenstat_vbd * vbd);
 
+#ifdef TMEM_STATS
 /*
  * Tmem functions - extract tmem information
  */
@@ -200,5 +207,6 @@ unsigned long long xenstat_tmem_curr_eph
 unsigned long long xenstat_tmem_succ_eph_gets(xenstat_tmem *tmem);
 unsigned long long xenstat_tmem_succ_pers_puts(xenstat_tmem *tmem);
 unsigned long long xenstat_tmem_succ_pers_gets(xenstat_tmem *tmem);
+#endif
 
 #endif /* XENSTAT_H */
--- a/tools/xenstat/libxenstat/src/xenstat_priv.h
+++ b/tools/xenstat/libxenstat/src/xenstat_priv.h
@@ -49,15 +49,19 @@ struct xenstat_node {
 	unsigned long long free_mem;
 	unsigned int num_domains;
 	xenstat_domain *domains;	/* Array of length num_domains */
+#ifdef USE_TMEM
 	long freeable_mb;
+#endif
 };
 
+#ifdef USE_TMEM
 struct xenstat_tmem {
 	unsigned long long curr_eph_pages;
 	unsigned long long succ_eph_gets;
 	unsigned long long succ_pers_puts;
 	unsigned long long succ_pers_gets;
 };
+#endif
 
 struct xenstat_domain {
 	unsigned int id;
@@ -73,7 +77,9 @@ struct xenstat_domain {
 	xenstat_network *networks;	/* Array of length num_networks */
 	unsigned int num_vbds;
 	xenstat_vbd *vbds;
+#ifdef USE_TMEM
 	xenstat_tmem tmem_stats;
+#endif
 };
 
 struct xenstat_vcpu {
--- a/tools/xenstat/xentop/xentop.c
+++ b/tools/xenstat/xentop/xentop.c
@@ -209,7 +209,9 @@ unsigned int iterations = 0;
 int show_vcpus = 0;
 int show_networks = 0;
 int show_vbds = 0;
+#ifdef TMEM_STATS
 int show_tmem = 0;
+#endif
 int repeat_header = 0;
 int show_full_name = 0;
 #define PROMPT_VAL_LEN 80
@@ -362,9 +364,11 @@ static int handle_key(int ch)
 		case 'b': case 'B':
 			show_vbds ^= 1;
 			break;
+#ifdef TMEM_STATS
 		case 't': case 'T':
 			show_tmem ^= 1;
 			break;
+#endif
 		case 'r': case 'R':
 			repeat_header ^= 1;
 			break;
@@ -894,7 +898,11 @@ void do_summary(void)
 	      num_domains, run, block, pause, crash, dying, shutdown);
 
 	used = xenstat_node_tot_mem(cur_node)-xenstat_node_free_mem(cur_node);
+#ifdef TMEM_STATS
 	freeable_mb = xenstat_node_freeable_mb(cur_node);
+#else
+	freeable_mb = 0;
+#endif
 
 	/* Dump node memory and cpu information */
 	if ( freeable_mb <= 0 )
@@ -952,10 +960,12 @@ void do_bottom_line(void)
 		attr_addstr(show_vbds ? COLOR_PAIR(1) : 0, "ds");
 		addstr("  ");
 
+#ifdef TMEM_STATS
 		/* tmem */
 		addch(A_REVERSE | 'T');
 		attr_addstr(show_tmem ? COLOR_PAIR(1) : 0, "mem");
 		addstr("  ");
+#endif
 
 
 		/* vcpus */
@@ -1086,6 +1096,7 @@ void do_vbd(xenstat_domain *domain)
 	}
 }
 
+#ifdef TMEM_STATS
 /* Output all tmem information */
 void do_tmem(xenstat_domain *domain)
 {
@@ -1102,6 +1113,7 @@ void do_tmem(xenstat_domain *domain)
 			succ_pers_puts, succ_pers_gets);
 
 }
+#endif
 
 static void top(void)
 {
@@ -1155,8 +1167,10 @@ static void top(void)
 			do_network(domains[i]);
 		if (show_vbds)
 			do_vbd(domains[i]);
+#ifdef TMEM_STATS
 		if (show_tmem)
 			do_tmem(domains[i]);
+#endif
 	}
 
 	if (!batch)
@@ -1232,9 +1246,11 @@ int main(int argc, char **argv)
 		case 'f':
 			show_full_name = 1;
 			break;
+#ifdef TMEM_STATS
 		case 't':
 			show_tmem = 1;
 			break;
+#endif
 		}
 	}
 
