--- a/src/fbdev.c
+++ b/src/fbdev.c
@@ -45,6 +45,9 @@
 #define HAVE_SHADOW_3224
 #endif
 
+#include "xf86Crtc.h"
+#include "xf86Modes.h"
+
 static Bool debug = 0;
 
 #define TRACE_ENTER(str) \
@@ -195,6 +198,8 @@ typedef struct {
 	DGAModePtr			pDGAMode;
 	int				nDGAMode;
 	OptionInfoPtr			Options;
+	/* OpenXT: fake Crtc. */
+	xf86CrtcPtr			crtc;
 } FBDevRec, *FBDevPtr;
 
 #define FBDEVPTR(p) ((FBDevPtr)((p)->driverPrivate))
@@ -419,6 +424,311 @@ FBDevProbe(DriverPtr drv, int flags)
 	return foundScreen;
 }
 
+/*
+ * OpenXT CRTC customization.
+ * This is to support (lib)xrandr and inject a virtual modeline matching the
+ * native screen resolution, as reported by the graphic backend.
+ */
+static Bool
+FBDevRebuildPixmap(ScrnInfoPtr pScrn)
+{
+	FBDevPtr fPtr = FBDEVPTR(pScrn);
+	ScreenPtr pScreen = pScrn->pScreen;
+	PixmapPtr pPixmap = NULL;
+
+	TRACE_ENTER("RebuildPixmap");
+
+	/* XXX Check vidmem and all. */
+	if (pScreen == NULL)
+		return FALSE;
+
+	pPixmap = pScreen->GetScreenPixmap(pScreen);
+	if (!pPixmap) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			   "Failed to get the screen pixmap.\n");
+		return FALSE;
+	}
+
+	fPtr->shadow = realloc(fPtr->shadow,
+		pScrn->displayWidth * pScrn->virtualY *
+		((pScrn->bitsPerPixel + 7) / 8));
+	if (!fPtr->shadow) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			"Failed to allocate shadow framebuffer.\n");
+		return FALSE;
+	}
+
+	if (!pScreen->ModifyPixmapHeader(pPixmap, pScrn->virtualX, pScrn->virtualY,
+					 pScrn->depth, pScrn->bitsPerPixel,
+					 PixmapBytePad(pScrn->displayWidth, pScrn->depth),
+					 fPtr->shadowFB ? fPtr->shadow : fPtr->fbstart)) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Failed to modify pixmap header.\n");
+		return FALSE;
+	}
+
+	TRACE_EXIT("RebuildPixmap");
+	return TRUE;
+}
+
+static Bool
+FBDevCrtcResize(ScrnInfoPtr scrn, int width, int height)
+{
+	FBDevPtr fPtr = FBDEVPTR(scrn);
+
+	if (debug)
+		xf86DrvMsg(scrn->scrnIndex, X_INFO,
+			"Resize CRTC from %dx%d:%d to %dx%d:%d\n",
+			scrn->displayWidth, scrn->virtualY, scrn->bitsPerPixel,
+			width, height, scrn->bitsPerPixel);
+
+	scrn->virtualX = width;
+	scrn->virtualY = height;
+	scrn->displayWidth = width;
+
+	FBDevRebuildPixmap(scrn);
+
+	TRACE_EXIT("CrtcResize");
+
+	return TRUE;
+}
+
+
+static const xf86CrtcConfigFuncsRec FBDevCrtcConfigFuncs = {
+	FBDevCrtcResize
+};
+
+static void
+FBDevCrtcDpms(xf86CrtcPtr crtc, int mode)
+{
+	(void) crtc;
+	(void) mode;
+	TRACE_EXIT("CrtcDpms");
+}
+
+static Bool
+FBDevCrtcLock(xf86CrtcPtr crtc)
+{
+	(void) crtc;
+
+	TRACE_EXIT("CrtcLock");
+	return FALSE;
+}
+
+static Bool
+FBDevCrtcModeFixup(xf86CrtcPtr crtc, DisplayModePtr mode,
+		   DisplayModePtr adjusted_mode)
+{
+	(void) mode;
+
+	TRACE_EXIT("CrtcModeFixup");
+	return TRUE;
+}
+
+static void
+FBDevCrtcPrepare(xf86CrtcPtr crtc)
+{
+	(void) crtc;
+	TRACE_EXIT("CrtcPrepare");
+}
+
+static void
+FBDevCrtcModeSet(xf86CrtcPtr crtc, DisplayModePtr mode,
+		 DisplayModePtr adjusted_mode, int x, int y)
+{
+	ScrnInfoPtr pScrn = crtc->scrn;
+	FBDevPtr fPtr = FBDEVPTR(pScrn);
+
+	(void) mode;
+
+	TRACE_ENTER("CrtcModeSet");
+
+	fbdevHWModeInit(pScrn, adjusted_mode);
+	fPtr->lineLength = fbdevHWGetLineLength(pScrn);
+
+	/* XXX Refresh fboff ?? */
+
+	if (fPtr->lineLength !=
+		(pScrn->displayWidth * ((pScrn->bitsPerPixel + 7) / 8)))
+	{
+		pScrn->displayWidth =
+			fPtr->lineLength / ((pScrn->bitsPerPixel + 7) / 8);
+		FBDevRebuildPixmap(pScrn);
+	}
+
+	(*pScrn->AdjustFrame)(ADJUST_FRAME_ARGS(pScrn, x, y));
+	TRACE_EXIT("CrtcModeSet");
+}
+
+static void
+FBDevCrtcCommit(xf86CrtcPtr crtc)
+{
+	(void) crtc;
+	TRACE_EXIT("CrtcCommit");
+}
+
+static void
+FBDevCrtcGammaSet(xf86CrtcPtr crtc, CARD16 *red,
+		  CARD16 *green, CARD16 *blue, int size)
+{
+	(void) crtc;
+	(void) red;
+	(void) green;
+	(void) blue;
+	(void) size;
+
+	TRACE_EXIT("CrtcGammaSet");
+}
+
+static void
+FBDevCrtcDestroy(xf86CrtcPtr crtc)
+{
+	(void) crtc;
+	TRACE_EXIT("CrtcDestroy");
+}
+
+static const xf86CrtcFuncsRec FBDevCrtcFuncs = {
+	.dpms = FBDevCrtcDpms,
+	.save = NULL,
+	.restore = NULL,
+	.lock = FBDevCrtcLock,
+	.unlock = NULL,
+	.mode_fixup = FBDevCrtcModeFixup,
+	.prepare = FBDevCrtcPrepare,
+	.mode_set = FBDevCrtcModeSet,
+	.commit = FBDevCrtcCommit,
+	.gamma_set = FBDevCrtcGammaSet,
+	.shadow_allocate = NULL,
+	.shadow_create = NULL,
+	.shadow_destroy = NULL,
+	.set_cursor_colors = NULL,
+	.set_cursor_position = NULL,
+	.show_cursor = NULL,
+	.hide_cursor = NULL,
+	.load_cursor_argb = NULL,
+	.destroy = FBDevCrtcDestroy
+};
+
+/*
+ * Xenfb2 Output customization.
+ * We need an output... why?
+ */
+static void
+FBDevOutputCreateResources(xf86OutputPtr output)
+{
+	(void) output;
+	TRACE_EXIT("OutputCreateResources");
+}
+
+static void
+FBDevOutputDpms(xf86OutputPtr output, int mode)
+{
+	(void) output;
+	(void) mode;
+	TRACE_EXIT("OutputDpms");
+}
+
+static int
+FBDevOutputModeValid(xf86OutputPtr output, DisplayModePtr mode)
+{
+	(void) output;
+	(void) mode;
+
+	TRACE_EXIT("OutputModeValid");
+	return MODE_OK;
+}
+
+static Bool
+FBDevOutputModeFixup(xf86OutputPtr output, DisplayModePtr mode,
+			DisplayModePtr adjusted_mode)
+{
+	(void) output;
+	(void) mode;
+	(void) adjusted_mode;
+
+	TRACE_EXIT("OutputModeFixup");
+	return TRUE;
+}
+
+static void
+FBDevOutputPrepare(xf86OutputPtr output)
+{
+	(void) output;
+	TRACE_EXIT("OutputPrepare");
+}
+
+static void
+FBDevOutputCommit(xf86OutputPtr output)
+{
+	(void) output;
+	TRACE_EXIT("OutputCommit");
+}
+
+static void
+FBDevOutputModeSet(xf86OutputPtr output, DisplayModePtr mode,
+		   DisplayModePtr adjusted_mode)
+{
+	(void) output;
+	(void) mode;
+	(void) adjusted_mode;
+	TRACE_EXIT("OutputModeSet");
+}
+
+static xf86OutputStatus
+FBDevOutputDetect(xf86OutputPtr output)
+{
+	(void) output;
+
+	TRACE_EXIT("OutputDetect");
+	return XF86OutputStatusConnected;
+}
+
+static DisplayModePtr
+FBDevOutputGetModes (xf86OutputPtr output)
+{
+	TRACE_EXIT("OutputGetModes");
+	return NULL;
+}
+
+static void
+FBDevOutputDestroy(xf86OutputPtr output)
+{
+	(void) output;
+	TRACE_EXIT("OutputDestroy");
+}
+
+#ifdef RANDR_12_INTERFACE
+static Bool
+FBDevOutputSetProperty(xf86OutputPtr output, Atom property,
+			RRPropertyValuePtr value)
+{
+	(void) output;
+	(void) property;
+	(void) value;
+
+	TRACE_EXIT("OutputSetProperty");
+	return FALSE;
+}
+#endif
+
+static const xf86OutputFuncsRec FBDevOutputFuncs = {
+	.create_resources = FBDevOutputCreateResources,
+	.dpms = FBDevOutputDpms,
+	.save = NULL,
+	.restore = NULL,
+	.mode_valid = FBDevOutputModeValid,
+	.mode_fixup = FBDevOutputModeFixup,
+	.prepare = FBDevOutputPrepare,
+	.commit = FBDevOutputCommit,
+	.mode_set = FBDevOutputModeSet,
+	.detect = FBDevOutputDetect,
+	.get_modes = FBDevOutputGetModes,
+#ifdef RANDR_12_INTERFACE
+	.set_property = FBDevOutputSetProperty,
+#endif
+	.destroy = FBDevOutputDestroy
+};
+
+
 static Bool
 FBDevPreInit(ScrnInfoPtr pScrn, int flags)
 {
@@ -427,6 +737,7 @@ FBDevPreInit(ScrnInfoPtr pScrn, int flag
 	const char *s;
 	int type;
 	void *pci_dev = NULL;
+	xf86OutputPtr output;
 
 	if (flags & PROBE_DETECT) return FALSE;
 
@@ -508,6 +819,19 @@ FBDevPreInit(ScrnInfoPtr pScrn, int flag
 			return FALSE;
 	}
 
+	xf86CrtcConfigInit(pScrn, &FBDevCrtcConfigFuncs);
+	xf86CrtcSetSizeRange(pScrn, 64, 64, 32000, 32000);
+	fPtr->crtc = xf86CrtcCreate(pScrn, &FBDevCrtcFuncs);
+	output = xf86OutputCreate(pScrn, &FBDevOutputFuncs, "FBDev");
+	xf86OutputUseScreenMonitor(output, FALSE);
+	output->possible_crtcs = 1;
+	output->possible_clones = 0;
+
+	if (!xf86InitialConfiguration(pScrn, TRUE)) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Initial CRTC configuration failed!\n");
+		return (FALSE);
+	}
+
 	/* visual init */
 	if (!xf86SetDefaultVisual(pScrn, -1))
 		return FALSE;
@@ -773,6 +1097,7 @@ FBDevScreenInit(SCREEN_INIT_ARGS_DECL)
 	int init_picture = 0;
 	int ret, flags;
 	int type;
+	xf86OutputPtr output;
 
 	TRACE_ENTER("FBDevScreenInit");
 
@@ -802,6 +1127,9 @@ FBDevScreenInit(SCREEN_INIT_ARGS_DECL)
 	fbdevHWSaveScreen(pScreen, SCREEN_SAVER_ON);
 	fbdevHWAdjustFrame(ADJUST_FRAME_ARGS(pScrn, 0, 0));
 
+	/* OpenXT: The PV frontend "can" display this mode as the output is fake. */
+	xf86CrtcSetMode(fPtr->crtc, pScrn->currentMode, RR_Rotate_0, 0, 0);
+
 	/* mi layer */
 	miClearVisualTypes();
 	if (pScrn->bitsPerPixel > 8) {
@@ -998,6 +1326,10 @@ FBDevScreenInit(SCREEN_INIT_ARGS_DECL)
 			   "(%d) encountered in FBDevScreenInit()\n", type);
 		return FALSE;
 	}
+
+	/* OpenXT: Completes screen initialization for the "CRTC".*/
+	xf86CrtcScreenInit(pScreen);
+
 	flags = CMAP_PALETTED_TRUECOLOR;
 	if(!xf86HandleColormaps(pScreen, 256, 8, fbdevLoadPalette, NULL, flags))
 		return FALSE;
