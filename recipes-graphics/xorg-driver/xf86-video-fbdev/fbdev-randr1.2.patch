--- a/src/fbdev.c
+++ b/src/fbdev.c
@@ -8,6 +8,8 @@
 #endif
 
 #include <string.h>
+#include <linux/fb.h>
+#include <errno.h>
 
 /* all driver need this */
 #include "xf86.h"
@@ -38,6 +40,9 @@
 #include <pciaccess.h>
 #endif
 
+#include "xf86Crtc.h"
+#include "xf86Modes.h"
+
 static Bool debug = 0;
 
 #define TRACE_ENTER(str) \
@@ -193,6 +198,8 @@ typedef struct {
 	DGAModePtr			pDGAMode;
 	int				nDGAMode;
 	OptionInfoPtr			Options;
+	xf86CrtcPtr                     crtc;
+
 } FBDevRec, *FBDevPtr;
 
 #define FBDEVPTR(p) ((FBDevPtr)((p)->driverPrivate))
@@ -230,7 +237,6 @@ FBDevIdentify(int flags)
 	xf86PrintChipsets(FBDEV_NAME, "driver for framebuffer", FBDevChipsets);
 }
 
-
 #ifdef XSERVER_LIBPCIACCESS
 static Bool FBDevPciProbe(DriverPtr drv, int entity_num,
 			  struct pci_device *dev, intptr_t match_data)
@@ -276,6 +282,13 @@ static Bool FBDevPciProbe(DriverPtr drv,
 }
 #endif
 
+static Bool
+FBDevSwitchMode(SWITCH_MODE_ARGS_DECL)
+{
+	SCRN_INFO_PTR(arg);
+
+	return xf86SetSingleMode(pScrn, mode, RR_Rotate_0);
+}
 
 static Bool
 FBDevProbe(DriverPtr drv, int flags)
@@ -372,7 +385,7 @@ FBDevProbe(DriverPtr drv, int flags)
 		    pScrn->Probe         = FBDevProbe;
 		    pScrn->PreInit       = FBDevPreInit;
 		    pScrn->ScreenInit    = FBDevScreenInit;
-		    pScrn->SwitchMode    = fbdevHWSwitchModeWeak();
+		    pScrn->SwitchMode    = FBDevSwitchMode;
 		    pScrn->AdjustFrame   = fbdevHWAdjustFrameWeak();
 		    pScrn->EnterVT       = fbdevHWEnterVTWeak();
 		    pScrn->LeaveVT       = fbdevHWLeaveVTWeak();
@@ -389,12 +402,281 @@ FBDevProbe(DriverPtr drv, int flags)
 }
 
 static Bool
+FBDevRebuildPixmap(ScrnInfoPtr pScrn)
+{
+        FBDevPtr fPtr = FBDEVPTR(pScrn);
+        ScreenPtr pScreen = pScrn->pScreen;
+        PixmapPtr pPixmap = NULL;
+
+        /* XXX Check vidmem and all. */
+
+        if (pScreen == NULL)
+                return FALSE;
+
+        pPixmap = pScreen->GetScreenPixmap(pScreen);
+        if (NULL == pPixmap) {
+                xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                           "Failed to get the screen pixmap.\n");
+                return FALSE;
+        }
+
+        if (!pScreen->ModifyPixmapHeader(pPixmap, pScrn->virtualX, pScrn->virtualY,
+                                         pScrn->depth, pScrn->bitsPerPixel,
+                                         PixmapBytePad(pScrn->displayWidth, pScrn->depth),
+                                         fPtr->shadowFB ? fPtr->shadow : fPtr->fbstart)) {
+                xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Failed to modify pixmap header.\n");
+                return FALSE;
+        }
+
+        return TRUE;
+}
+
+static Bool
+FBDevCrtcResize(ScrnInfoPtr scrn, int width, int height)
+{
+        scrn->virtualX = width;
+        scrn->virtualY = height;
+        scrn->displayWidth = width;
+
+        FBDevRebuildPixmap(scrn);
+
+        return TRUE;
+}
+
+
+static const xf86CrtcConfigFuncsRec FBDevCrtcConfigFuncs = {
+        FBDevCrtcResize
+};
+
+static void
+FBDevCrtcDpms(xf86CrtcPtr crtc, int mode)
+{
+        (void) crtc;
+        (void) mode;
+}
+
+static Bool
+FBDevCrtcLock(xf86CrtcPtr crtc)
+{
+        (void) crtc;
+
+        return FALSE;
+}
+
+static Bool
+FBDevCrtcModeFixup(xf86CrtcPtr crtc, DisplayModePtr mode,
+                   DisplayModePtr adjusted_mode)
+{
+        (void) mode;
+
+        return TRUE;
+}
+
+static void
+FBDevCrtcPrepare(xf86CrtcPtr crtc)
+{
+        (void) crtc;
+}
+
+static void
+FBDevCrtcModeSet(xf86CrtcPtr crtc, DisplayModePtr mode,
+                 DisplayModePtr adjusted_mode, int x, int y)
+{
+        ScrnInfoPtr pScrn = crtc->scrn;
+        FBDevPtr fPtr = FBDEVPTR(pScrn);
+
+        (void) mode;
+
+        fbdevHWModeInit(pScrn, adjusted_mode);
+        fPtr->lineLength = fbdevHWGetLineLength(pScrn);
+
+        /* XXX Refresh fboff ?? */
+
+        if (fPtr->lineLength != pScrn->displayWidth * (pScrn->bitsPerPixel / 8))
+          {
+              pScrn->displayWidth = fPtr->lineLength / (pScrn->bitsPerPixel / 8);
+              FBDevRebuildPixmap(pScrn);
+          }
+
+        (*pScrn->AdjustFrame)(ADJUST_FRAME_ARGS(pScrn, x, y));
+}
+
+static void
+FBDevCrtcCommit(xf86CrtcPtr crtc)
+{
+        (void) crtc;
+}
+
+static void
+FBDevCrtcGammaSet(xf86CrtcPtr crtc, CARD16 *red,
+                  CARD16 *green, CARD16 *blue, int size)
+{
+        (void) crtc;
+        (void) red;
+        (void) green;
+        (void) blue;
+        (void) size;
+}
+
+static void *
+FBDevCrtcShadowAllocate(xf86CrtcPtr crtc, int width, int height)
+{
+        (void) crtc;
+        (void) width;
+        (void) height;
+
+        return NULL;
+}
+
+static void
+FBDevCrtcDestroy(xf86CrtcPtr crtc)
+{
+        (void) crtc;
+}
+
+static const xf86CrtcFuncsRec FBDevCrtcFuncs = {
+        .dpms = FBDevCrtcDpms,
+        .save = NULL,
+        .restore = NULL,
+        .lock = FBDevCrtcLock,
+        .unlock = NULL,
+        .mode_fixup = FBDevCrtcModeFixup,
+        .prepare = FBDevCrtcPrepare,
+        .mode_set = FBDevCrtcModeSet,
+        .commit = FBDevCrtcCommit,
+        .gamma_set = FBDevCrtcGammaSet,
+        .shadow_allocate = FBDevCrtcShadowAllocate,
+        .shadow_create = NULL,
+        .shadow_destroy = NULL,
+        .set_cursor_colors = NULL,
+        .set_cursor_position = NULL,
+        .show_cursor = NULL,
+        .hide_cursor = NULL,
+        .load_cursor_argb = NULL,
+        .destroy = FBDevCrtcDestroy
+};
+
+static void
+FBDevOutputCreateResources(xf86OutputPtr output)
+{
+        (void) output;
+}
+
+static void
+FBDevOutputDpms(xf86OutputPtr output, int mode)
+{
+        (void) output;
+        (void) mode;
+}
+
+static int
+FBDevOutputModeValid(xf86OutputPtr output, DisplayModePtr mode)
+{
+        ScrnInfoPtr pScrn = output->scrn;
+        int rc = MODE_OK;
+
+        return rc;
+}
+
+static Bool
+FBDevOutputModeFixup(xf86OutputPtr output, DisplayModePtr mode,
+                     DisplayModePtr adjusted_mode)
+{
+        (void) output;
+        (void) mode;
+        (void) adjusted_mode;
+
+        return TRUE;
+}
+
+static void
+FBDevOutputPrepare(xf86OutputPtr output)
+{
+        (void) output;
+}
+
+static void
+FBDevOutputCommit(xf86OutputPtr output)
+{
+        (void) output;
+}
+
+static void
+FBDevOutputModeSet(xf86OutputPtr output, DisplayModePtr mode,
+                   DisplayModePtr adjusted_mode)
+{
+        (void) output;
+        (void) mode;
+        (void) adjusted_mode;
+}
+
+static xf86OutputStatus
+FBDevOutputDetect(xf86OutputPtr output)
+{
+        (void) output;
+
+        return XF86OutputStatusConnected;
+}
+
+static DisplayModePtr
+FBDevOutputGetModes (xf86OutputPtr output)
+{
+        unsigned int i;
+        ScrnInfoPtr pScrn = output->scrn;
+        DisplayModePtr pModes = NULL;
+
+        return pModes;
+}
+
+static void
+FBDevOutputDestroy(xf86OutputPtr output)
+{
+        (void) output;
+}
+
+#ifdef RANDR_12_INTERFACE
+static Bool
+FBDevOutputSetProperty(xf86OutputPtr output, Atom property,
+                       RRPropertyValuePtr value)
+{
+        (void) output;
+        (void) property;
+        (void) value;
+
+        return FALSE;
+}
+#endif
+
+
+static const xf86OutputFuncsRec FBDevOutputFuncs = {
+        .create_resources = FBDevOutputCreateResources,
+        .dpms = FBDevOutputDpms,
+        .save = NULL,
+        .restore = NULL,
+        .mode_valid = FBDevOutputModeValid,
+        .mode_fixup = FBDevOutputModeFixup,
+        .prepare = FBDevOutputPrepare,
+        .commit = FBDevOutputCommit,
+        .mode_set = FBDevOutputModeSet,
+        .detect = FBDevOutputDetect,
+        .get_modes = FBDevOutputGetModes,
+#ifdef RANDR_12_INTERFACE
+        .set_property = FBDevOutputSetProperty,
+#endif
+        .destroy = FBDevOutputDestroy
+};
+
+static Bool
 FBDevPreInit(ScrnInfoPtr pScrn, int flags)
 {
 	FBDevPtr fPtr;
 	int default_depth, fbbpp;
 	const char *s;
 	int type;
+        int i;
+        ClockRangePtr clockRanges;
+        xf86OutputPtr output;
+        xf86CrtcPtr crtc;
 
 	if (flags & PROBE_DETECT) return FALSE;
 
@@ -447,6 +729,19 @@ FBDevPreInit(ScrnInfoPtr pScrn, int flag
 	if (!xf86SetDefaultVisual(pScrn, -1))
 		return FALSE;
 
+        xf86CrtcConfigInit(pScrn, &FBDevCrtcConfigFuncs);
+        xf86CrtcSetSizeRange(pScrn, 64, 64, 32000, 32000);
+        fPtr->crtc = xf86CrtcCreate(pScrn, &FBDevCrtcFuncs);
+        output = xf86OutputCreate(pScrn, &FBDevOutputFuncs, "FBDev");
+        xf86OutputUseScreenMonitor(output, FALSE);
+        output->possible_crtcs = 1;
+        output->possible_clones = 0;
+
+        if (!xf86InitialConfiguration(pScrn, TRUE)) {
+                xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Initial CRTC configuration failed!\n");
+                return (FALSE);
+        }
+
 	/* We don't currently support DirectColor at > 8bpp */
 	if (pScrn->depth > 8 && pScrn->defaultVisual != TrueColor) {
 		xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "requested default visual"
@@ -466,10 +761,10 @@ FBDevPreInit(ScrnInfoPtr pScrn, int flag
 	pScrn->progClock = TRUE;
 	pScrn->rgbBits   = 8;
 	pScrn->chipset   = "fbdev";
-	pScrn->videoRam  = fbdevHWGetVidmem(pScrn);
+	pScrn->videoRam  = fbdevHWGetVidmem(pScrn) / 1024;
 
 	xf86DrvMsg(pScrn->scrnIndex, X_INFO, "hardware: %s (video memory:"
-		   " %dkB)\n", fbdevHWGetName(pScrn), pScrn->videoRam/1024);
+		   " %dkB)\n", fbdevHWGetName(pScrn), pScrn->videoRam);
 
 	/* handle options */
 	xf86CollectOptions(pScrn, NULL);
@@ -517,21 +812,9 @@ FBDevPreInit(ScrnInfoPtr pScrn, int flag
 	  }
 	}
 
-	/* select video modes */
-
-	xf86DrvMsg(pScrn->scrnIndex, X_INFO, "checking modes against framebuffer device...\n");
-	fbdevHWSetVideoModes(pScrn);
-
-	xf86DrvMsg(pScrn->scrnIndex, X_INFO, "checking modes against monitor...\n");
-	{
-		DisplayModePtr mode, first = mode = pScrn->modes;
-		
-		if (mode != NULL) do {
-			mode->status = xf86CheckModeForMonitor(mode, pScrn->monitor);
-			mode = mode->next;
-		} while (mode != NULL && mode != first);
-
-		xf86PruneDriverModes(pScrn);
+        if (pScrn->modes == NULL) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "No modes.\n");
+		return FALSE;
 	}
 
 	if (NULL == pScrn->modes)
@@ -688,6 +971,8 @@ FBDevScreenInit(SCREEN_INIT_ARGS_DECL)
 	fbdevHWSaveScreen(pScreen, SCREEN_SAVER_ON);
 	fbdevHWAdjustFrame(ADJUST_FRAME_ARGS(pScrn, 0, 0));
 
+	xf86CrtcSetMode(fPtr->crtc, pScrn->currentMode, RR_Rotate_0, 0, 0);
+
 	/* mi layer */
 	miClearVisualTypes();
 	if (pScrn->bitsPerPixel > 8) {
@@ -882,6 +1167,9 @@ FBDevScreenInit(SCREEN_INIT_ARGS_DECL)
 			   "(%d) encountered in FBDevScreenInit()\n", type);
 		return FALSE;
 	}
+
+	xf86CrtcScreenInit(pScreen);
+
 	flags = CMAP_PALETTED_TRUECOLOR;
 	if(!xf86HandleColormaps(pScreen, 256, 8, fbdevHWLoadPaletteWeak(), 
 				NULL, flags))
