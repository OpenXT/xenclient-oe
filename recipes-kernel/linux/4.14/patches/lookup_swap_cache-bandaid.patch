Original Patch from Matthew Wilcox:
https://bugzilla.kernel.org/show_bug.cgi?id=198497#c12

On Tue, Jan 30, 2018 at 11:26:42AM +1300, xen@randonwebstuff.com wrote:
> After, received this stack.
>
> Have not tried memtest86.  These are production hosts.  This has occurred on
> multiple hosts.  I can only recall this occurring on 32 bit kernels.  I
> cannot recall issues with other VMs not running that kernel on the same
> hosts.
>
> [  125.329163] Bad swp_entry: e000000

Mixed news here then ... 'e' is 8 | 4 | 2, so it's not a single bitflip.
So no point in running memtest86.

I should have made the printk produce leading zeroes, because that's
0x0e00'0000.  ptes use the top 5 bits to encode the swapfile, so
this swap entry is decoded as swapfile 1, page number 0x0600'0000.
That's clearly ludicrous because you don't have a swapfile 1, and if
you did, it wouldn't be so large as a terabyte.

I think the next step in debugging this is printing the PTE which gave
us this swp_entry.  If you can drop the patch I asked you to try, and
apply this patch instead, we'll have more idea about what's going on.

Thanks!

---
This needed updating for the changes from L1TF mitigations.

Somehow we pass bogus swp_entry_t to lookup_swap_cache.  Sanity check
that swp_entry_t actually points to an in use swap_address_space.

When we find a bogus one, print some information about the process.

--- a/mm/memory.c
+++ b/mm/memory.c
@@ -2903,6 +2903,10 @@ int do_swap_page(struct vm_fault *vmf)
 	if (!page)
 		page = lookup_swap_cache(entry, vma_readahead ? vma : NULL,
 					 vmf->address);
+	if (IS_ERR(page)) {
+		pte_ERROR(vmf->orig_pte);
+		page = NULL;
+	}
 	if (!page) {
 		if (vma_readahead)
 			page = do_swap_page_readahead(entry,
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -1660,6 +1660,10 @@ repeat:
 	if (swap.val) {
 		/* Look it up and read it in.. */
 		page = lookup_swap_cache(swap, NULL, 0);
+		if (IS_ERR(page)) {
+			pte_ERROR(vmf->orig_pte);
+			page = NULL;
+		}
 		if (!page) {
 			/* Or update major stats only when swapin succeeds?? */
 			if (fault_type) {
--- a/mm/swap_state.c
+++ b/mm/swap_state.c
@@ -334,8 +334,35 @@ struct page *lookup_swap_cache(swp_entry
 	struct page *page;
 	unsigned long ra_info;
 	int win, hits, readahead;
+	struct address_space *swapper_space = NULL;
+	unsigned int nr = 0;
+	unsigned int type = swp_type(entry);
+	unsigned int swp_off = swp_offset(entry) >> SWAP_ADDRESS_SPACE_SHIFT;
+
+	/* swp_type is 5 bits, but some upper values are reserved. */
+	if (type < MAX_SWAPFILES) {
+		swapper_space = swap_address_space(entry);
+		nr = nr_swapper_spaces[type];
+	}
+
+	/* There is a chance we could still be bogus if we pass here. */
+	if (!swapper_space || swp_off > nr) {
+		char comm[TASK_COMM_LEN];
+		get_task_comm(comm, current);
+		if (vma) {
+			pr_err(
+			 "Bad swp_entry: %08lx %x %x/%x %d %s %lx [%lx-%lx] file:%p\n",
+			 entry.val, type, swp_off, nr, current->pid, comm, addr,
+			 vma->vm_start, vma->vm_end, vma->vm_file);
+		} else {
+			pr_err("Bad swp_entry: %08lx %x %x/%x %d %s %lx\n",
+			       entry.val, type, swp_off, nr, current->pid,
+			       comm, addr);
+		}
+		return ERR_PTR(-EFAULT);
+	}
 
-	page = find_get_page(swap_address_space(entry), swp_offset(entry));
+	page = find_get_page(swapper_space, swp_offset(entry));
 
 	INC_CACHE_INFO(find_total);
 	if (page) {
@@ -673,6 +700,10 @@ struct page *swap_readahead_detect(struc
 	if ((unlikely(non_swap_entry(entry))))
 		return NULL;
 	page = lookup_swap_cache(entry, vma, faddr);
+	if (IS_ERR(page)) {
+		pte_ERROR(vmf->orig_pte);
+		page = NULL;
+	}
 	if (page)
 		return page;
 
