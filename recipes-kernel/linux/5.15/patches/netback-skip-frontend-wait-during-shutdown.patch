################################################################################
SHORT DESCRIPTION: 
################################################################################
Close backend without waiting the frontend driver.

################################################################################
LONG DESCRIPTION: 
################################################################################
Force the put_device() instead of waiting for the frontend driver to close
properly. This is a work-around as some backend may run in service VM that
could eventually wait for frontend in dead guests prohibiting dom0 to
shutdown, sleep or hibernate.

################################################################################
CHANGELOG 
################################################################################
Original author: unknown
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>
Port to 4.14: Richard Turner <turnerr@ainfosec.com>
Port to 4.19: Richard Turner <turnerr@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
Removal will require a better approach to deal with troubled guests sharing a
backend with a service VM.

################################################################################
UPSTREAM PLAN
################################################################################
None, this is an OpenXT work-around.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Service VM PV backend.

################################################################################
PATCHES 
################################################################################
--- a/drivers/xen/xenbus/xenbus.h
+++ b/drivers/xen/xenbus/xenbus.h
@@ -131,6 +131,13 @@ int xenbus_read_otherend_details(struct
 
 void xenbus_ring_ops_init(void);
 
+static inline bool xenbus_dev_is_vif(const struct xenbus_device *dev)
+{
+       return (dev &&
+               (!strcmp("vif", dev->devicetype) ||
+                !strcmp("vwif", dev->devicetype)));
+}
+
 int xenbus_dev_request_and_reply(struct xsd_sockmsg *msg, void *par);
 void xenbus_dev_queue_reply(struct xb_req_data *req);
 
--- a/drivers/xen/xenbus/xenbus_probe_frontend.c
+++ b/drivers/xen/xenbus/xenbus_probe_frontend.c
@@ -147,6 +147,19 @@ static void xenbus_frontend_dev_shutdown
 	put_device(&dev->dev);
 }
 
+static void xenbus_dev_shutdown_backend(struct device *_dev)
+{
+	struct xenbus_device *dev = to_xenbus_device(_dev);
+
+	get_device(&dev->dev);
+	if (system_state > SYSTEM_RUNNING && !xenbus_dev_is_vif(dev))
+		DPRINTK("%s: skipping wait for frontend to close\n",
+			dev->nodename);
+	else
+		xenbus_frontend_dev_shutdown(_dev);
+	put_device(&dev->dev);
+}
+
 static const struct dev_pm_ops xenbus_pm_ops = {
 	.suspend	= xenbus_dev_suspend,
 	.resume		= xenbus_frontend_dev_resume,
@@ -167,7 +180,7 @@ static struct xen_bus_type xenbus_fronte
 		.uevent		= xenbus_uevent_frontend,
 		.probe		= xenbus_frontend_dev_probe,
 		.remove		= xenbus_dev_remove,
-		.shutdown	= xenbus_frontend_dev_shutdown,
+		.shutdown	= xenbus_dev_shutdown_backend,
 		.dev_groups	= xenbus_dev_groups,
 
 		.pm		= &xenbus_pm_ops,
