--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -86,6 +86,7 @@ void br_port_carrier_check(struct net_br
 			*notified = true;
 		}
 	}
+	br_maybe_copy_iface_carrier(p);
 	spin_unlock_bh(&br->lock);
 }
 
@@ -746,6 +747,31 @@ void br_port_flags_change(struct net_bri
 		br_recalculate_neigh_suppress_enabled(br);
 }
 
+/* if p->priority == 0 either copy carier if p is forwarding
+ * or set carrier to off if p is is not forwarding
+ * */
+int br_maybe_copy_iface_carrier(struct net_bridge_port *p)
+{
+	int carrier;
+	if (p->priority == 0) {
+		if (p->state == BR_STATE_FORWARDING)
+			carrier = netif_carrier_ok(p->dev);
+		else
+			carrier = 0;
+		if (carrier != netif_carrier_ok(p->br->dev)) {
+			printk("prio 0 port %s carrier %s, update bridge %s state\n",
+			       p->dev->name, carrier ? "on" : "off",
+			       p->br->dev->name);
+			if (carrier)
+				netif_carrier_on(p->br->dev);
+			else
+				netif_carrier_off(p->br->dev);
+		}
+		return 1;
+	}
+	return 0;
+}
+
 bool br_port_flag_is_set(const struct net_device *dev, unsigned long flag)
 {
 	struct net_bridge_port *p;
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -623,6 +623,7 @@ netdev_features_t br_features_recompute(
 void br_port_flags_change(struct net_bridge_port *port, unsigned long mask);
 void br_manage_promisc(struct net_bridge *br);
 int nbp_backup_change(struct net_bridge_port *p, struct net_device *backup_dev);
+extern int br_maybe_copy_iface_carrier(struct net_bridge_port *p);
 
 /* br_input.c */
 int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb);
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -466,8 +466,13 @@ void br_port_state_selection(struct net_
 
 	if (liveports == 0)
 		netif_carrier_off(br->dev);
-	else
-		netif_carrier_on(br->dev);
+        else {
+                int carrier_copied = 0;
+                list_for_each_entry(p, &br->port_list, list)
+                        carrier_copied |= br_maybe_copy_iface_carrier(p);
+                if (!carrier_copied)
+                        netif_carrier_on(br->dev);
+        }
 }
 
 /* called under bridge lock */
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -316,6 +316,7 @@ int br_stp_set_port_priority(struct net_
 		br_port_state_selection(p->br);
 	}
 
+	br_maybe_copy_iface_carrier(p);
 	return 0;
 }
 
--- a/net/bridge/br_sysfs_br.c
+++ b/net/bridge/br_sysfs_br.c
@@ -345,6 +345,23 @@ static ssize_t no_linklocal_learn_store(
 }
 static DEVICE_ATTR_RW(no_linklocal_learn);
 
+static int set_link_state(struct net_bridge *br, unsigned long val)
+{
+	if (val)
+		netif_carrier_on(br->dev);
+	else
+		netif_carrier_off(br->dev);
+	return 0;
+}
+
+static ssize_t store_link_state(struct device *d,
+				struct device_attribute *attr,
+				const char *buf, size_t len)
+{
+	return store_bridge_parm(d, buf, len, set_link_state);
+}
+static DEVICE_ATTR(link_state, S_IWUSR, NULL, store_link_state);
+
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
 static ssize_t multicast_router_show(struct device *d,
 				     struct device_attribute *attr, char *buf)
@@ -864,6 +881,7 @@ static struct attribute *bridge_attrs[]
 	&dev_attr_gc_timer.attr,
 	&dev_attr_group_addr.attr,
 	&dev_attr_flush.attr,
+	&dev_attr_link_state.attr,
 	&dev_attr_no_linklocal_learn.attr,
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
 	&dev_attr_multicast_router.attr,
