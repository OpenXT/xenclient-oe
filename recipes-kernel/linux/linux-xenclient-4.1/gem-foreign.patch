################################################################################
SHORT DESCRIPTION: 
################################################################################
GEM foreign object populating pages from dom0 in the guest m2p.

################################################################################
LONG DESCRIPTION: 
################################################################################
Adds an ioctl() to create a GEM foreign object.

This object will allocate pages in dom0, in kernel highmem area or in the
balloon area and add an m2p override for those pages to the pfn where the guest
draws its framebuffer. The guest can then draw directly into the pages that DRM
will use as a framebuffer. Modesetting is then done by Surfman depending on the
state of the emulated card in QEMU to match the guest framebuffer's geometry
with what DRM knows about it.

As m2p_{add,remove}_override are not exposed and planed to be decomissioned, we
re-implement our own _legacy versions to maintain drm-plugin until the graphic
stack evolves.

################################################################################
CHANGELOG 
################################################################################
Original Authors: Ross Philipson <philipsonr@ainfosec.com>
                  John Baboval <john.baboval@citrix.com>
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
When drm-plugin 0-copy mode get removed.

################################################################################
UPSTREAM PLAN
################################################################################
None, this is OpenXT specific.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
drm-plugin 0-copy relies on that patch to manage guest display.

################################################################################
PATCHES 
################################################################################
Index: linux-4.1.6/drivers/gpu/drm/i915/Makefile
===================================================================
--- linux-4.1.6.orig/drivers/gpu/drm/i915/Makefile	2015-09-11 15:35:32.417029176 +0200
+++ linux-4.1.6/drivers/gpu/drm/i915/Makefile	2015-09-11 15:35:47.480156727 +0200
@@ -31,6 +31,7 @@
 	  i915_gem_shrinker.o \
 	  i915_gem_stolen.o \
 	  i915_gem_tiling.o \
+	  i915_gem_foreign.o \
 	  i915_gem_userptr.o \
 	  i915_gpu_error.o \
 	  i915_irq.o \
Index: linux-4.1.6/drivers/gpu/drm/i915/i915_dma.c
===================================================================
--- linux-4.1.6.orig/drivers/gpu/drm/i915/i915_dma.c	2015-09-11 15:35:32.417029176 +0200
+++ linux-4.1.6/drivers/gpu/drm/i915/i915_dma.c	2015-09-11 15:35:47.480156727 +0200
@@ -1208,6 +1208,7 @@
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_GETPARAM, i915_gem_context_getparam_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_SETPARAM, i915_gem_context_setparam_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_GEM_FOREIGN, i915_gem_foreign_ioctl, DRM_UNLOCKED),
 };
 
 int i915_max_ioctl = ARRAY_SIZE(i915_ioctls);
Index: linux-4.1.6/drivers/gpu/drm/i915/i915_drv.h
===================================================================
--- linux-4.1.6.orig/drivers/gpu/drm/i915/i915_drv.h	2015-09-11 15:35:32.417029176 +0200
+++ linux-4.1.6/drivers/gpu/drm/i915/i915_drv.h	2015-09-11 15:35:47.480156727 +0200
@@ -1986,6 +1986,7 @@
 
 	struct sg_table *pages;
 	int pages_pin_count;
+	dma_addr_t *pfnlist;
 
 	/* prime dma-buf support */
 	void *dma_buf_vmapping;
@@ -2962,6 +2963,8 @@
 unsigned long i915_gem_shrink(struct drm_i915_private *dev_priv,
 			      long target,
 			      unsigned flags);
+int i915_gem_foreign_ioctl(struct drm_device *dev, void *data,
+			   struct drm_file *file);
 #define I915_SHRINK_PURGEABLE 0x1
 #define I915_SHRINK_UNBOUND 0x2
 #define I915_SHRINK_BOUND 0x4
Index: linux-4.1.6/drivers/gpu/drm/i915/i915_gem_foreign.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-4.1.6/drivers/gpu/drm/i915/i915_gem_foreign.c	2015-09-11 16:28:48.106730465 +0200
@@ -0,0 +1,398 @@
+/*
+ * Copyright Â© 2013 Citrix Systems, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ */
+
+#include "drmP.h"
+#include "i915_drm.h"
+#include "i915_drv.h"
+#include "i915_trace.h"
+#include "intel_drv.h"
+#include <linux/mmu_notifier.h>
+#include <linux/swap.h>
+#include <linux/gfp.h>
+#include <asm/xen/hypervisor.h>
+#include <asm/xen/hypercall.h>
+#include <xen/page.h>
+#include <xen/xen-ops.h>
+#include <xen/balloon.h>
+#include <xen/interface/memory.h>
+
+struct i915_gem_foreign_object {
+	struct drm_i915_gem_object gem;
+	uint32_t flags;
+	uint64_t *mfns;                 /* Foreign MFNs. */
+	size_t num_pages;
+	uint64_t *__mfns;               /* Local overriden MFNs. */
+	struct page **pvec;             /* struct page mapping the foreign MFNs. */
+};
+
+static inline struct i915_gem_foreign_object *
+to_foreign_object(struct drm_i915_gem_object *obj)
+{
+	return container_of(obj, struct i915_gem_foreign_object, gem);
+}
+
+static inline void
+free_pages_hm(struct page **pages, size_t n)
+{
+	size_t i;
+
+	for (i = 0; i < n; ++i) {
+		__free_pages(pages[i], 0);
+	}
+}
+
+static inline int
+alloc_pages_hm(struct page **pages, size_t n)
+{
+	size_t i;
+
+	for (i = 0; i < n; ++i) {
+		pages[i] = alloc_page(GFP_HIGHUSER);
+		if (!pages[i]) {
+			free_pages_hm(pages, i - 1);
+			return -ENOMEM;
+		}
+	}
+        return 0;
+}
+
+static inline void
+free_pages_xb(struct page **pages, size_t n)
+{
+	free_xenballooned_pages(n, pages);
+}
+
+static inline int
+alloc_pages_xb(struct page **pages, size_t n)
+{
+	return alloc_xenballooned_pages(n, pages, false);
+}
+
+static inline int
+alloc_pages_xb_hm(struct page **pages, size_t n)
+{
+	return alloc_xenballooned_pages(n, pages, true);
+}
+
+static int
+foreign_set_p2m(unsigned long mfn, struct page *page, uint64_t *omfn)
+{
+	unsigned long pfn;
+	unsigned long uninitialized_var(address);
+	unsigned int level;
+	pte_t *ptep;
+
+	pfn = page_to_pfn(page);
+	if (!PageHighMem(page)) {
+		/* Check this page is backed by something. */
+		address = (unsigned long)__va(pfn << PAGE_SHIFT);
+		ptep = lookup_address(address, &level);
+		if (!ptep || level != PG_LEVEL_4K) {
+			DRM_ERROR("%s: pfn %lx is not mapped.\n", __func__, pfn);
+			return -EINVAL;
+		}
+	}
+	if (likely(omfn != NULL)) {
+		/* Store the original mfn index, for reset later. */
+		*omfn = pfn_to_mfn(pfn);
+	}
+	/* Set the p2m. */
+	if (unlikely(!set_phys_to_machine(pfn, FOREIGN_FRAME(mfn)))) {
+		return -ENOMEM;
+	}
+	return 0;
+}
+
+static int
+foreign_reset_p2m(struct page *page, unsigned long omfn)
+{
+	unsigned long pfn;
+	unsigned long mfn;
+	unsigned long uninitialized_var(address);
+	unsigned int level;
+	pte_t *ptep;
+
+	pfn = page_to_pfn(page);
+	mfn = get_phys_to_machine(pfn);
+	/* Check we did put that page there in the first place. */
+	if (mfn == INVALID_P2M_ENTRY || !(mfn & FOREIGN_FRAME_BIT)) {
+		DRM_ERROR("%s: pfn %lx is not in the p2m.\n", __func__, pfn);
+		return -EINVAL;
+	}
+	if (!PageHighMem(page)) {
+		/* Check this page is backed by something. */
+		address = (unsigned long)__va(pfn << PAGE_SHIFT);
+		ptep = lookup_address(address, &level);
+		if (!ptep || level != PG_LEVEL_4K) {
+			DRM_ERROR("%s: pfn %lx is not mapped.\n",
+				  __func__, pfn);
+			return -EINVAL;
+		}
+	}
+	/* Revert to the original backing mfn index. */
+	set_phys_to_machine(pfn, omfn);
+	return 0;
+}
+
+
+
+static inline int
+i915_gem_foreign_alloc_pages(struct i915_gem_foreign_object *vmap)
+{
+	int rc = 0;
+
+	switch (vmap->flags) {
+		case 0:
+			rc = alloc_pages_hm(vmap->pvec, vmap->num_pages);
+			break;
+		case I915_FOREIGN_BALLOON_PAGES:
+			rc = alloc_pages_xb(vmap->pvec, vmap->num_pages);
+			break;
+		case I915_FOREIGN_BALLOON_PAGES | I915_FOREIGN_BALLOON_HIGH:
+			rc = alloc_pages_xb_hm(vmap->pvec, vmap->num_pages);
+			break;
+		default:
+			DRM_ERROR("Unknown flag %#x.\n", vmap->flags);
+			/* Rollback is done in alloc_pages helpers. */
+			return -EINVAL;
+	}
+	return rc;
+}
+
+static inline void
+i915_gem_foreign_free_pages(struct i915_gem_foreign_object *vmap)
+{
+	switch (vmap->flags) {
+		case 0:
+			free_pages_hm(vmap->pvec, vmap->num_pages);
+			break;
+		case I915_FOREIGN_BALLOON_PAGES:
+		case I915_FOREIGN_BALLOON_PAGES | I915_FOREIGN_BALLOON_HIGH:
+			free_pages_xb(vmap->pvec, vmap->num_pages);
+			break;
+		default:
+			DRM_ERROR("Unknown flag %#x.\n", vmap->flags);
+	}
+}
+
+static inline void
+__i915_gem_foreign_reset_p2m(struct i915_gem_foreign_object *vmap, size_t n)
+{
+	size_t i;
+
+	for (i = 0; i < n; ++i) {
+		foreign_reset_p2m(vmap->pvec[i], vmap->__mfns[i]);
+	}
+}
+
+static int
+i915_gem_foreign_set_p2m(struct i915_gem_foreign_object *vmap)
+{
+	size_t i;
+	int rc;
+
+	for (i = 0; i < vmap->num_pages; ++i) {
+		rc = foreign_set_p2m(vmap->mfns[i], vmap->pvec[i],
+				     &(vmap->__mfns[i]));
+		if (rc) {
+			DRM_ERROR("%s: failed (%d).\n", __func__, -rc);
+			__i915_gem_foreign_reset_p2m(vmap, i - 1);
+			return rc;
+		}
+	}
+	return 0;
+}
+
+static void
+i915_gem_foreign_reset_p2m(struct i915_gem_foreign_object *vmap)
+{
+	__i915_gem_foreign_reset_p2m(vmap, vmap->num_pages);
+}
+
+static int
+i915_gem_foreign_get_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	struct sg_table *st = NULL;
+	struct scatterlist *sg = NULL;
+	size_t i;
+	int rc;
+
+	vmap->pvec = drm_malloc_ab(vmap->num_pages, sizeof (struct page *));
+	if (!vmap->pvec)
+		return -ENOMEM;
+
+	rc = i915_gem_foreign_alloc_pages(vmap);
+	if (rc) {
+		DRM_ERROR("Failed to allocate pages.\n");
+		goto fail_pages;
+	}
+	/* Set the p2m to the foreign pages. */
+	rc = i915_gem_foreign_set_p2m(vmap);
+	if (rc) {
+		DRM_ERROR("Failed to set the p2m.\n");
+		goto fail_p2m;
+	}
+
+	/* Register the struct page in the p2m to back the GEM object. */
+	st = kmalloc(sizeof (*st), GFP_KERNEL);
+	if (!st) {
+		rc = -ENOMEM;
+		goto fail_st;
+	}
+	if (sg_alloc_table(st, vmap->num_pages, GFP_KERNEL)) {
+		rc = -ENOMEM;
+		goto fail_sg;
+	}
+	for_each_sg(st->sgl, sg, vmap->num_pages, i) {
+		sg_set_page(sg, vmap->pvec[i], PAGE_SIZE, 0);
+	}
+	obj->pages = st;
+
+	return 0;
+
+fail_sg:
+	kfree(st);
+fail_st:
+	i915_gem_foreign_reset_p2m(vmap);
+	DRM_ERROR("GEM foreign object failed: Not enough memory.\n");
+fail_p2m:
+	i915_gem_foreign_free_pages(vmap);
+fail_pages:
+	drm_free_large(vmap->pvec);
+
+	return rc;
+}
+
+static void
+i915_gem_foreign_put_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	/* int num_pages = obj->base.size >> PAGE_SHIFT; // Waaaaat? */
+
+	sg_free_table(obj->pages);
+	kfree(obj->pages);
+	i915_gem_foreign_reset_p2m(vmap);
+	i915_gem_foreign_free_pages(vmap);
+	drm_free_large(vmap->pvec);
+}
+
+static void
+i915_gem_foreign_release(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+
+	kfree(vmap->mfns);
+	kfree(vmap->__mfns);
+}
+
+static const struct drm_i915_gem_object_ops i915_gem_foreign_ops = {
+	.get_pages = i915_gem_foreign_get_pages,
+	.put_pages = i915_gem_foreign_put_pages,
+	.release = i915_gem_foreign_release,
+};
+
+static inline int
+i915_gem_foreign_init(struct i915_gem_foreign_object *obj, size_t num_pages,
+		      uint32_t flags)
+{
+	obj->__mfns = kcalloc(num_pages, sizeof (obj->__mfns[0]), GFP_KERNEL);
+	if (!obj->__mfns) {
+		return -ENOMEM;
+	}
+	obj->mfns = kcalloc(num_pages, sizeof (obj->mfns[0]), GFP_KERNEL);
+	if (!obj->mfns) {
+		kfree(obj->__mfns);
+		return -ENOMEM;
+	}
+	obj->num_pages = num_pages;
+	obj->flags = flags;
+
+	return 0;
+}
+
+/*
+ * Creates a new mm object that wraps some user memory.
+ */
+int
+i915_gem_foreign_ioctl(struct drm_device *dev, void *data,
+			struct drm_file *file)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_i915_gem_foreign *args = data;
+	struct i915_gem_foreign_object *obj;
+	uint32_t size;
+	int ret = -ENOMEM;
+	u32 handle;
+
+	if ((args->num_pages * PAGE_SIZE) > dev_priv->gtt.base.total)
+		return -E2BIG;
+
+	/* Allocate the new object */
+	obj = kzalloc(sizeof (*obj), GFP_KERNEL);
+	if (!obj)
+		return -ENOMEM;
+
+	drm_gem_private_object_init(dev, &obj->gem.base,
+				    args->num_pages * PAGE_SIZE);
+
+	i915_gem_object_init(&obj->gem, &i915_gem_foreign_ops);
+	obj->gem.cache_level = I915_CACHE_LLC;
+        /* What about CACHE_L3_LLC? */
+	//obj->gem.gtt_offset = 0;
+
+	ret = i915_gem_foreign_init(obj, args->num_pages, args->flags);
+	if (ret)
+		goto fail_foreign;
+
+	size = args->num_pages * sizeof (args->mfns[0]);
+	if (copy_from_user(obj->mfns, args->mfns, size)) {
+		ret = -EFAULT;
+		goto fail_copy;
+	}
+
+	ret = drm_gem_handle_create(file, &obj->gem.base, &handle);
+	/*
+	 * Drop reference from allocate - handle holds it now. If the
+	 * previous call failed, this will drop the ref cound to 0
+	 * freeing undoing everything above and cleaning up in the
+	 * release function above.
+         */
+	drm_gem_object_unreference(&obj->gem.base);
+	if (ret)
+		goto fail_handle;
+
+	args->handle = handle;
+	return 0;
+
+fail_handle:
+	/* object_unreference is done anyway. */
+fail_copy:
+	i915_gem_foreign_release(&(obj->gem));
+fail_foreign:
+	kfree(obj);
+
+	return ret;
+}
+
Index: linux-4.1.6/include/uapi/drm/i915_drm.h
===================================================================
--- linux-4.1.6.orig/include/uapi/drm/i915_drm.h	2015-09-11 15:35:32.417029176 +0200
+++ linux-4.1.6/include/uapi/drm/i915_drm.h	2015-09-11 15:35:47.480156727 +0200
@@ -226,6 +226,7 @@
 #define DRM_I915_GEM_USERPTR		0x33
 #define DRM_I915_GEM_CONTEXT_GETPARAM	0x34
 #define DRM_I915_GEM_CONTEXT_SETPARAM	0x35
+#define DRM_I915_GEM_FOREIGN		0x36
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -279,6 +280,7 @@
 #define DRM_IOCTL_I915_GEM_USERPTR			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_USERPTR, struct drm_i915_gem_userptr)
 #define DRM_IOCTL_I915_GEM_CONTEXT_GETPARAM	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_GETPARAM, struct drm_i915_gem_context_param)
 #define DRM_IOCTL_I915_GEM_CONTEXT_SETPARAM	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_SETPARAM, struct drm_i915_gem_context_param)
+#define DRM_IOCTL_I915_GEM_FOREIGN		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_FOREIGN, struct drm_i915_gem_foreign)
 
 /* Allow drivers to submit batchbuffers directly to hardware, relying
  * on the security mechanisms provided by hardware.
@@ -1090,6 +1092,15 @@
 	__u32 pad;
 };
 
+struct drm_i915_gem_foreign {
+	__u64 __user *mfns;
+	__u32 num_pages;
+#define I915_FOREIGN_BALLOON_PAGES 0x00000001
+#define I915_FOREIGN_BALLOON_HIGH  0x00000002
+	__u32 flags;
+	__u32 handle;
+};
+
 struct drm_i915_gem_userptr {
 	__u64 user_ptr;
 	__u64 user_size;
