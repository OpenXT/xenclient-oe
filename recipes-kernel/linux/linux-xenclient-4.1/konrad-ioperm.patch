################################################################################
SHORT DESCRIPTION: 
################################################################################
Paravirtualize IO permission bitmap.

################################################################################
LONG DESCRIPTION: 
################################################################################
See:
http://old-list-archives.xen.org/archives/html/xen-devel/2009-05/msg01139.html

A PV Xen guest kernel has no TSS of its own, so the IO permission
bitmap must be paravirtualized.  This patch adds set_io_bitmap
as a paravirt op, and defines a native version which updates the tss,
and a Xen version which uses a hypercall.

This is much easier now that 32 and 64-bit use the same code to
manage the IO bitmap.

################################################################################
CHANGELOG 
################################################################################
Original author: Konrad Rzeszutek Wilk
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
Until fixed upstream or for non-pv service VM pass-through.

################################################################################
UPSTREAM PLAN
################################################################################
None.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
PIO passthrough in PV guests.

################################################################################
PATCHES 
################################################################################
Index: linux-4.1.13/arch/x86/include/asm/paravirt.h
===================================================================
--- linux-4.1.13.orig/arch/x86/include/asm/paravirt.h	2015-11-17 15:37:44.553988938 +0100
+++ linux-4.1.13/arch/x86/include/asm/paravirt.h	2015-11-17 15:39:08.582996694 +0100
@@ -299,11 +299,18 @@
 {
 	PVOP_VCALL3(pv_cpu_ops.write_idt_entry, dt, entry, g);
 }
+
 static inline void set_iopl_mask(unsigned mask)
 {
 	PVOP_VCALL1(pv_cpu_ops.set_iopl_mask, mask);
 }
 
+static inline void set_io_bitmap(struct thread_struct *thread,
+				 unsigned long bytes_updated)
+{
+	PVOP_VCALL2(pv_cpu_ops.set_io_bitmap, thread, bytes_updated);
+}
+
 /* The paravirtualized I/O functions */
 static inline void slow_down_io(void)
 {
Index: linux-4.1.13/arch/x86/include/asm/paravirt_types.h
===================================================================
--- linux-4.1.13.orig/arch/x86/include/asm/paravirt_types.h	2015-11-17 15:37:44.587321877 +0100
+++ linux-4.1.13/arch/x86/include/asm/paravirt_types.h	2015-11-17 15:39:08.759661274 +0100
@@ -143,6 +143,8 @@
 	void (*load_sp0)(struct tss_struct *tss, struct thread_struct *t);
 
 	void (*set_iopl_mask)(unsigned mask);
+	void (*set_io_bitmap)(struct thread_struct *thread,
+			      unsigned long bytes_updated);
 
 	void (*wbinvd)(void);
 	void (*io_delay)(void);
Index: linux-4.1.13/arch/x86/include/asm/processor.h
===================================================================
--- linux-4.1.13.orig/arch/x86/include/asm/processor.h	2015-11-17 15:37:44.570655408 +0100
+++ linux-4.1.13/arch/x86/include/asm/processor.h	2015-11-17 15:39:08.842993624 +0100
@@ -565,6 +565,9 @@
 #endif
 }
 
+extern void native_set_io_bitmap(struct thread_struct *thread,
+				 unsigned long updated_bytes);
+
 static inline void
 native_load_sp0(struct tss_struct *tss, struct thread_struct *thread)
 {
@@ -607,7 +610,16 @@
 	native_load_sp0(tss, thread);
 }
 
-#define set_iopl_mask native_set_iopl_mask
+static inline void set_iopl_mask(unsigned mask)
+{
+	native_set_iopl_mask(mask);
+}
+
+static inline void set_io_bitmap(struct thread_struct *thread,
+				 unsigned long updated_bytes)
+{
+	native_set_io_bitmap(thread, updated_bytes);
+}
 #endif /* CONFIG_PARAVIRT */
 
 typedef struct {
Index: linux-4.1.13/arch/x86/kernel/ioport.c
===================================================================
--- linux-4.1.13.orig/arch/x86/kernel/ioport.c	2015-11-17 15:37:44.637321288 +0100
+++ linux-4.1.13/arch/x86/kernel/ioport.c	2015-11-17 15:39:08.929659266 +0100
@@ -17,13 +17,29 @@
 #include <linux/bitmap.h>
 #include <asm/syscalls.h>
 
+void native_set_io_bitmap(struct thread_struct *t,
+			  unsigned long bytes_updated)
+{
+	struct tss_struct *tss;
+
+	if (!bytes_updated)
+		return;
+
+	tss = &per_cpu(cpu_tss, get_cpu());
+
+	/* Update the TSS: */
+	if (t->io_bitmap_ptr)
+		memcpy(tss->io_bitmap, t->io_bitmap_ptr, bytes_updated);
+	else
+		memset(tss->io_bitmap, 0xff, bytes_updated);
+}
+
 /*
  * this changes the io permissions bitmap in the current task.
  */
 asmlinkage long sys_ioperm(unsigned long from, unsigned long num, int turn_on)
 {
 	struct thread_struct *t = &current->thread;
-	struct tss_struct *tss;
 	unsigned int i, max_long, bytes, bytes_updated;
 
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
@@ -48,13 +64,13 @@
 	}
 
 	/*
-	 * do it in the per-thread copy and in the TSS ...
+	 * do it in the per-thread copy
 	 *
-	 * Disable preemption via get_cpu() - we must not switch away
+	 * Disable preemption - we must not switch away
 	 * because the ->io_bitmap_max value must match the bitmap
 	 * contents:
 	 */
-	tss = &per_cpu(cpu_tss, get_cpu());
+	preempt_disable();
 
 	if (turn_on)
 		bitmap_clear(t->io_bitmap_ptr, from, num);
@@ -75,10 +91,9 @@
 
 	t->io_bitmap_max = bytes;
 
-	/* Update the TSS: */
-	memcpy(tss->io_bitmap, t->io_bitmap_ptr, bytes_updated);
+	set_io_bitmap(t, bytes_updated);
 
-	put_cpu();
+	preempt_enable();
 
 	return 0;
 }
Index: linux-4.1.13/arch/x86/kernel/paravirt.c
===================================================================
--- linux-4.1.13.orig/arch/x86/kernel/paravirt.c	2015-11-17 15:37:44.603988347 +0100
+++ linux-4.1.13/arch/x86/kernel/paravirt.c	2015-11-17 15:39:09.029658086 +0100
@@ -392,6 +392,7 @@
 	.swapgs = native_swapgs,
 
 	.set_iopl_mask = native_set_iopl_mask,
+	.set_io_bitmap = native_set_io_bitmap,
 	.io_delay = native_io_delay,
 
 	.start_context_switch = paravirt_nop,
Index: linux-4.1.13/arch/x86/kernel/process.c
===================================================================
--- linux-4.1.13.orig/arch/x86/kernel/process.c	2015-11-17 15:37:44.620654817 +0100
+++ linux-4.1.13/arch/x86/kernel/process.c	2015-11-17 15:39:09.112990434 +0100
@@ -129,16 +129,12 @@
 	unsigned long *bp = t->io_bitmap_ptr;
 
 	if (bp) {
-		struct tss_struct *tss = &per_cpu(cpu_tss, get_cpu());
-
+		preempt_disable();
 		t->io_bitmap_ptr = NULL;
 		clear_thread_flag(TIF_IO_BITMAP);
-		/*
-		 * Careful, clear this in the TSS too:
-		 */
-		memset(tss->io_bitmap, 0xff, t->io_bitmap_max);
+		set_io_bitmap(t, t->io_bitmap_max);
 		t->io_bitmap_max = 0;
-		put_cpu();
+		preempt_enable();
 		kfree(bp);
 	}
 
@@ -253,19 +249,11 @@
 			hard_enable_TSC();
 	}
 
-	if (test_tsk_thread_flag(next_p, TIF_IO_BITMAP)) {
-		/*
-		 * Copy the relevant range of the IO bitmap.
-		 * Normally this is 128 bytes or less:
-		 */
-		memcpy(tss->io_bitmap, next->io_bitmap_ptr,
-		       max(prev->io_bitmap_max, next->io_bitmap_max));
-	} else if (test_tsk_thread_flag(prev_p, TIF_IO_BITMAP)) {
-		/*
-		 * Clear any possible leftover bits:
-		 */
-		memset(tss->io_bitmap, 0xff, prev->io_bitmap_max);
-	}
+	if (test_tsk_thread_flag(next_p, TIF_IO_BITMAP) ||
+	    test_tsk_thread_flag(prev_p, TIF_IO_BITMAP))
+		set_io_bitmap(next,
+			      max(prev->io_bitmap_max, next->io_bitmap_max));
+
 	propagate_user_return_notify(prev_p, next_p);
 }
 
Index: linux-4.1.13/arch/x86/xen/enlighten.c
===================================================================
--- linux-4.1.13.orig/arch/x86/xen/enlighten.c	2015-11-17 15:37:44.540655762 +0100
+++ linux-4.1.13/arch/x86/xen/enlighten.c	2015-11-17 15:39:09.199656078 +0100
@@ -968,6 +968,18 @@
 	HYPERVISOR_physdev_op(PHYSDEVOP_set_iopl, &set_iopl);
 }
 
+static void xen_set_io_bitmap(struct thread_struct *thread,
+			      unsigned long bytes_updated)
+{
+	struct physdev_set_iobitmap set_iobitmap;
+
+	set_xen_guest_handle(set_iobitmap.bitmap,
+			     (char *)thread->io_bitmap_ptr);
+	set_iobitmap.nr_ports = thread->io_bitmap_ptr ? IO_BITMAP_BITS : 0;
+	WARN_ON(HYPERVISOR_physdev_op(PHYSDEVOP_set_iobitmap,
+				      &set_iobitmap));
+}
+
 static void xen_io_delay(void)
 {
 }
@@ -1252,6 +1264,7 @@
 	.load_sp0 = xen_load_sp0,
 
 	.set_iopl_mask = xen_set_iopl_mask,
+	.set_io_bitmap = xen_set_io_bitmap,
 	.io_delay = xen_io_delay,
 
 	/* Xen takes care of %gs when switching to usermode for us */
