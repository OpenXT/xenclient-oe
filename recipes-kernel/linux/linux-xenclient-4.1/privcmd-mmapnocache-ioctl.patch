################################################################################
SHORT DESCRIPTION: 
################################################################################
Introduce a privcmd ioctl to change cache policy of mapped foreign memory (e.g.
using xc_map_foreign_batch)

################################################################################
LONG DESCRIPTION: 
################################################################################
Expose ioctl IOCTL_PRIVCMD_MMAPCACHEATTR (in privcmd ids) to change the cache
policy of a foreign mmapped region with a limited subset of policies that will
be converted to cache policies supported by the kernel (currently 1:1
interface, so only for compatibility). The applied cache policy will be
the one from the kernel receiving the privcmd (likely dom0), not the foreign
guest.

Primary usage, for now, is to change cache policy to WC for framebuffer regions
from QEMU or Surfman. UIVM PV framebuffer (xenfb2) is particulary sensible to
cache policy.

################################################################################
CHANGELOG 
################################################################################
Original author: Unknown 
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
The current graphic stack requires a way to change the cache policy of a memory
region to deal with soft-rendering framebuffer requirements. This could be
removable with a different approach.

################################################################################
UPSTREAM PLAN
################################################################################
None, this is OpenXT specific.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
In xen-tools: xc-xt-foreign-batch-cacheattr, implements
xc_map_foreign_batch_cacheattr() called in QEMU, Surfman, possibly elsewhere...

################################################################################
PATCHES 
################################################################################
Index: linux-4.1.6/drivers/xen/privcmd.c
===================================================================
--- linux-4.1.6.orig/drivers/xen/privcmd.c	2015-09-11 15:18:57.923923712 +0200
+++ linux-4.1.6/drivers/xen/privcmd.c	2015-09-11 15:19:11.273742358 +0200
@@ -547,6 +547,48 @@
 	goto out;
 }
 
+static long privcmd_ioctl_mmap_cache_attr(void __user *udata)
+{
+	struct privcmd_mmapcacheattr m;
+	struct mm_struct *mm = current->mm;
+	struct vm_area_struct *vma;
+	unsigned long prot;
+
+	if (copy_from_user(&m, udata, sizeof(m)))
+		return -EFAULT;
+
+	vma = find_vma(mm, m.addr);
+	if (vma == NULL)
+		return -EINVAL;
+
+	switch (m.type) {
+		case XEN_DOMCTL_MEM_CACHEATTR_UC:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_UC);
+			break;
+		case XEN_DOMCTL_MEM_CACHEATTR_WC:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_WC);
+			break;
+		case XEN_DOMCTL_MEM_CACHEATTR_WT:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_WT);
+			break;
+		case XEN_DOMCTL_MEM_CACHEATTR_WP:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_WP);
+			break;
+		case XEN_DOMCTL_MEM_CACHEATTR_WB:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_WB);
+			break;
+		case XEN_DOMCTL_MEM_CACHEATTR_UCM:
+			prot = cachemode2protval(_PAGE_CACHE_MODE_UC_MINUS);
+			break;
+		default:
+			return -EINVAL;
+	}
+
+	pgprot_val(vma->vm_page_prot) |= prot;
+
+	return 0;
+}
+
 static long privcmd_ioctl(struct file *file,
 			  unsigned int cmd, unsigned long data)
 {
@@ -570,6 +612,10 @@
 		ret = privcmd_ioctl_mmap_batch(udata, 2);
 		break;
 
+	case IOCTL_PRIVCMD_MMAPCACHEATTR:
+		ret = privcmd_ioctl_mmap_cache_attr(udata);
+		break;
+
 	default:
 		ret = -EINVAL;
 		break;
Index: linux-4.1.6/include/uapi/xen/privcmd.h
===================================================================
--- linux-4.1.6.orig/include/uapi/xen/privcmd.h	2015-09-11 15:18:57.923923712 +0200
+++ linux-4.1.6/include/uapi/xen/privcmd.h	2015-09-11 15:19:11.273742358 +0200
@@ -73,6 +73,19 @@
 	int __user *err;  /* array of error codes */
 };
 
+#define XEN_DOMCTL_MEM_CACHEATTR_UC  0
+#define XEN_DOMCTL_MEM_CACHEATTR_WC  1
+#define XEN_DOMCTL_MEM_CACHEATTR_WT  4
+#define XEN_DOMCTL_MEM_CACHEATTR_WP  5
+#define XEN_DOMCTL_MEM_CACHEATTR_WB  6
+#define XEN_DOMCTL_MEM_CACHEATTR_UCM 7
+
+struct privcmd_mmapcacheattr {
+       __u64 addr;
+       int type;
+};
+
+
 /*
  * @cmd: IOCTL_PRIVCMD_HYPERCALL
  * @arg: &privcmd_hypercall_t
@@ -94,5 +107,7 @@
 	_IOC(_IOC_NONE, 'P', 3, sizeof(struct privcmd_mmapbatch))
 #define IOCTL_PRIVCMD_MMAPBATCH_V2				\
 	_IOC(_IOC_NONE, 'P', 4, sizeof(struct privcmd_mmapbatch_v2))
+#define IOCTL_PRIVCMD_MMAPCACHEATTR                            \
+       _IOC(_IOC_NONE, 'P', 200, sizeof(struct privcmd_mmapcacheattr))
 
 #endif /* __LINUX_PUBLIC_PRIVCMD_H__ */
