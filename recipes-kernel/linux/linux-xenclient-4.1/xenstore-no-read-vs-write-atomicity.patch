################################################################################
SHORT DESCRIPTION: 
################################################################################
Fix xenbus deadlock introduced with 3.14 (9c225f26).

################################################################################
LONG DESCRIPTION: 
################################################################################
Implement Al Viro's fix mentioned for Xenstore deadlock now that
concurrent writes are serialized with respect to f_pos accesses:
http://permalink.gmane.org/gmane.linux.file-systems/93969

"We can't live with read() vs. write() atomicity, since we use write()
as source of events returned by read() and write() called after another
thread has blocked in read() waiting for events cannot be required to
wait for that read() to finish."

################################################################################
CHANGELOG 
################################################################################
Original author: Al Viro
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
Removal would require another way to fix the deadlock.

################################################################################
UPSTREAM PLAN
################################################################################
Another fix might by discussed, otherwise it could be suggested.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None.

################################################################################
PATCHES 
################################################################################
Index: linux-4.1.6/drivers/xen/xenbus/xenbus_dev_frontend.c
===================================================================
--- linux-4.1.6.orig/drivers/xen/xenbus/xenbus_dev_frontend.c	2015-09-11 15:18:57.173933900 +0200
+++ linux-4.1.6/drivers/xen/xenbus/xenbus_dev_frontend.c	2015-09-11 15:20:08.226301904 +0200
@@ -550,6 +550,14 @@
 
 	filp->private_data = u;
 
+	/*
+	* we can't live with read() vs. write() atomicity, since we use
+	* write() as source of events returned by read() and write()
+	* called after another thread has blocked in read() waiting for
+	* events cannot be required to wait for that read() to finish.
+	*/
+	no_atomic_pos(filp);
+
 	return 0;
 }
 
Index: linux-4.1.6/include/linux/fs.h
===================================================================
--- linux-4.1.6.orig/include/linux/fs.h	2015-09-11 15:18:57.173933900 +0200
+++ linux-4.1.6/include/linux/fs.h	2015-09-11 15:20:08.226301904 +0200
@@ -870,6 +870,11 @@
 	unsigned char f_handle[0];
 };
 
+static inline void no_atomic_pos(struct file *f)
+{
+	f->f_mode &= ~FMODE_ATOMIC_POS;
+}
+
 static inline struct file *get_file(struct file *f)
 {
 	atomic_long_inc(&f->f_count);
