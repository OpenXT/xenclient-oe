#!/bin/bash

# Usage: err MESSAGE
# Print MESSAGE on stderr and end the script with an error code 1.
err() {
    echo "seal-system: $1" >&2
    exit 1
}

# Load openxt-measuredlaunch helpers.
if [ ! -f /usr/lib/openxt/ml-functions ]; then
    err "Failed to load ml-functions. \
        Is openxt-measuredlaunch installed correctly?"
fi
. /usr/lib/openxt/ml-functions

# Load optional script configuration.
if [ -f /etc/openxt/seal-system.conf ]; then
    . /etc/openxt/seal-system.conf
fi

# Usage: constains_only STRING CHARACTER
# Succeeds when all the characters in STRING are CHARACTER.
contains_only() {
    local s="$1"
    local c="$2"

    # Remove all instances of c from s and check if the result is empty
    [[ -z "${s//$c}" ]]
}

usage() {
    cat <<EOF >&2
Usage: seal-system [-h] [-s|-u|-f] [-ctpgbr path] -[48 object[,objects]]"
  -h      Display this usage.
  -s      Seal operation.
  -u      Unseal operation.
  -f      Forward sealing operation.
  -c path Path to configuration key.
  -t path Path to sealed key.
  -p path Path to pcr list file.
  -g path Path to "good" pcrs log file.
  -b path Path to "bad" pcrs log file.
  -r path Path to root block device to be measured.

  -4 object[,objects] List, comma ',' separated, of objects measured in pcr4
                      for UEFI installations. The hash of the first object
                      in the list is calculated by pesign, while the following
                      will extend as raw-buffers the initial Authenticode hash.
  -8 object[,objects] List, comma ',' separated, of objects measured in pcr8
                      for UEFI installations. Order is significant.
EOF
}

# Usage: pcr_in_selection PCR-ID
# Returns 0 if pcr-id PCR is in ${pcr_selection}, 1 otherwise.
# ${pcr_selection} is defined in the 'Configurables' section, it contains the
# list of PCRs defined in ${config_pcrs}.
pcr_in_selection() {
    local pcr="$1"

    for p in ${pcr_selection}; do
        if [ "${p}" -eq "${pcr}" ]; then
            return 0
        fi
    done

    return 1
}

# Globals
hashalg="$(tpm_get_hash_algorithm)"
tpm_ver="$(get_tpm_version)"

# Configurables
operation="seal"
config_key="/config/keys/config.key"
sealed_key="/boot/system/tpm/config.tss"
config_pcrs="/config/config.pcrs"
good_pcrs="/config/good.pcrs"
bad_pcrs="/boot/system/tpm/bad.pcrs"
root_dev="/dev/mapper/xenclient-root"

# First file is parsed and signed with pesign, following object will extend the
# hash:
# According to the UEFI specification PCR4 should contain measurement of UEFI
# executables using the Authenticode hash, which is what pesign produces. Since
# the shim gets loaded by the firmware directly it gets measured as
# Authenticode. Due to a firmware bug on Dell systems the other executables
# (xen/dom0 kernel) can't be measured with Authenticode, so they are measured
# as raw buffers. Ideally once Dell fixes their issue (they have been notified)
# and all firmwares uniformly can measure with Authenticode we would make this
# UEFI spec compliant.
pcr4_objs=(
    /boot/shimx64.efi
    /boot/xen.efi
    /boot/bzImage
    /boot/tboot
    /boot/xen.efi
)
pcr8_objs=(
    /usr/share/xenclient/bootloader/openxt.cfg
    /boot/initrd
    /etc/xen/xenrefpolicy/policy/policy.24
    /boot/microcode_intel.bin
)

while getopts ":sufc:t:p:g:b:r:4:8:h" opt; do
    case "${opt}" in
    s) operation="seal" ;;
    u) operation="unseal" ;;
    f) operation="forward" ;;
    c) config_key="${OPTARG}" ;;
    t) sealed_key="${OPTARG}" ;;
    p) config_pcrs="${OPTARG}" ;;
    g) good_pcrs="${OPTARG}" ;;
    b) bad_pcrs="${OPTARG}" ;;
    r) root_dev="${OPTARG}" ;;
    [48]) IFS=', ' read -r -a "pcr${opt}_objs" <<< "${OPTARG}" ;;
    h) usage
       exit 0
       ;;
    \?) err "unknown option: -${OPTARG}" ;;
    *) err "getopts falal error" ;;
    esac
done

# read_pcr_selection will read ${config_pcrs} which can be changed on cmdline.
pcr_selection="$(cat "${config_pcrs}")"

case "${operation}" in
seal)
    pcr_params=""
    for p in ${pcr_selection}; do
        pcr_params="${pcr_params} -p ${p}"
    done

    if ! tpm_seal -a "${hashalg}" ${pcr_params} "${config_key}" "${sealed_key}"; then
        err "failed to seal against PCRs."
    fi

    rm -f "${bad_pcrs}"
    tpm_list_pcrs > "${good_pcrs}"

    exit 0
;;
forward)
    # PCR4 holds the hashes of OpenXT's EFI applications: shim, xen and dom0 kernel.
    # PCR8 holds the hashes of the other critical components of OpenXT's boot:
    #  openxt.cfg, the initrd and the XSM policy.
    # If PCR8 is all 0 we were not booting with UEFI
    pcr8="$(tpm_get_pcr 8)"
    pcr17="$(tpm_get_pcr 17)"

    pcr_forward=()
    if ! contains_only "${pcr8}" "0"; then
        # PCR4 is first extended with the digest of EV_SEPARATOR
        # See TCG EFI Protocol Specification 5.2 Crypto Agile Log Entry Format
        ev_separator="$(tpm_get_ev_separator)"

        pcr4=$(hash_extend 0 "${ev_separator}" "${hashalg}")

        hash=$(pesign -h -d "${hashalg}" -i "${pcr4_objs[0]}" | awk '{ print $2 }')
        pcr4=$(hash_extend "${pcr4}" "${hash}" "${hashalg}") ||
            err "failed to calculate pcr4"

        for o in ${pcr4_objs[@]:1}; do
            hash=$(${hashalg}sum "${o}" | awk '{ print $1 }')
            pcr4=$(hash_extend "${pcr4}" "${hash}" "${hashalg}") ||
                err "failed to calculate pcr4"
        done

        pcr8="0"

        for o in ${pcr8_objs[@]}; do
            hash=$(${hashalg}sum "${o}" | awk '{ print $1 }')
            pcr8=$(hash_extend "${pcr8}" "${hash}" "${hashalg}") ||
                err "failed to calculate pcr8"
        done

        modules=$(cat /usr/share/xenclient/bootloader/openxt.cfg | grep "sinit" | awk -F'=' '{print $2}')
        for module in $modules; do
            hash=$(${hashalg}sum /boot/$module | awk '{ print $1 }')
            pcr8=$(hash_extend "${pcr8}" "${hash}" "${hashalg}") ||
                err "failed to calculate pcr8"
        done

        pcr_forward[4]=":${pcr4}"
        pcr_forward[8]=":${pcr8}"
    fi

    if pcr_in_selection 15 ; then
        [ -r "${root_dev}" ] || err "cannot read root_dev ${root_dev}"
        # During early init, rootfs is hashed and is given to
        # tpm_extend which for tpm1.2 hashes the rootfs hash again and
        # hands that value to the TPM to be extended into PCR 15

        # Use dd here to perform direct I/O. On some machines in some cases,
        # stale data in the storage layer, or perhaps the disk cache, causes
        # sha256sum {root_dev} to compute an incorrect hash, leading to a bad
        # PCR15 value. Direct I/O always computes an accurate hash so we can
        # correct predict PCR15 during forward seal.
        root_hash=$(dd status=none if=${root_dev} iflag=direct bs=8M | \
                        ${hashalg}sum|cut -f1 -d' ')
        [ "${tpm_ver}" = "1.2" ] && root_hash=$(echo -n ${root_hash} | \
                                                ${hashalg}sum|cut -f1 -d' ')
        pcr15=$(hash_extend 0 ${root_hash} ${hashalg}) ||
                err "failed to hash root device"

        pcr_forward[15]=":${pcr15}"
    fi

    # Calculate DRTM PCRs if set (ie. PCR17 is not all f)
    if ! contains_only "${pcr17}" "f"; then
        if ! contains_only "${pcr8}" 0; then
            pcrs=$(calculate_drtm_pcrs "/" /usr/share/xenclient/bootloader/openxt.cfg ${hashalg} 1 ${FWS_TBOOT_VERSION} ${FWS_EVTLOG_OVERRIDE}) ||
                err "failed to calculate pcrs"
        else
            pcrs=$(calculate_drtm_pcrs "/" /boot/system/grub/grub.cfg ${hashalg} 0 ${FWS_TBOOT_VERSION} ${FWS_EVTLOG_OVERRIDE}) ||
                err "failed to calculate pcrs"
        fi

        pcr17=$(echo $pcrs | awk '{ print $1 }')
        pcr18=$(echo $pcrs | awk '{ print $2 }')
        pcr19=$(echo $pcrs | awk '{ print $3 }')

        pcr_forward[17]=":${pcr17}"
        pcr_forward[18]=":${pcr18}"
        pcr_forward[19]=":${pcr19}"
    fi

    rm -f /boot/system/tpm/forward_pcr.lst
    for p in ${pcr_selection}; do
        pcr_params="${pcr_params} -p ${p}${pcr_forward[${p}]}"
        if [ -n "${pcr_forward[${p}]}" ]; then
            echo "${p}${pcr_forward[${p}]}" >> /boot/system/tpm/forward_pcr.lst
        fi
    done

    if ! tpm_seal -a "${hashalg}" ${pcr_params} "${config_key}" "${sealed_key}"; then
        err "forward seal of key failed"
    fi

    exit 0
;;
unseal)
    if [ ! -e "${sealed_key}.${hashalg}" ]; then
        err "sealed key file missing"
    fi

    if [ "${tpm_ver}" = "2.0" -a ! -e "${sealed_key}.pub.${hashalg}" ]; then
        err "sealed pub key file missing"
    fi

    if ! tpm_unseal -a "${hashalg}" "${sealed_key}"; then
        err "unseal failed"
    fi

    exit 0
;;
*)
    err "Unknown operation \"${operation}\""
;;
esac
