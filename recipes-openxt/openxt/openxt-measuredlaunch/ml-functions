#!/bin/sh
#
# Copyright (c) 2016 Daniel P. Smith, Apertus Solutions, LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. /usr/lib/openxt/key-functions
[ $? -eq 0 ] || {
    echo "failed to load key-functions"
    exit 1
}

hex2bin() {
    read hex
    echo -n $hex | sed 's/\([0-9A-F]\{2\}\)/\\\\\\x\1/gI' | xargs printf
}

# Function to parse grub.cfg and return all multiboot modules and their
#   full command line
# parameter 0: path to grub.conf
parse_grub() {
    local grub_conf=$1
    exec 6< $grub_conf

    # Find any environment variables and bring them into current environment
    local IFS=$'\n'
    local lines=$(egrep -e "^[A-Z_]*=.*" $grub_conf)
    for line in $lines; do
        eval $line
    done

    # Find the default boot entry
    local entry=$( grep "set default=" $grub_conf | cut -f2 -d= | tr -d \" )
    [[ -z $entry ]] && entry=0

    # Seek to default boot entry
    local count=0
    while read -u 6 line; do
        echo $line | grep -q menuentry || continue

        if [[ $count -lt $entry ]]; then
            count=$(( $count + 1 ))
            continue
        elif [[ $count -eq $entry ]]; then
            break
        elif [[ $count -gt $entry ]]; then
            exec 6<&-
            return 1;
        fi
    done

    # Parse through entry lines, expanding variables, and printing any multiboot modules
    while read -u 6 line; do
        echo $line | grep -q -e "^#" && continue
        echo $line | grep -q -e "^}" && break

        line=$(echo $line | sed -e 's/(/\\(/' -e 's/)/\\)/')
        eval "echo $line" | awk '$1 ~ /multiboot|module/ { print substr($0, index($0,$2)) }'
    done

    exec 6<&-
}

# Function to calulate sinit hash and return the resulting hash
# parameter 0: path to TXT AC module
# return 0 on success
# return 1 if passed invalid hashes
hash_sinit() {
    local acmod=$1
    local policy="/tmp/.policy"
    local tboot_idx='0x20000001'

    lcp_readpol -i $tboot_idx -f $policy 2>&1 >/dev/null

    tb_polgen --show $policy 2>&1 >/dev/null
    [[ $? -ne 0 ]] && return 1

    echo $(sinit_hash -p $policy $acmod|tr -d ' ')
    rm $policy 2>&1 >/dev/null
}

# Function to perform a TPM hash extended
# parameter 0: hash to extend
# parameter 1: extending hash
# return 0 on success
# return 1 if passed invalid hashes 
hash_extend() {
    local first=$1
    local second=$2
    local buffer="/tmp/.buffer"

    [[ $first == 0 ]] && first="0000000000000000000000000000000000000000"
    [[ $(echo -n $first|wc -c) -ne 40 ]] && return 1
    [[ $(echo -n $second|wc -c) -ne 40 ]] && return 1

    echo -n $first | hex2bin >$buffer
    echo -n $second | hex2bin >>$buffer

    echo $(sha1sum $buffer | awk '{ print $1 }')
    rm $buffer
}

# Function to calculate PCR 17
# return 0 on success
# return 1 on failure
pcr17() {
    local root="${1:-/}"
    local pcr17=''

    local tpm_dir=$(find /sys/class -name tpm0)

    [[ ! -d $tpm_dir ]] && return 1

    pcr17=$(grep PCR-17 ${tpm_dir}/device/pcrs | cut -f2 -d: | tr -d ' ')

    echo "${pcr17}"
    return 0
}

# Function to calculate PCR 18
# parameter 0: path to root
# parameter 1: multiboot modules
# return 0 on success
# return 1 on failure
pcr18() {
    local root="${1:-/}"
    local modules="${2}"
    local pcr18=''

    local IFS=$'\n'
    mod_num=0
    for  modline in $modules; do
        args=""
        module=$(echo ${modline} | awk '{ print $1 }')
        if [[ $(echo ${modline} | wc -w) -gt 2 ]]; then
            cmdline=$(echo ${modline} | awk '{ print substr($0, index($0,$2)) }')
        else
            cmdline=""
        fi

        if $(echo ${module} | egrep -q -e '\.bin$|\.BIN$'); then
            continue
        fi

        case ${mod_num} in
        0)
            cmdline=$(echo ${cmdline} | sed -e 's/FIXME\s*//')
            mlehash=$(lcp_mlehash -c "${cmdline}" ${root}/${module}|tr -d ' ')
            pcr18=$(hash_extend 0 ${mlehash})
            [[ $? -ne 0 ]] && return 1
        ;;
        1)
            if [[ -z "${mlehash}" ]]; then
                echo "failed to hash MLE"
                exit 1
            fi

            [[ -n "${cmdline}" ]] && args="-c '${cmdline}'"
            $(echo ${module}|egrep -q -e'\.gz$') && args="${args} -z"
            pcr18=$(eval "module_hash -e ${pcr18} ${args} ${root}/${module}")
        ;;
        *)
            break
        ;;
        esac

        mod_num=$(( ${mod_num} + 1 ))
    done

    [ -n ${pcr18} ] && {
        echo "${pcr18}"
        return 0
    }

    return 1
}

# Function to calculate PCR 19
# parameter 0: path to root
# parameter 1: multiboot modules
# return 0 on success
# return 1 on failure
pcr19() {
    local root="${1:-/}"
    local modules="${2}"
    local pcr19=''

    local IFS=$'\n'
    mod_num=0
    for  modline in $modules; do
        args=""
        module=$(echo ${modline} | awk '{ print $1 }')
        if [[ $(echo ${modline} | wc -w) -gt 2 ]]; then
            cmdline=$(echo ${modline} | awk '{ print substr($0, index($0,$2)) }')
        else
            cmdline=""
        fi

        if $(echo ${module} | egrep -q -e '\.bin$|\.BIN$'); then
            finger=$(head -c 8 ${root}/${module}|sha1sum|head -c 7)
            if [ "$finger" = "c22c443" ]; then
                continue
            fi
        fi

        case ${mod_num} in
        0)
            mod_num=$(( ${mod_num} + 1 ))
            continue
        ;;
        1)
            mod_num=$(( ${mod_num} + 1 ))
            continue
        ;;
        *)
            [[ -z ${pcr19} ]] && pcr19=0

            [[ -n "${cmdline}" ]] && args="-c '${cmdline}'"
            $(echo ${module}|egrep -q -e'\.gz$') && args="${args} -z"
            pcr19=$(eval "module_hash -e ${pcr19} ${args} ${root}/${module}")
        ;;
        esac

        mod_num=$(( ${mod_num} + 1 ))
    done

    [ -n ${pcr19} ] && {
        echo "${pcr19}"
        return 0
    }

    return 1
}

calculate_pcrs() {
    local root="${1:-/}"
    local grub_conf=${2}
    local p17=''
    local p18=''
    local p19=''

    local modules=$(parse_grub ${root}/$grub_conf)

    if [[ $? -eq 0 ]]; then
        p17=$(pcr17 ${root} "${modules}" "true") || return 1
        p18=$(pcr18 ${root} "${modules}") || return 1
        p19=$(pcr19 ${root} "${modules}") || return 1
    fi

	echo "${p17} ${p18} ${p19}"
}

# Function to generate the tboot verified launch policy
# parameter 0: TPM owner password
# return 0 on success
# return 1 on failure to create policy
# return 2 on failure to write the policy to the TPM
generate_policy() {
    local password=$(cat $1)
    local policy=/tmp/tboot.vl
    local tboot_idx='0x20000001'

    [ -f $policy ] && rm -f $policy

    tb_polgen --create --type nonfatal --ctrl 1 $policy 2>&1 1>/dev/null && \
    tb_polgen --add --num 0 --pcr none --hash any $policy 2>&1 1>/dev/null && \
    tb_polgen --add --num any --pcr 19 --hash any $policy 2>&1 1>/dev/null
    if [ $? -ne 0 ]; then
        echo "failed to generate tboot Verified Launch policy" >&2
        return 1
    fi

    local polsize=$(cat $policy | wc -c)
    tpmnv_defindex -i $tboot_idx -s $polsize -pv 0x02 -p "$password" 2>&1 1>/dev/null && \
    lcp_writepol -i $tboot_idx -f $policy -p "$password" 2>&1 1>/dev/null
    if [ $? -ne 0 ]; then
        echo "failed to write tboot Verified Launch policy to TPM" >&2
        return 2
    fi

    [ -f $policy ] && rm -f $policy
}

# Function to determine whether or not tboot was able to setup an MLE
# return 0 if tboot was successful
#        1 if tboot was not successful
#        2 if indeterminant
mle_success() {
    local ret=0
    local msg=""

    msg=$(txt-stat | grep 'TXT measured launch' | awk '{print $4}')
    case "$msg" in
        TRUE)  ;;
        FALSE) ret=1 ;;
        *)     ret=2 ;;
    esac
    return $ret
}

# Function to configure measured launch on platform.  The next boot will cause
#   init-root.ro to perform first sealing operation.
# parameter 0: mount point for rootfs
# parameter 1: key to unlock partition
# parameter 2: device path for partition
# return 0 on success
#        1 on error
configure_measured_launch()
{
    local root="${1:-/}"
    local unlock_key="${2}"
    local config_dev="${3}"
    local tpm_dir="${root}/boot/system/tpm"

    # this will block until there is sufficient entropy
    local key_file=$(gen_config_key $root) || return 1
    set_encrypted_key $unlock_key $key_file $config_dev || return 1

    echo "-p 0 -p 1 -p 2 -p 3 -p 15 -p 17 -p 18 -p 19" > ${root}/config/config.pcrs
    mkdir -p ${tpm_dir}
    touch ${tpm_dir}/setup
    touch ${tpm_dir}/enabled

    echo "${key_file}"
    return 0
}
