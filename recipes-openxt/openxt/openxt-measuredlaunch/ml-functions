#!/bin/sh
#
# Copyright (c) 2016 Daniel P. Smith, Apertus Solutions, LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. /usr/lib/openxt/key-functions
[ $? -eq 0 ] || {
    echo "failed to load key-functions"
    exit 1
}

. /usr/lib/tpm-scripts/tpm-functions
[ $? -eq 0 ] || {
    echo "failed to load tpm-functions"
    exit 1
}

get_preferred_alg () {
    pcr_bank_exists "sha256" && echo "sha256" && return 0
    pcr_bank_exists "sha1" && echo "sha1" && return 0
    return 1
}

hex2bin() {
    read hex
    echo -n $hex | sed 's/\([0-9A-F]\{2\}\)/\\\\\\x\1/gI' | xargs printf
}

# Function to parse grub.cfg and return all multiboot modules and their
#   full command line
# parameter 0: path to grub.conf
parse_grub() {
    local grub_conf=$1
    exec 6< $grub_conf

    # Find any environment variables and bring them into current environment
    local IFS=$'\n'
    local lines=$(egrep -e "^[A-Z_]*=.*" $grub_conf)
    env_list=""
    for line in $lines; do
        local key=$(echo $line|cut -f 1 -d'=')
        local value=$(echo $line|cut -f 2- -d'='|cut -f 1 -d';'|tr -d \")

        env_list="${env_list} ${key}"
        declare "env_${key}=${value}"
    done

    # Find the default boot entry
    local entry=$( grep "set default=" $grub_conf | cut -f2 -d= | tr -d \" )
    [[ -z $entry ]] && entry=0

    # Seek to default boot entry
    local count=0
    while read -u 6 line; do
        echo $line | grep -q menuentry || continue

        if [[ $count -lt $entry ]]; then
            count=$(( $count + 1 ))
            continue
        elif [[ $count -eq $entry ]]; then
            break
        elif [[ $count -gt $entry ]]; then
            exec 6<&-
            return 1;
        fi
    done

    # Parse through entry lines, expanding variables, and printing any multiboot modules
    local IFS=' '
    while read -u 6 line; do
        echo $line | grep -q -e "^#" && continue
        echo $line | grep -q -e "^}" && break

        line=$(echo $line | sed -e 's/(/\\(/' -e 's/)/\\)/')
        line=$(echo $line | awk '$1 ~ /multiboot|module/ { print substr($0, index($0,$2)) }')
        for e in $(echo "$env_list"); do
            if echo $line|grep -q $e; then
                local var=$(eval "echo env_${e}")
                local sub=$(eval echo \$${var})
                local match="s|\$${e}|${sub}|"
                line=$(echo $line|sed -e "${match}")
            fi
        done
        echo $line
    done

    exec 6<&-
}

# Function to parse openxt.cfg and return all modules and their filename
# parameter 0: path to openxt.conf
parse_eficfg() {
    local efi_conf=$1
    local default=0
    local tboot=""
    local xen=""
    local linux=""
    local initrd=""
    local xsm=""
    local ucode=""

    exec 6< $efi_conf
    while read -u 6 line; do
        [ "$line" == "[openxt-normal]" ] && default=1
        [ $default -eq 1 -a "$line" == "" ] && break

        [ -z "$tboot" ] && tboot=$(echo -n $line | grep "tboot" | sed 's/tboot=/\/boot\/tboot /g')
        [ -z "$xen" ] && xen=$(echo -n $line | grep "options" | sed 's/options=/\/boot\/xen.efi /g')
        [ -z "$linux" ] && linux=$(echo -n $line | grep "kernel" | sed 's/kernel=/\/boot\/bzImage /g')
        [ -z "$initrd" ] && initrd=$(echo -n $line | grep "ramdisk" | sed 's/ramdisk=/\/boot\/initramfs.gz /g')
        [ -z "$xsm" ] && xsm=$(echo -n $line | grep "xsm" | sed 's/xsm=/\/etc\/xen\/xenrefpolicy\/policy\/policy.24 /g')
        [ -z "$ucode" ] && ucode=$(echo -n $line | grep "ucode" | sed 's/ucode=/\/boot\/microcode_intel.bin /g')
    done

    printf "$tboot\n$xen\n$linux\n$initrd\n$xsm\n$ucode"

    exec 6<&-
}

# Function to perform a TPM hash extended
# parameter 0: hash to extend
# parameter 1: extending hash
# return 0 on success
# return 1 if passed invalid hashes
hash_extend() {
    local first=$1
    local second=$2
    local hashalg=${3:-"sha1"}
    local buffer="/tmp/.buffer"

    case $hashalg in
        "sha1")
            [[ $first == 0 ]] && first="0000000000000000000000000000000000000000"
            [[ $(echo -n $first|wc -c) -ne 40 ]] && return 1
            [[ $(echo -n $second|wc -c) -ne 40 ]] && return 1
        ;;
        "sha256")
            [[ $first == 0 ]] && \
                first="0000000000000000000000000000000000000000000000000000000000000000"
            [[ $(echo -n $first|wc -c) -ne 64 ]] && return 1
            [[ $(echo -n $second|wc -c) -ne 64 ]] && return 1
        ;;
    esac

    echo -n $first | hex2bin >$buffer
    echo -n $second | hex2bin >>$buffer

    echo $(${hashalg}sum $buffer | awk '{ print $1 }')

    rm $buffer
}

# Function to calculate PCR 17
# return 0 on success
# return 1 on failure
pcr17() {
    local root="${1:-/}"
    local pcr17=''

    local tpm_dir=$(find /sys/class -name tpm0)

    [[ ! -d $tpm_dir ]] && return 1

    pcr17=$(grep PCR-17 ${tpm_dir}/device/pcrs | cut -f2 -d: | tr -d ' ')

    echo "${pcr17}"
    return 0
}

# Function to calculate PCR 18
# parameter 0: path to root
# parameter 1: multiboot modules
# return 0 on success
# return 1 on failure
pcr18() {
    local root="${1:-/}"
    local modules="${2}"
    local pcr18=''

    local IFS=$'\n'
    mod_num=0
    for  modline in $modules; do
        args=""
        module=$(echo ${modline} | awk '{ print $1 }')
        if [[ $(echo ${modline} | wc -w) -ge 2 ]]; then
            cmdline=$(echo ${modline} | cut -d' ' -f 2-)
        else
            cmdline=""
        fi

        if $(echo ${module} | egrep -q -e '\.bin$|\.BIN$'); then
            continue
        fi

        case ${mod_num} in
        0)
            cmdline=$(echo ${cmdline} | sed -e 's/FIXME\s*//')
            mlehash=$(lcp_mlehash -c "${cmdline}" ${root}/${module}|tr -d ' ')
            pcr18=$(hash_extend 0 ${mlehash})
            [[ $? -ne 0 ]] && return 1
        ;;
        1)
            if [[ -z "${mlehash}" ]]; then
                echo "failed to hash MLE"
                exit 1
            fi

            [[ -n "${cmdline}" ]] && args="-c '${cmdline}'"
            $(echo ${module}|egrep -q -e'\.gz$') && args="${args} -z"
            pcr18=$(eval "module_hash -e ${pcr18} ${args} ${root}/${module}")
        ;;
        *)
            break
        ;;
        esac

        mod_num=$(( ${mod_num} + 1 ))
    done

    [ -n ${pcr18} ] && {
        echo "${pcr18}"
        return 0
    }

    return 1
}

# Function to calculate PCR 19
# parameter 0: path to root
# parameter 1: multiboot modules
# return 0 on success
# return 1 on failure
pcr19() {
    local root="${1:-/}"
    local modules="${2}"
    local srtm="${3:-1}"
    local hashalg=${4:-"sha1"}
    local pcr19=''

    local IFS=$'\n'
    mod_num=0
    for  modline in $modules; do
        args=""
        module=$(echo ${modline} | awk '{ print $1 }')
        if [[ $(echo ${modline} | wc -w) -ge 2 ]]; then
            cmdline=$(echo ${modline} | cut -d' ' -f 2-)
        else
            cmdline=""
        fi

        # ACMs have a binary fingerprint, hash first 8 bytes of every .bin file
        # and if it matches hash of fingerprint, skip.
        if $(echo ${module} | egrep -q -e '\.bin$|\.BIN$'); then
            finger=$(head -c 8 ${root}/${module}|sha1sum|head -c 7)
            if [ "$finger" = "c22c443" ]; then
                continue
            fi
        fi

        case ${mod_num} in
        0)
            mod_num=$(( ${mod_num} + 1 ))
            continue
        ;;
        1)
            mod_num=$(( ${mod_num} + 1 ))
            continue
        ;;
        *)
            [[ -z ${pcr19} ]] && pcr19=0

            if [ $srtm -eq 0 ]; then
                [[ -n "${cmdline}" ]] && args="-c '${cmdline}'"
                $(echo ${module}|egrep -q -e'\.gz$') && args="${args} -z"
                pcr19=$(eval "module_hash -e ${pcr19} ${args} ${root}/${module}")
            else
                clihash=$(echo -n $cmdline | ${hashalg}sum - | awk '{ print $1 }')
                modhash=$(${hashalg}sum ${root}/${module} | awk '{ print $1 }')
                modhash=$(hash_extend $clihash $modhash)
                pcr19=$(hash_extend $pcr19 $modhash)
            fi
        ;;
        esac

        mod_num=$(( ${mod_num} + 1 ))
    done

    [ -n ${pcr19} ] && {
        echo "${pcr19}"
        return 0
    }

    return 1
}


# Hash all multiboot modules
# parameter 1: multiboot modules
# return 0 on success
# return 1 on failure
hash_modules() {
    local root="${1:-/}"
    local hashalg=${2:-"sha1"}
    local modules="${3}"
    local srtm="${4:-0}"
    local hash_list=''
    local mod_num=0
    local args=''

    local IFS=$'\n'
    for  modline in $modules; do
        args="-a ${hashalg}"
        module=$(echo ${modline} | awk '{ print $1 }')
        if [[ $(echo ${modline} | wc -w) -ge 2 ]]; then
            cmdline=$(echo ${modline} | cut -d' ' -f 2-)
        else
            cmdline=""
        fi

        # ACMs have a binary fingerprint, hash first 8 bytes of every .bin file
        # and if it matches hash of fingerprint, skip.
        if $(echo ${module} | egrep -q -e '\.bin$|\.BIN$'); then
            finger=$(head -c 8 ${root}/${module}|sha1sum|head -c 7)
            [ "$finger" = "c22c443" ] && continue
        fi


        if [[ ${mod_num} -eq 0 ]]; then
            cmdline=$(echo ${cmdline} | sed -e 's/FIXME\s*//')
            hash_list=$(lcp2_mlehash --create --alg $hashalg \
                    --cmdline "${cmdline}" ${root}/${module}|tr -d ' ')
            [[ $? -ne 0 ]] && return 1
        else
            if [[ -z "${hash_list}" ]]; then
                echo "failed to hash MLE"
                return 1
            fi

            local h=""

            # Work around buggy module_hash, it unpacks .gz images
            # before measurement is made even if no -z flag is provided.
            # It could likely be removed entirely as it is easily replaced by two lines
            # of bash.
            if [ $srtm -eq 0 ]; then
                [[ -n "${cmdline}" ]] && args="${args} -c '${cmdline}'"
                $(echo ${module}|egrep -q -e'\.gz$') && args="${args} -z"
                h=$(eval "module_hash ${args} ${root}/${module}")
            else
                clihash=$(echo -n $cmdline | ${hashalg}sum - | awk '{ print $1 }')
                modhash=$(${hashalg}sum ${root}/${module} | awk '{ print $1 }')
                h=$(hash_extend $clihash $modhash $hashalg)
            fi

            hash_list="${hash_list} ${h}"
        fi

        mod_num=$(( ${mod_num} + 1 ))
    done

    [ -n ${hash_list} ] && {
        echo "${hash_list}"
        return 0
    }

    return 1
}

check_txt_quirk() {
    modprobe txt > /dev/null 2>&1
    [ -d /sys/kernel/security/txt ] || return 0

    pcr17="$(tpm_get_pcr 17)"

    is_tpm_2_0
    if [ $? -eq 0 ]; then
        args="-2 -a sha256 -c"
    else
        args="-a sha1 -c"
    fi

    nonquirk="$(pcr-calc $args|grep ^17|cut -f2 -d:|tr 'A-Z' 'a-z'|tr -d \ )"
    quirk="$(pcr-calc $args -q|grep ^17|cut -f2 -d:|tr 'A-Z' 'a-z'|tr -d \ )"

    case $pcr17 in
    $nonquirk)
        echo 0
    ;;
    $quirk)
        echo 1
    ;;
    *)
        # Either the pcr value was invalid or an unknown sequence was used
        return 0
    ;;
    esac
}

calculate_drtm_pcrs() {
    local root="${1:-/}"
    local conf=${2}
    local hashalg=${3}
    local srtm="${4}"
    shift 4
    local evtlog_ovr="${@}"
    local p17=''
    local p18=''
    local p19=''
    local modules=''
    local quirk=$(check_txt_quirk)

    if [[ $srtm -eq 1 ]]; then
        modules=$(parse_eficfg $conf)
        [[ $? -ne 0 ]] && return 1
    else
        modules=$(parse_grub ${root}/$conf)
        [[ $? -ne 0 ]] && return 1
    fi

    # Would like to test for the presence of the txt eventlog export and
    # use the newer pcr calculator but to support upgrade path from
    # stable-6 where we did not control the VL policy, it is not possible
    # to know what policy is in use to calculate its hash. For now only
    # applying to TPM2 which implicitly implies initial install was stable-7.
    is_tpm_2_0
    if [[ $? -eq 0 ]]; then
        local modhashes=''
        local policy=''
        local pcrs=''
        local args=''

        modhashes=$(hash_modules ${root} ${hashalg} "${modules}" ${srtm})
        [[ $? -ne 0 ]] && return 1

        # get a tmp file name to store policy
        policy=$(mktemp -qu)
        [[ $? -ne 0 ]] && return 1

        create_policy ${policy} ${hashalg}
        [[ $? -ne 0 ]] && return 1

        args="${args} -p ${policy}"

        [[ ${quirk} -eq 1 ]] && args="${args} -q"

        for m in $modhashes; do
            args="${args} -m ${m}"
        done

        if [ -n "${evtlog_ovr}" ]; then
            for o in ${evtlog_ovr} ; do
                args="${args} -e ${o}"
            done
        fi

        pcrs=$(pcr-calc -2 -a sha256 ${args}|tr -d ' ')
        [[ $? -ne 0 ]] && return 1

        for l in $pcrs; do
            for p in 17 18 19; do
                [[ -z "${l##$p*}" ]] || continue

                eval "p${p}=$(echo $l|cut -f2 -d:)"
            done
        done
    else
        p17=$(pcr17 ${root} "${modules}" "true") || return 1
        p18=$(pcr18 ${root} "${modules}") || return 1
        p19=$(pcr19 ${root} "${modules}" ${srtm}) || return 1
    fi

    echo "${p17} ${p18} ${p19}"

    return 0
}

# Function to generate the tboot verified launch policy
# parameter 0: TPM owner password
# return 0 on success
# return 1 on failure to create policy
# return 2 on failure to write the policy to the TPM
generate_policy() {
    local password=$(cat $1)
    local policy=/tmp/tboot.vl
    local hash_alg="sha1" #default to sha1 for legacy support

    is_tpm_2_0
    local tpm2=$?

    if [[ "${tpm2}" -eq 0 ]]; then
        hash_alg=$(get_preferred_alg)
        [[ $? -ne 0 ]] && echo "No valid algs available" && return 1
        #Two possible nv index locations on tpm2.0 that tboot checks
        local tboot_idx='0x01200001'
        local tboot_idx2='0x01c10131'
    else
        local tboot_idx='0x20000001'
    fi

    create_policy $policy $hash_alg
    [[ $? -ne 0 ]] && echo "failed to create Verified Launch policy" && return 1

    local polsize=$(cat $policy | wc -c)
    if [ "${tpm2}" -eq 0 ]; then
        tpm2_write_tboot_policy "${policy}" "${tboot_idx}" "${password}"
        if [ $? -ne 0 ]; then
            echo "failed to write tboot Verified Launch policy to TPM" >&2
            return 2
        fi
        tpm2_write_tboot_policy "${policy}" "${tboot_idx2}" "${password}"
    else
        local old_policy=/tmp/old-tboot.vl
        local old_polsize

        lcp_readpol -i $tboot_idx -f "$old_policy" >/dev/null 2>&1

        # old_policy might not have been created.
        touch "$old_policy"

        # If the current policy matches, we are done
        diff -q "$old_policy" "$policy" >/dev/null 2>&1 && {
            rm -f "$old_policy"
            rm -f "$policy"
            return 0
        }

        old_polsize=$( cat "$old_policy" 2>/dev/null | wc -c )
        rm -f "$old_policy"

        if [ $old_polsize -ne $polsize ]; then
            # Delete even if it doesn't exist, but don't error out
            tpmnv_relindex -i $tboot_idx -p "$password" 1>/dev/null 2>&1
            tpmnv_defindex -i $tboot_idx -s $polsize -pv 0x02 \
                           -p "$password" 1>/dev/null 2>&1 || {
                echo "Failed to create tboot TPM NVRAM index $tboot_idx" >&2
                return 2
            }
        fi

        lcp_writepol -i $tboot_idx -f $policy -p "$password" 1>/dev/null 2>&1
    fi

    if [[ $? -ne 0 ]]; then
        echo "failed to write tboot Verified Launch policy to TPM" >&2
        return 2
    fi

    [[ -f $policy ]] && rm -f $policy
}

# Function to create policy and store into a file
# parameter 0: path where policy file should be written
# parameter 1: hash algorithm to use, either sha1 or sha256
# return 0 on success
# return 1 if fails to read
create_policy() {
    local policy=$1
    local hash_alg=${2:-"sha1"}

    if [[ "${hash_alg}" != "sha1" ]] && [[ "${hash_alg}" != "sha256" ]]; then
        echo "invalid algorithm" && return 1
    fi

    [[ -f $policy ]] && rm -f $policy

    tb_polgen --create --type nonfatal --ctrl 1 --alg $hash_alg $policy 1>/dev/null 2>&1 && \
    tb_polgen --add --num 0 --pcr none --hash any $policy 1>/dev/null 2>&1 && \
    tb_polgen --add --num any --pcr 19 --hash any $policy 1>/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "failed to generate tboot Verified Launch policy" >&2
        return 1
    fi

    return 0
}

# Function to determine whether or not tboot was able to setup an MLE
# return 0 if tboot was successful
#        1 if tboot was not successful
#        2 if indeterminant
mle_success() {
    local ret=0
    local msg=""

    msg=$(txt-stat | grep 'TXT measured launch' | awk '{print $4}')
    case "$msg" in
        TRUE)  ;;
        FALSE) ret=1 ;;
        *)     ret=2 ;;
    esac
    return $ret
}

write_config_pcrs() {
    local root="${1:-/}"
    local pcrs

    if is_tpm_2_0 ; then
        pcrs="-r 0 -r 1 -r 2 -r 3 -r 4 -r 5 -r 7 -r 8 -r 15 -r 17 -r 18 -r 19"
    else
        pcrs="-p 0 -p 1 -p 2 -p 3 -p 4 -p 5 -p 7 -p 8 -p 15 -p 17 -p 18 -p 19"
    fi

    echo "$pcrs" > ${root}/config/config.pcrs
}

# Function to configure measured launch on platform.  The next boot will cause
#   init-root.ro to perform first sealing operation.
# parameter 0: mount point for rootfs
# parameter 1: key to unlock partition
# parameter 2: device path for partition
# return 0 on success
#        1 on error
configure_measured_launch()
{
    local root="${1:-/}"
    local unlock_key="${2}"
    local config_dev="${3}"
    local tpm_dir="${root}/boot/system/tpm"

    # this will block until there is sufficient entropy
    local key_file=$(gen_config_key $root) || return 1
    set_encrypted_key $unlock_key $key_file $config_dev || return 1

    write_config_pcrs "${root}"

    mkdir -p ${tpm_dir}
    touch ${tpm_dir}/setup
    touch ${tpm_dir}/enabled

    echo "${key_file}"
    return 0
}
