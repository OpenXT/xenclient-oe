#!/bin/bash

. /usr/lib/tpm-scripts/tpm-functions
[ $? -eq 0 ] || {
    echo "failed to load tpm-functions"
    exit 1
}

. /usr/lib/openxt/ml-functions
[ $? -eq 0 ] || {
    echo "failed to load ml-functions"
    exit 1
}

. /usr/lib/openxt/key-functions
[ $? -eq 0 ] || {
    echo "failed to load key-functions"
    exit 1
}

err() {
    echo "seal-system: $1" >&2
    exit 1
}

# Globals
TPM_DEV="$(find /sys/class -name tpm0)/device"

is_tpm_2_0
tpm2=$?

# Configurables
operation="seal"
config_key="/config/keys/config.key"
sealed_key="/boot/system/tpm/config.tss"
static_pcrs="0 1 2 3"
dynamic_pcrs="15 17 18 19"
hashalg="sha1"
good_pcrs="/config/good.pcrs"
bad_pcrs="/boot/system/tpm/bad.pcrs"
root_dev="/dev/mapper/xenclient-root"

while getopts ":sufc:t:p:g:b:r:" opt; do
    case $opt in
    s)
        operation="seal"
    ;;
    u)
        operation="unseal"
    ;;
    f)
        operation="forward"
    ;;
    c)
        config_key=${OPTARG}
    ;;
    t)
        sealed_key=${OPTARG}
    ;;
    p)
        pcr_list=${OPTARG}
    ;;
    g)
        good_pcrs=${OPTARG}
    ;;
    b)
        bad_pcrs=${OPTARG}
    ;;
    r)
        root_dev=${OPTARG}
    ;;
    *)
        err "invalid option: -$opt"
    ;;
    esac
done

case $operation in
seal)
    file_exists=1
    if [ "${tpm2}" -eq 0 ];
    then
        sealerr=0
        seal_file=${config_key}
        clean_old_tpm_files
        if pcr_bank_exists "TPM_ALG_SHA256" && [ ${sealerr} -eq 0 ]; then
            sealout=$(tpm2_sealdata -H 0x81000000 -I ${seal_file} -O ${sealed_key}.sha256 -o ${sealed_key}.pub.sha256 -g 0xB -G 8 -b 0x492 $(cat /config/config.pcrs) 2>&1)
            sealerr=$?
        fi
    else
        sealout=$(tpm_sealdata_sa -i ${config_key} \
            -o ${sealed_key} -z $(cat ${pcr_list}) 2>&1)
        sealerr=$?
    fi

    if [ -e ${sealed_key} ]; then
        file_exists=0
    elif [ -e ${sealed_key}.sha256 ]; then
        file_exists=0
    else
        file_exists=1
    fi

    if [ $sealerr -eq 0 ] && [ -e ${sealed_key} ]; then
        # store PCR hints for recovery
        if [ -d "${TPM_DEV}" ]; then
            [ -f "${bad_pcrs}" ] && rm "${bad_pcrs}"
            if [ "${tpm2}" -eq 0 ]; then
                tpm2_listpcrs > "${good_pcrs}"
            else
                cat "${TPM_DEV}/pcrs" > "${good_pcrs}"
            fi
        fi

        exit 0
    fi
;;
forward)
    [ "${tpm2}" -eq 0 ] && hashalg="sha256"

    for p in ${static_pcrs}; do
        pcr_params="${pcr_params} -p ${p}"
    done

    # During early init, rootfs is hashed and is given to
    # tpm_extend which for tpm1.2 hashes the rootfs hash again and
    # hands that value to the TPM to be extended into PCR 15
    root_hash=$(${hashalg}sum ${root_dev}|cut -f1 -d' ')
    [ "${tpm2}" -ne 0 ] && root_hash=$(echo -n ${root_hash}|${hashalg}sum|cut -f1 -d' ')
    pcr15=$(hash_extend 0 ${root_hash} ${hashalg}) ||
        err "failed to hash root device"

    pcr_params="${pcr_params} -p 15:${pcr15}"

    pcrs=$(calculate_pcrs "/" /boot/system/grub/grub.cfg ${hashalg}) ||
        err "failed to calculate pcrs"

    pcr17=$(echo $pcrs | awk '{ print $1 }')
    pcr18=$(echo $pcrs | awk '{ print $2 }')
    pcr19=$(echo $pcrs | awk '{ print $3 }')

    pcr_params="${pcr_params} -p 17:${pcr17} -p 18:${pcr18} -p 19:${pcr19}"
    echo "$pcr_params" > /boot/system/tpm/forward_pcr.lst

    if [ -e "${sealed_key}" ]; then
        mv ${sealed_key} ${sealed_key}.old
    fi
    if [ -e "${sealed_key}.sha1" ]; then
        mv ${sealed_key}.sha1 ${sealed_key}.sha1.old
    fi
    if [ -e "${sealed_key}.sha256" ]; then
        mv ${sealed_key}.sha256 ${sealed_key}.sha256.old
    fi

    tpm_forward_seal -a ${hashalg} ${pcr_params} ${config_key} ${sealed_key}
    [ $? -eq 0 ] || err "forward seal of key failed"

    exit 0
;;
unseal)
    for p in ${static_pcrs} ${dynamic_pcrs}; do
        pcr_params="${pcr_params} -p ${p}"
    done

    [ -e "${sealed_key}.${hashalg}" ] || err "sealed key file missing"
    [ "${tpm2}" -eq 0 ] && [ -e "${sealed_key}.pub.${hashalg}" ] ||
        err "sealed pub key file missing"

    tpm_unseal -a ${hashalg} ${pcr_params} ${sealed_key}
    [ $? -eq 0 ] || err "unseal failed"
;;
esac

err "unexpectedly finsihed"
