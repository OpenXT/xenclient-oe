################################################################################
SHORT DESCRIPTION: 
################################################################################
Have the emulated NICs mirror the link-status of the network back-end, exposed
through XenStore.

################################################################################
LONG DESCRIPTION: 
################################################################################
QEMU's current default network configuration is to have two NICs (rtl8139
emulations), one for the Ethernet interface and one for the Wireless.
Each emulated card is connected to a "QEMU vlan" (not 802.1q VLAN), actually an
emulated hub (-net option behaviour), to which is also connected the tap
interface of its backend.

For each NIC created by QEMU, we add a XenStore watch on the node of the
network back-end plugged in the same hub. This let us retrieve the back-end
information using the nd_table (NICInfo).

################################################################################
CHANGELOG 
################################################################################
Intial Commit: Unknown
Port 1.4 & documentation: Eric Chanudet, chanudete@ainfosec.com, 17/04/2015
Ported to QEMU 2.6.2: Ross Philipson, philipsonr@ainfosec.com, 10/13/2016

################################################################################
REMOVAL 
################################################################################
With the current OpenXT guest network configuration, removing this patch will
trigger routing issues in the guest.

################################################################################
UPSTREAM PLAN 
################################################################################
There is no plan to upstream this patch, it is OpenXT specific.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None

################################################################################
PATCHES 
################################################################################
Index: qemu-2.6.2/include/hw/xen/xen.h
===================================================================
--- qemu-2.6.2.orig/include/hw/xen/xen.h
+++ qemu-2.6.2/include/hw/xen/xen.h
@@ -8,6 +8,7 @@
  */
 
 #include "hw/irq.h"
+#include "net/net.h"
 #include "qemu-common.h"
 
 /* xen-machine.c */
@@ -33,6 +34,9 @@ void xen_piix_pci_write_config_client(ui
 void xen_hvm_inject_msi(uint64_t addr, uint32_t data);
 int xen_is_pirq_msi(uint32_t msi_data);
 
+int xenstore_register_nic(NICConf *conf);
+int xenstore_unregister_nic(NICConf *conf);
+
 qemu_irq *xen_interrupt_controller_init(void);
 
 void xenstore_store_pv_console_info(int i, struct CharDriverState *chr);
Index: qemu-2.6.2/hw/xen/xen_backend.c
===================================================================
--- qemu-2.6.2.orig/hw/xen/xen_backend.c
+++ qemu-2.6.2/hw/xen/xen_backend.c
@@ -30,6 +30,7 @@
 #include "sysemu/char.h"
 #include "qemu/log.h"
 #include "hw/xen/xen_backend.h"
+#include "qmp-commands.h"
 
 #include <xen/grant_table.h>
 
@@ -607,6 +608,209 @@ static int xenstore_scan(const char *typ
     return 0;
 }
 
+/*
+ * OpenXT: Get type and id from \([a-zA-Z]\\{1,XENSTORE_NET_TYPE_LEN - 1\}\)\([0-9]\{1,XENSTORE_NET_ID_LEN\}\).
+ *
+ * @param name is a null terminated character string.
+ * @param type is able to store at least XENSTORE_NET_TYPE_LEN bytes.
+ * @param id is able to store at least XENSTORE_NET_ID_LEN bytes.
+ * @return 0 on success, -ERRNO else.
+ */
+/* Define constants for network devices XenStore data representation. */
+#define XENSTORE_NET_TYPE_LEN   5   /* Currently "vif"|"vwif" */
+#define XENSTORE_NET_ID_LEN     5
+static int xenstore_nic_parse_name(const char *name, char *type, char *id)
+{
+    size_t i;
+
+    assert(name);
+    assert(type);
+    assert(id);
+
+    for (i = 0; isalpha(*name) && (i < XENSTORE_NET_TYPE_LEN - 1); ++i) {
+        type[i] = *(name++);
+    }
+    if (!i) {
+        return -EINVAL;
+    }
+    type[i] = '\0';
+
+    for (i = 0; isdigit(*name) && (i < XENSTORE_NET_ID_LEN - 1); ++i) {
+        id[i] = *(name++);
+    }
+    if (!i) {
+        return -EINVAL;
+    }
+    id[i] = '\0';
+
+    return 0;
+}
+
+/*
+ * OpenXT: Fill base with the Xenstore path of the network backend for that NICInfo element.
+ *
+ * @param ni a valid pointer to a NICInfo, likely an element of nd_table.
+ * @param base is able to store at least XEN_BUFSIZE bytes.
+ * @return 0 on success, -ERRNO else.
+ */
+static int xenstore_get_nic_path(const NICInfo *ni, char *base)
+{
+    char *dompath;
+    char type[XENSTORE_NET_TYPE_LEN];
+    char id[XENSTORE_NET_ID_LEN];
+
+    assert(ni);
+    assert(base);
+
+    if (xenstore_nic_parse_name(ni->name, type, id)) {
+        fprintf(stderr, "failed to parse nic backend xenstore name `%s'.\n", ni->name);
+        return -EINVAL;
+    }
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+    if (!dompath) {
+        fprintf(stderr, "Could not retrieve domain path.\n");
+        return -ENOENT;
+    }
+    snprintf(base, XEN_BUFSIZE, "%s/device/%s/%s", dompath, type, id);
+    free(dompath);
+
+    return 0;
+}
+
+/*
+ * OpenXT: Return the NICInfo entry of the backend peered with the
+ * given NICConf.
+ *
+ * @param conf a valid pointer to a NICConf.
+ * @return a pointer to the corresponding NICInfo, NULL else.
+ */
+static NICInfo *qemu_find_nicinfo(const NICConf *conf)
+{
+    size_t i;
+
+    assert(conf);
+
+    for (i = 0; i < MAX_NICS; ++i) {
+        if (!memcmp(&nd_table[i].macaddr.a[0], &conf->macaddr.a[0], 6)) {
+            return &nd_table[i];
+        }
+    }
+    return NULL;
+}
+
+/*
+ * OpenXT: Read Xenstore for link-state change to be forwarded to the NetClients of this netdev.
+ *
+ * @param opaque a valid pointer to a NICInfo object.
+ */
+static void xenstore_update_nic(void *opaque)
+{
+    const NICInfo *ni = opaque;
+    char base[XEN_BUFSIZE];
+    int val;
+
+    assert(opaque);
+    assert(ni->used);
+    assert(ni->netdev);
+    assert(ni->netdev->peer);
+
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return;
+    }
+    if (xenstore_read_int(base, "disconnect", &val)) {
+        fprintf(stderr, "failed to read xenstore path (%s/%s).\n", base, "disconnect");
+        return;
+    }
+
+    NetClientState *ncs = ni->netdev->peer;
+    if (ncs->link_down != !!val) {
+        /* notify the emulation through qmp.
+         * note that qmp_set_link boolean is "link-up?",
+         * not nc->link_down "link-down?". */
+        qmp_set_link(ncs->name, !val, NULL);
+        fprintf(stderr, "%s (%s): link status is now %s.\n",
+                ncs->name, ni->name, !!val ? "down" : "up");
+    }
+}
+
+/*
+ * OpenXT: Print a MAC addr
+ *
+ * @param msg a valid message
+ * @param macaddr a valid pointer to a 6 byte array.
+ */
+static void qemu_mac_printf(const char *msg, const uint8_t *macaddr)
+{
+    fprintf(stderr, "%s %.2x:%.2x:%.2x:%.2x:%.2x:%.2x", msg,
+            macaddr[0], macaddr[1], macaddr[2],
+            macaddr[3], macaddr[4], macaddr[5]);
+}
+
+/*
+ * OpenXT: Register a Net Client in Xenstore.
+ *
+ * @param conf a valid pointer to a NetClientState object.
+ * @return 0 on success, -ERRNO else.
+ */
+int xenstore_register_nic(NICConf *conf)
+{
+    char base[XEN_BUFSIZE];
+    NICInfo *ni;
+
+    assert(conf);
+
+    ni = qemu_find_nicinfo(conf);
+    if (!ni) {
+        fprintf(stderr, "Failed to find backend device for emulated NIC conf %p\n", conf);
+        return -ENODEV;
+    }
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return -ENOENT;
+    }
+    if (xenstore_add_watch(base, "disconnect", xenstore_update_nic, ni)) {
+        fprintf(stderr, "Could not install xenstore watch on path `%s/disconnect'.\n", base);
+        return -1;
+    }
+    xenstore_update_nic(ni);
+
+    qemu_mac_printf("Registered xenstore watch for NIC addr:",
+                    &conf->macaddr.a[0]);
+
+    return 0;
+}
+
+/*
+ * OpenXT: Unregister a NICConf/NICInfo from Xenstore.
+ * Called when a device is removed and no longer used.
+ *
+ * @param conf a valid pointer to a NICConf object.
+ * @return 0 on success, -ERRNO else.
+ */
+int xenstore_unregister_nic(NICConf *conf)
+{
+    char base[XEN_BUFSIZE];
+    NICInfo *ni;
+
+    assert(conf);
+
+    ni = qemu_find_nicinfo(conf);
+    if (!ni) {
+        fprintf(stderr, "Failed to find backend device for emulated NIC conf %p\n", conf);
+        return -ENODEV;
+    }
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return -ENOENT;
+    }
+    if (xenstore_remove_watch(base, "disconnect", xenstore_update_nic, ni)) {
+        fprintf(stderr, "Could not install xenstore watch on path `%s/disconnect'.\n", base);
+        return -1;
+    }
+    return 0;
+}
+
 static void xenstore_update_be(char *watch, char *type, int dom,
                                struct XenDevOps *ops)
 {
Index: qemu-2.6.2/net/net.c
===================================================================
--- qemu-2.6.2.orig/net/net.c
+++ qemu-2.6.2/net/net.c
@@ -48,6 +48,9 @@
 #include "net/filter.h"
 #include "qapi/string-output-visitor.h"
 
+/* OpenXT: xenstore_register_nic() and xenstore_unregister_nic(). */
+#include "hw/xen/xen.h"
+
 /* Net bridge is currently not supported for W32. */
 #if !defined(_WIN32)
 # define CONFIG_NET_BRIDGE
@@ -305,6 +308,14 @@ NICState *qemu_new_nic(NetClientInfo *in
         nic->ncs[i].queue_index = i;
     }
 
+    /*
+     * OpenXT: Register the new NICConf/NICInfo with Xenstore.
+     * Required for link-state propagation logic.
+     */
+    if (xen_enabled()) {
+        xenstore_register_nic(conf);
+    }
+
     return nic;
 }
 
@@ -409,6 +420,11 @@ void qemu_del_nic(NICState *nic)
 {
     int i, queues = MAX(nic->conf->peers.queues, 1);
 
+    /* OpenXT: Unregister NICConf/NICInfo from Xenstore. */
+    if (xen_enabled()) {
+        xenstore_unregister_nic(nic->conf);
+    }
+
     qemu_macaddr_set_free(&nic->conf->macaddr);
 
     /* If this is a peer NIC and peer has already been deleted, free it now. */
