################################################################################
SHORT DESCRIPTION: 
################################################################################
Write s3 or s0 state to xenstore for toolstack.

################################################################################
LONG DESCRIPTION: 
################################################################################
Xenvm used to poll xen for acpi state once per second to determine if a domain
went into s3 or s0. The problem is getting acpi state from xen in this way
performs a hypercall, which is expensive. Since QEMU knows when a guest
transitions into s3 or s0, just have it write to the xenstore to signal the 
toolstack, avoiding the need for polling xen.

################################################################################
CHANGELOG 
################################################################################
Chris Rogers <rogersc@ainfosec.com> 11/17/2016 - Updated patch header

################################################################################
REMOVAL 
################################################################################
No plans for removal

################################################################################
UPSTREAM PLAN 
################################################################################
No need to upstream, openxt specific

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None

################################################################################
PATCHES 
################################################################################

Index: qemu-2.6.2/xen-hvm.c
===================================================================
--- qemu-2.6.2.orig/xen-hvm.c
+++ qemu-2.6.2/xen-hvm.c
@@ -177,9 +177,25 @@ void xen_hvm_inject_msi(uint64_t addr, u
     xc_hvm_inject_msi(xen_xc, xen_domid, addr, data);
 }
 
+static void xenstore_write_acpi(struct xs_handle *xs, const char *acpi)
+{
+    char path [50];
+    if (xs == NULL) {
+        fprintf(stderr, "xenstore connection not initialized\n");
+        exit(1);
+    }
+
+    snprintf(path, sizeof(path), "/local/domain/%u/acpi-state", xen_domid);
+    if(!xs_write(xs, XBT_NULL, path, acpi, strlen(acpi))) {
+        fprintf(stderr, "error writing acpi\n");
+        exit(1);
+    }
+}
+
 static void xen_suspend_notifier(Notifier *notifier, void *data)
 {
     xc_set_hvm_param(xen_xc, xen_domid, HVM_PARAM_ACPI_S_STATE, 3);
+    xenstore_write_acpi(xenstore, "s3");
 }
 
 /* Xen Interrupt Controller */
@@ -1232,6 +1248,7 @@ static void xen_read_physmap(XenIOState
 static void xen_wakeup_notifier(Notifier *notifier, void *data)
 {
     xc_set_hvm_param(xen_xc, xen_domid, HVM_PARAM_ACPI_S_STATE, 0);
+    xenstore_write_acpi(xenstore, "s0");
 }
 
 void xen_hvm_init(PCMachineState *pcms, MemoryRegion **ram_memory)
