--------------------------------------------------------------------------------
SHORT DESCRIPTION:
--------------------------------------------------------------------------------
Enable changing of ISO media in stubdom after boot

--------------------------------------------------------------------------------
LONG DESCRIPTION:
--------------------------------------------------------------------------------
In the previous device model (ioemu), media changes for ISO backed CDROMs were
communicated by the toolstack to the ioemu instance via xenstore. This
functionality was lost in the port, as qemu now expects qmp based notification
of ISO media changes. This code reintroduces the xenstore based mechanism for
listening to the toolstack for the stubdomain, and calls the appropriate qmp
code for the change.

For the stubdom case special care has to be taken to ensure that the state
between the blkfront and blkback drivers for the particular drive are correct.
Basically the idea is to not tell qemu about the change until the backend for
the drive gets to state 4.

The non-stubdom case is far simpler than the stubdom one, as only the 'params'
key for the particular blk device is needed. Once it changes, as long as the
file exists, it's fine to tell qemu to do the change.

This patch is also configurable, and can be disabled at compile time. It also
introduces the define CONFIG_STUBDOM so code paths that are specific to the
stubdom device model can coexist with non-stubdom code paths.

--------------------------------------------------------------------------------
CHANGELOG
--------------------------------------------------------------------------------
Intial Commit: Brendan Kerrigan, kerriganb@ainfosec.com, 3/17/2015
Ported to QEMU 2.6.2: Ross Philipson, philipsonr@ainfosec.com, 10/13/2016

--------------------------------------------------------------------------------
REMOVAL
--------------------------------------------------------------------------------
This patch could be removed if a mechanism to bridge qmp commands to the stubdom
is created, and appropriate toolstack changes are made to generate qmp commands
for the ISO change event. While the qemu changes to support this are likely
small, the toolstack changes would be considerable.

10/13/2016:

With the introduction of XL into OpenXT, removing this and using QMP is a much
more attainable goal. See ticket:

https://openxt.atlassian.net/browse/OXT-777

--------------------------------------------------------------------------------
UPSTREAM PLAN
--------------------------------------------------------------------------------
Until the use of Xenstore for communication is moved to qmp, it doesn't make
sense to upstream this. The move to qmp would be more palatable for upstream,
and provide finer grain control over anything the qmp interface exposes.

--------------------------------------------------------------------------------
INTERNAL DEPENDENCIES
--------------------------------------------------------------------------------
0001-generic-xenstore-extensions.patch

Signed-off-by: Brendan Kerrigan <kerriganb@ainfosec.com>
Signed-off-by: Jed Lejosne <lejosnej@ainfosec.com>

Index: qemu-2.6.2/Makefile.target
===================================================================
--- qemu-2.6.2.orig/Makefile.target
+++ qemu-2.6.2/Makefile.target
@@ -147,6 +147,7 @@ obj-$(CONFIG_XEN_I386) += xen-hvm.o xen-
 obj-$(call lnot,$(CONFIG_XEN)) += xen-common-stub.o
 obj-$(call lnot,$(CONFIG_XEN_I386)) += xen-hvm-stub.o
 obj-$(CONFIG_XEN) += xen-dmbus.o
+obj-$(CONFIG_XEN_ISO_CHANGE) += xen-changeiso.o
 
 # Hardware support
 ifeq ($(TARGET_NAME), sparc64)
Index: qemu-2.6.2/blockdev.c
===================================================================
--- qemu-2.6.2.orig/blockdev.c
+++ qemu-2.6.2/blockdev.c
@@ -52,6 +52,7 @@
 #include "sysemu/arch_init.h"
 #include "qemu/cutils.h"
 #include "qemu/help_option.h"
+#include "xen-changeiso.h"
 
 static QTAILQ_HEAD(, BlockDriverState) monitor_bdrv_states =
     QTAILQ_HEAD_INITIALIZER(monitor_bdrv_states);
@@ -1203,6 +1204,16 @@ DriveInfo *drive_new(QemuOpts *all_opts,
         break;
     }
 
+/*
+ * TODO just guessing for now that this is a valid spoto to call out to this
+ * since all the blockdev stuff has changed quite a bit.
+ */
+#ifdef CONFIG_XEN_ISO_CHANGE
+    if(0 > xenstore_register_iso_dev(filename, blk)) {
+        error_report("Failed to register device with xenstore for media changes");
+    }
+#endif
+
 fail:
     qemu_opts_del(legacy_opts);
     QDECREF(bs_opts);
Index: qemu-2.6.2/configure
===================================================================
--- qemu-2.6.2.orig/configure
+++ qemu-2.6.2/configure
@@ -304,6 +304,7 @@ surfman="no"
 stubdom="no"
 atapipt="no"
 atapiptv4v="no"
+oxtiso="no"
 xenpt_hide_msix="yes"
 glusterfs_xlator_opt="no"
 glusterfs_discard="no"
@@ -1109,6 +1110,10 @@ for opt do
   ;;
   --disable-atapi-pt-v4v) atapiptv4v="no"
   ;;
+  --enable-openxt-iso) oxtiso="yes"
+  ;;
+  --disable-openxt-iso) oxtiso="no"
+  ;;
   --disable-archipelago) archipelago="no"
   ;;
   --enable-archipelago) archipelago="yes"
@@ -4925,6 +4930,7 @@ echo "gcov enabled      $gcov"
 echo "OpenXT stubdomain support $stubdom"
 echo "ATAPI PT support  $atapipt"
 echo "ATAPI PT V4V support  $atapiptv4v"
+echo "OpenXT ISO CDROM  $oxtiso"
 echo "Surfman support   $surfman"
 echo "Hide MSI-X cap with Xen PCI pass through $xenpt_hide_msix"
 echo "TPM support       $tpm"
@@ -5482,6 +5488,10 @@ if test "$atapiptv4v" = "yes" ; then
   echo "CONFIG_ATAPI_PT_V4V=y" >> $config_host_mak
 fi
 
+if test "$oxtiso" = "yes" ; then
+  echo "CONFIG_XEN_ISO_CHANGE=y" >> $config_host_mak
+fi
+
 if test "$surfman" = "yes"; then
   echo "CONFIG_SURFMAN=y" >> $config_host_mak
 fi
Index: qemu-2.6.2/xen-hvm.c
===================================================================
--- qemu-2.6.2.orig/xen-hvm.c
+++ qemu-2.6.2/xen-hvm.c
@@ -29,6 +29,10 @@
 #include <xen/hvm/params.h>
 #include <xen/hvm/e820.h>
 
+#ifdef CONFIG_XEN_ISO_CHANGE
+#include "xen-changeiso.h"
+#endif
+
 //#define DEBUG_XEN_HVM
 
 #ifdef DEBUG_XEN_HVM
@@ -1340,6 +1344,12 @@ void xen_hvm_init(PCMachineState *pcms,
     xen_be_register("qdisk", &xen_blkdev_ops);
 #endif
 
+#ifdef CONFIG_XEN_ISO_CHANGE
+    if (0 > xenstore_init_iso_dev()) {
+        fprintf(stderr, "%s: failed to initialize iso media changes, not fatal\n", __FUNCTION__);
+    }
+#endif
+
     xen_read_physmap(state);
     return;
 
Index: qemu-2.6.2/xen-changeiso.c
===================================================================
--- /dev/null
+++ qemu-2.6.2/xen-changeiso.c
@@ -0,0 +1,288 @@
+/*
+ * Copyright (c) 2012 Citrix Systems, Inc.
+ * Copyright (C) 2015 Assured Information Security, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "qemu/osdep.h"
+#include "block/block.h"
+#include "sysemu/blockdev.h"
+#include "sysemu/block-backend.h"
+#include "qemu/timer.h"
+#include "hw/xen/xen_backend.h"
+#include "qmp-commands.h"
+#include "xen-changeiso.h"
+
+static QTAILQ_HEAD(IsoNodeHead, IsoNode) iso_list = QTAILQ_HEAD_INITIALIZER(iso_list);
+
+static void update_iso_cb(void *opaque)
+{
+    struct IsoNode *node = opaque;
+    Error *err = NULL;
+
+    if (!node) {
+        return;
+    }
+
+    // Don't try to do  the change if node->iso_file doesn't exist
+    if (access(node->iso_file, F_OK) != -1) {
+        qmp_blockdev_change_medium(bdrv_get_device_name(blk_bs(node->blk)),
+                                  node->iso_file, false, NULL, false, 0, &err);
+    }
+
+    if (err) {
+        fprintf(stderr, "%s Error: %s", __FUNCTION__, error_get_pretty(err));
+    }
+}
+
+// This is the xenstore watch callback.
+// What we want to do here is pretty different wether we're in a stubdom or not.
+// In the non-stubdom case, we're just watching the xenstore key "params",
+//   which contains the path to the current iso. An empty value means eject.
+// In the stubdom case, we also watch the "params" key, but it can only contain
+//   one of two values: "/dev/xvdc" or "". "" (empty value) means eject.
+//   When the iso changes in dom0, param will switch from "/dev/xvdc" to "" and
+//   back to "/dev/xvdc". We want to reinsert the CD on that last event, but only
+//   once the stubdom is successfully connected to it (state == 4).
+//   So we don't only watch params but also state.
+static void xenstore_update_iso(void *opaque)
+{
+#ifdef CONFIG_STUBDOM
+    char *state = NULL;
+#endif
+    char *newFile = NULL;
+    struct IsoNode *node = opaque;
+    size_t len;
+    char path[XEN_BUFSIZE];
+    Error *err = NULL;
+
+    if(!xenstore || !node)
+        return;
+
+    if(!node->first_watch) {
+        memset(path, 0x00, XEN_BUFSIZE);
+
+        // Read the new params, eject if params == ""
+        snprintf(path, XEN_BUFSIZE, "%s/params", node->xen_vbd_id);
+        newFile = xs_read(xenstore, XBT_NULL, path, &len);
+
+        if (newFile != NULL && *newFile == '\0')
+            qmp_eject(bdrv_get_device_name(blk_bs(node->blk)), true, true, &err);
+
+#ifdef CONFIG_STUBDOM
+        snprintf(path, XEN_BUFSIZE, "%s/state", node->xen_vbd_id);
+        state = xs_read(xenstore, XBT_NULL, path, &len);
+
+        if (!state)
+            return;
+#else
+        // Switch out the file path to the iso, so change gets made
+        // when the node->timer fires.
+        if (newFile) {
+            g_free(node->iso_file);
+            node->iso_file = NULL;
+            node->iso_file = g_strdup(newFile);
+
+            if (!node->iso_file) {
+                free(newFile);
+                return;
+            }
+        }
+#endif
+
+#ifdef CONFIG_STUBDOM
+        // Wait for blkfront<->blkback to get ready before changing
+        // the disk
+        if (!strcmp(state, BLKFRONT_READY_STATE)) {
+            if (node->just_started) {
+                // blkfront just finished setting up /dev/xvdc
+                // doing an eject and re-insert at this point upsets seabios
+                // let's do nothing
+                node->just_started = false;
+            } else {
+#endif
+                // If newFile is "", we already ejected.
+                if (newFile && *newFile != '\0')
+                    timer_mod(node->timer, qemu_clock_get_ms(QEMU_CLOCK_REALTIME) + 1000);
+#ifdef CONFIG_STUBDOM
+            }
+        }
+
+        if(state) {
+            free(state);
+            state = NULL;
+        }
+#endif
+        if(newFile) {
+            free(newFile);
+            newFile = NULL;
+        }
+    } else {
+        node->first_watch = false;
+    }
+}
+
+/*
+
+*/
+int xenstore_register_iso_dev(const char *file, BlockBackend *blk)
+{
+    struct IsoNode *node = NULL;
+
+    if (!file || !blk) {
+        fprintf(stderr, "Failed to register iso device due to incorrect parameters");
+        return -EINVAL;
+    }
+
+    node = g_malloc0(sizeof(*node));
+
+    if (!node) {
+        return -ENOMEM;
+    }
+
+    /*
+       We can't do our Xen business just yet, because hvm init domain hasn't
+       been called yet. So we have to save any information needed for registering
+       until later.
+    */
+
+    node->iso_file = g_strdup(file);
+    node->blk = blk;
+    node->xen_vbd_id = NULL;
+    node->frontend_state = NULL;
+    node->just_started = true;
+    node->first_watch = true;
+    node->timer = timer_new_ms(QEMU_CLOCK_REALTIME, update_iso_cb, node);
+
+    if (!node->iso_file || !node->timer) {
+        g_free(node);
+        return -ENOMEM;
+    }
+
+    QTAILQ_INSERT_TAIL(&iso_list, node, next);
+
+    return 0;
+}
+
+int xenstore_init_iso_dev(void)
+{
+    unsigned int dirNum = 0, i = 0;
+    char *dompath = NULL;
+    char **vbd_devs = NULL;
+    char path[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+
+    memset(path, 0x00, XEN_BUFSIZE);
+    memset(token, 0x00, XEN_BUFSIZE);
+
+    if (0 > xenstore_generic_init()) {
+        return -ENOENT;
+    }
+
+    // Stubdom domid is xen_domid+1
+#ifdef CONFIG_STUBDOM
+    dompath = xs_get_domain_path(xenstore, STUBDOMID(xen_domid));
+#else
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+#endif
+
+    if (!dompath) {
+        fprintf(stderr, "%s: Failed to retrieve dompath", __FUNCTION__);
+        return -1;
+    }
+
+    snprintf(path, XEN_BUFSIZE, "%s/device/vbd", dompath);
+
+    // Find the virtual-device id that blkfront is using for this device
+    vbd_devs = xs_directory(xenstore, XBT_NULL, path, &dirNum);
+
+    if (!vbd_devs) {
+        return -1;
+    }
+
+    for (i = 0; i < dirNum; i++) {
+
+        if (!vbd_devs[i]) {
+            continue;
+        }
+
+        // Build paths to get necessary information from Xenstore
+        // Check the device type as CDROM, and get the backend path
+        memset(path, 0x00, XEN_BUFSIZE);
+        snprintf(path, XEN_BUFSIZE, "%s/device/vbd/%s", dompath, vbd_devs[i]);
+        char *dev_type = xenstore_read_str(path, "device-type");
+        char *be = xenstore_read_str(path, "backend");
+
+        if (dev_type && be && !strcmp(dev_type, "cdrom")) {
+            // We need to watch the backend for this device now.
+            char *params = xenstore_read_str(be, "params");
+            struct IsoNode *node;
+
+            QTAILQ_FOREACH(node, &iso_list, next) {
+                if (node && params &&
+                    node->xen_vbd_id == NULL &&
+                    node->frontend_state == NULL) {
+                    // For mapping a fired watch to a specific device later
+                    node->xen_vbd_id = strdup(be);
+
+                    // Before the guest disk change can occur, make sure the state
+                    // of the specified blkfront device is ready
+                    memset(path, 0x00, XEN_BUFSIZE);
+                    snprintf(path, XEN_BUFSIZE, "%s/device/vbd/%s/state", dompath, vbd_devs[i]);
+                    node->frontend_state = strdup(path);
+                    break;
+                }
+            }
+
+            if (xenstore_add_watch(be, "params", xenstore_update_iso, (void *) node) != 0) {
+                fprintf(stderr, "[OXT-ISO] Failed to install xenstore watch on path: %s/params", be);
+            }
+
+#ifdef CONFIG_STUBDOM
+            if (xenstore_add_watch(be, "state", xenstore_update_iso, (void *) node) != 0) {
+                fprintf(stderr, "[OXT-ISO] Failed to install xenstore watch on path: %s/state", be);
+            }
+#endif
+
+            if (be) {
+                free(be);
+                be = NULL;
+            }
+
+            if (dev_type) {
+                free(dev_type);
+                dev_type = NULL;
+            }
+
+            if (params) {
+                free(params);
+                params = NULL;
+            }
+        }
+    }
+
+    if (dompath) {
+        free(dompath);
+        dompath = NULL;
+    }
+
+    if (vbd_devs) {
+        free(vbd_devs);
+        vbd_devs = NULL;
+    }
+
+    return 0;
+}
Index: qemu-2.6.2/xen-changeiso.h
===================================================================
--- /dev/null
+++ qemu-2.6.2/xen-changeiso.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2012 Citrix Systems, Inc.
+ * Copyright (C) 2015 Assured Information Security, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef XEN_CHANGEISO__H
+#define XEN_CHANGEISO__H
+
+/* OpenXT CD-ROM ISO Change
+ * Xenstore mechanism for informing a guest about changes in the media
+ * of a ISO backed CD-ROM drive within OpenXT
+ */
+
+#define BLKFRONT_READY_STATE "4"
+#define STUBDOMID(x) (x+1)
+
+struct IsoNode {
+    BlockBackend *blk;
+    char *iso_file;
+    char *xen_vbd_id;
+    char *frontend_state;
+    bool just_started;
+    bool first_watch;
+    QEMUTimer *timer;
+    QTAILQ_ENTRY(IsoNode) next;
+};
+
+int xenstore_register_iso_dev(const char *file, BlockBackend *blk);
+int xenstore_init_iso_dev(void);
+
+#endif
