--------------------------------------------------------------------------------
SHORT DESCRIPTION:
--------------------------------------------------------------------------------

Provide common xenstore functionality not currently available in the 
xen_backend module.

--------------------------------------------------------------------------------
LONG DESCRIPTION:
--------------------------------------------------------------------------------

Adds the following functions:

- xenstore_generic_init(): callers may use general xenstore functions after
  calling this to ensure xenstore handle is open beforehand.

- xenstore_rm(): adds ability to rm xenstore key.

- xenstore_add_watch(): provides ability to register a xenstore watch callback 
  with an optional pointer.

- xenstore_remove_watch(): remove a xenstore watch callback previously
  registered with xenstore_add_watch().

- xenstore_vm_base_path(): return xenstore /vm/<uuid> path

--------------------------------------------------------------------------------
UPSTREAM PLAN
--------------------------------------------------------------------------------

Unlikely to upstream without the upstream qemu having similar requirements.

--------------------------------------------------------------------------------
DEPENDENCIES
--------------------------------------------------------------------------------

None.

--------------------------------------------------------------------------------
CHANGELOG
--------------------------------------------------------------------------------

Chris Patterson, <pattersonc@ainfosec.com>, 06/09/2015
- Added xenstore_vm_base_path()

Eric Chanudet, <chanudete@ainfosec.com>, 04/18/2015
- Added xenstore_remove_watch()

Chris Patterson, <pattersonc@ainfosec.com>, 02/15/2015
- Added xenstore_add_watch()

Chris Patterson, <pattersonc@ainfosec.com>, 03/31/2015
- Added xenstore_generic_init()
- Added xenstore_rm()
- Renamed patch.

Ross Philipson, philipsonr@ainfosec.com, 10/13/2016
- Ported to 2.6.2

Jason Andryuk, jandryuk@gmail.com, 06/19/2018
- Port to 2.12
---
 hw/xen_backend.c |   18 ++++++++++++++++++
 hw/xen_backend.h |    4 ++++
 2 files changed, 22 insertions(+)

--- a/hw/xen/xen_backend.c
+++ b/hw/xen/xen_backend.c
@@ -33,6 +33,7 @@
 #include "hw/xen/xen_backend.h"
 #include "hw/xen/xen_pvdev.h"
 #include "monitor/qdev.h"
+#include "qapi/qapi-commands.h"
 
 #include <xen/grant_table.h>
 
@@ -668,13 +669,18 @@ void xenstore_update_fe(char *watch, str
     xen_be_frontend_changed(xendev, node);
     xen_be_check_state(xendev);
 }
+
 /* -------------------------------------------------------------------- */
 
 int xen_be_init(void)
 {
     xengnttab_handle *gnttabdev;
 
-    xenstore = xs_daemon_open();
+    /* xenstore_generic_init() may have already opened xenstore */
+    if (!xenstore) {
+        xenstore = xs_daemon_open();
+    }
+
     if (!xenstore) {
         xen_pv_printf(NULL, 0, "can't connect to xenstored\n");
         return -1;
@@ -843,3 +849,109 @@ static void xenbe_register_types(void)
 }
 
 type_init(xenbe_register_types)
+
+/**
+ * Retrieve /vm/<uuid> path from /local/domain/<domid>/vm
+ * @returns path string on success (don't forget to g_free()!), NULL otherwise.
+ */
+char *xenstore_vm_base_path(void)
+{
+    char domstr[64];
+    char *vmstr;
+
+    snprintf(domstr, sizeof(domstr), "/local/domain/%d", xen_domid);
+
+    vmstr = xenstore_read_str(domstr, "vm");
+    if (!vmstr) {
+        fprintf(stderr, "xenstore_vm_base_path failed to read vm key\n");
+        return NULL;
+    }
+
+    //fprintf(stderr, "xenstore_vm_base_path read vm string = %s\n", vmstr);
+    return vmstr;
+}
+
+/**
+ * Removes specific xenstore key (base/node)
+ * @returns 0 on success, -1 otherwise.
+ */
+int xenstore_rm(const char *base, const char *node)
+{
+    char abspath[XEN_BUFSIZE];
+
+    snprintf(abspath, sizeof(abspath), "%s/%s", base, node);
+    if (!xs_rm(xenstore, 0, abspath)) {
+        return -1;
+    }
+    return 0;
+}
+
+/**
+ * Registers a xenstore watch for specificed callback and optional pointer.
+ * @returns 0 on success, -1 otherwise.
+ */
+int xenstore_add_watch(const char *base, const char *node,
+                        xenstore_watch_cb_t cb, void *opaque)
+{
+    char abspath[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+
+    snprintf(abspath, sizeof(abspath), "%s/%s", base, node);
+    xen_pv_printf(NULL, 1, "xenstore_add_watch: %s\n", abspath);
+
+    /* xs_watch copies this token and xenstore_update() parses it on event */
+    snprintf(token, sizeof(token), "cb:%p:%p", cb, opaque);
+    xen_pv_printf(NULL, 1, "xenstore_add_watch: %s - %s\n", abspath, token);
+
+    if (!xs_watch(xenstore, abspath, token)) {
+         xen_pv_printf(NULL, 1, "xenstore_add_watch: failed watch for %s\n",
+                       abspath);
+        return -1;
+    }
+
+    return 0;
+}
+
+/**
+ * Un-register an existing xenstore node using the specified callback and opaque pointer.
+ * @returns 0 on success, -1 otherwise.
+ */
+int xenstore_remove_watch(const char *base, const char *node,
+                          xenstore_watch_cb_t cb, void *opaque)
+{
+    char abspath[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+
+    snprintf(abspath, sizeof (abspath), "%s/%s", base, node);
+    xen_pv_printf(NULL, 1, "xenstore_remove_watch: %s\n", abspath);
+
+    /* For some reason, xs_unwatch will check the token... */
+    snprintf(token, sizeof(token), "cb:%p:%p", cb, opaque);
+    xen_pv_printf(NULL, 1, "xenstore_remove_watch: %s - %s\n", abspath, token);
+
+    if (!xs_unwatch(xenstore, abspath, token)) {
+         xen_pv_printf(NULL, 1, "xenstore_remove_watch: failed to remove watch for %s\n",
+                       abspath);
+        return -1;
+    }
+
+    return 0;
+}
+
+/**
+ * Open xenstore to support basic xenstore ops before xen_be_init() is invoked.
+ * @returns 0 on success, -1 otherwise.
+ */
+int xenstore_generic_init(void)
+{
+    if (!xenstore) {
+        xen_pv_printf(NULL, 1, "xenstore_basic_init: opening xenstore\n");
+        xenstore = xs_daemon_open();
+        if (!xenstore) {
+            xen_pv_printf(NULL, 0, "xenstore_basic_init: failed to open xs\n");
+            return -1;
+        }
+    }
+
+    return 0;
+}
--- a/hw/xen/xen_pvdev.c
+++ b/hw/xen/xen_pvdev.c
@@ -169,6 +169,12 @@ void xenstore_update(void *unused)
     if (sscanf(vec[XS_WATCH_TOKEN], "fe:%" PRIxPTR, &ptr) == 1) {
         xenstore_update_fe(vec[XS_WATCH_PATH], (void *)ptr);
     }
+    if (sscanf(vec[XS_WATCH_TOKEN], "cb:%" PRIxPTR ":%" PRIxPTR,
+               &ptr, &ops) == 2) {
+        if (ptr) {
+            ((xenstore_watch_cb_t)ptr)((void *)ops);
+        }
+    }
 
 cleanup:
     free(vec);
--- a/include/hw/xen/xen_backend.h
+++ b/include/hw/xen/xen_backend.h
@@ -96,4 +96,14 @@ int xen_config_dev_vfb(int vdev, const c
 int xen_config_dev_vkbd(int vdev);
 int xen_config_dev_console(int vdev);
 
+/* generic xenstore extensions */
+int xenstore_generic_init(void);
+char *xenstore_vm_base_path(void);
+int xenstore_rm(const char *base, const char *node);
+typedef void (*xenstore_watch_cb_t)(void*);
+int xenstore_add_watch(const char *base, const char *node,
+                       xenstore_watch_cb_t cb, void *opaque);
+int xenstore_remove_watch(const char *base, const char *node,
+                          xenstore_watch_cb_t cb, void *opaque);
+
 #endif /* QEMU_HW_XEN_BACKEND_H */
