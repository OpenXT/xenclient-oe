################################################################################
SHORT DESCRIPTION: 
################################################################################
TBOOT must measure all command line arguments (CVE-2014-5118)

################################################################################
LONG DESCRIPTION: 
################################################################################
TBOOT skips the first command line argument because the GRUB bootloader used
to pass the module name as the first argument. It is not clear why this has to
be done. GRUB2 stopped doing this but TBOOT was still skipping the first
argument if it thinks it is a file name. This could allow someone to more or
less place any first argument and TBOOT would not measure it. This fix just
lets TBOOT measure the whole command line, whatever the bootloader passes in.
This seems the simplest, easiest and most correct way to do it.

The patch also removes the upstream fix which is a bunch of code that tries to
sort out the version of GRUB and make decisions about what to skip or not. This
does not seem like a good solution.

Finally note that TBOOT uses the skip_filename in other places like when it is
setting up the boot params for the next module. This means OpenXT cannot drop
the FIXME args in grub.cfg unless this is addressed too.

################################################################################
CHANGELOG 
################################################################################
Original:
JP Blake's patch to address CVE-2014-5118.
Reported-by: James Blake <blakej@ainfosec.com>
Signed-off-by: James Blake <blakej@ainfosec.com>
Signed-off-by: Chris Patterson <pattersonc@ainfosec.com>

Ported and removed upstream "fix":
Ross Philipson, philipsonr@ainfosec.com, 8/27/2015

################################################################################
REMOVAL 
################################################################################

################################################################################
UPSTREAM PLAN 
################################################################################
Upstream-status: This patch was submitted upstream, but tboot took a different
approach to fixing it.  However, their fix is currently incomplete:
http://sourceforge.net/p/tboot/mailman/message/32760688/

This patch also removes that fix. There is an effort to get this fixed properly
upstream that is ongoing. See:

http://sourceforge.net/p/tboot/mailman/message/32760688/
http://sourceforge.net/p/tboot/mailman/message/34369569/

https://openxt.atlassian.net/browse/OXT-364

Update 9/15/2015:

Our preferred fix was finally accepted and pushed into TBOOT upstream. The
relevant change sets are here:

http://hg.code.sf.net/p/tboot/code/rev/664e696da669
http://hg.code.sf.net/p/tboot/code/rev/848361645fd2

This patch can be dropped in a move to 1.8.4+

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None

################################################################################
PATCHES 
################################################################################
Index: tboot-1.8.3/tboot/common/loader.c
===================================================================
--- tboot-1.8.3.orig/tboot/common/loader.c	2015-08-27 15:00:22.228532237 -0400
+++ tboot-1.8.3/tboot/common/loader.c	2015-08-27 15:09:07.467391283 -0400
@@ -54,7 +54,6 @@
 #include <txt/txt.h>
 #include <mle.h>
 #include <txt/acmod.h>
-#include <cmdline.h>
 
 /* copy of kernel/VMM command line so that can append 'tboot=0x1234' */
 static char *new_cmdline = (char *)TBOOT_KERNEL_CMDLINE_ADDR;
@@ -956,39 +955,6 @@
     }
 }
 
-static const char *get_boot_loader_name(loader_ctx *lctx)
-{
-    if (LOADER_CTX_BAD(lctx))
-        return NULL;
-    if (lctx->type == MB1_ONLY ){
-        if (((multiboot_info_t *)lctx->addr)->flags & MBI_BTLDNAME)
-            return (char *)((multiboot_info_t *)lctx->addr)->boot_loader_name;
-        return NULL;
-    }
-
-    /* currently must be type 2 */
-    struct mb2_tag *start = (struct mb2_tag *)(lctx->addr + 8);
-    start = find_mb2_tag_type(start, MB2_TAG_TYPE_LOADER_NAME);
-    if (start)
-        return &((struct mb2_tag_string *)start)->string[0];
-
-    return NULL;
-}
-
-static void remove_filename_from_modules_cmdline(loader_ctx *lctx)
-{
-    if (LOADER_CTX_BAD(lctx))
-        return;
-
-    for ( unsigned int i = 0; i < get_module_count(lctx); i++ ) {
-        module_t *m = get_module(lctx, i);
-        char *cmdline = get_module_cmd(lctx, m);
-        const char *adjusted_cmdline = skip_filename(cmdline);
-        if ( adjusted_cmdline != NULL && cmdline != adjusted_cmdline )
-            strncpy(cmdline, adjusted_cmdline, strlen(cmdline));
-    }
-}
-
 static 
 void *remove_first_module(loader_ctx *lctx)
 {
@@ -1279,14 +1245,6 @@
         
         /* fix for GRUB2, which may load modules into memory before tboot */
         move_modules(g_ldr_ctx);
-
-        /* for GRUB 2, remove the filename in mods' cmdline */
-        const char *loader_name = get_boot_loader_name(g_ldr_ctx);
-        if ( loader_name != NULL &&
-             !strncmp(loader_name, "GNU GRUB", 8) &&
-             strncmp(loader_name, "GNU GRUB 0", 10) )
-            remove_filename_from_modules_cmdline(g_ldr_ctx);
-
     }
     else {
         printk(TBOOT_INFO"assuming kernel is Linux format\n");
Index: tboot-1.8.3/tboot/common/policy.c
===================================================================
--- tboot-1.8.3.orig/tboot/common/policy.c	2015-08-27 15:00:16.924532239 -0400
+++ tboot-1.8.3/tboot/common/policy.c	2015-08-27 15:07:24.607382358 -0400
@@ -424,8 +424,6 @@
     /* hash command line */
     if ( cmdline == NULL )
         cmdline = "";
-    else
-        cmdline = skip_filename(cmdline);
 
     switch (g_tpm->extpol) {
     case TB_EXTPOL_FIXED: 
