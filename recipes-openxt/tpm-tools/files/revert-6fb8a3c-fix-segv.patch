Commit 6fb8a3c will trigger a fault:
EVP_EncryptInit(ctx==NULL)
 EVP_CipherInit(ctx==NULL)
  EVP_CIPHER_CTX_init(ctx==NULL)
   memset(NULL...) // FAULT

... which will surface in tpm_sealdata -z when tpm-setup.

Following call path in OpenSSL 1.1.0 would return an error as well:
EVP_EncryptInit(ctx==NULL)
 EVP_CipherInit(ctx==NULL)
  EVP_CIPHER_CTX_reset(c==NULL)
   if (c == NULL) return 1;
  EVP_CipherInit_ex(ctx==NULL) // FAULT

REVERT:
commit 6fb8a3c5ad3bc6e62f6895a4fcf3540faa29b4f2
Author: Hon Ching (Vicky) Lo <honclo@linux.vnet.ibm.com>
Date:   Thu Nov 17 16:08:24 2016 -0500

    Support OpenSSL 1.1.0

--- a/lib/tpm_unseal.c
+++ b/lib/tpm_unseal.c
@@ -408,8 +408,8 @@ int tpmUnsealFile( char* fname, unsigned
 	}
 
 	/* Decode and decrypt the encrypted data */
-	EVP_CIPHER_CTX *ctx = NULL;
-	EVP_DecryptInit(ctx, EVP_aes_256_cbc(), symKey, (unsigned char *)TPMSEAL_IV);
+	EVP_CIPHER_CTX ctx;
+	EVP_DecryptInit(&ctx, EVP_aes_256_cbc(), symKey, (unsigned char *)TPMSEAL_IV);
 
 	/* Create a base64 BIO to decode the encrypted data */
 	if ((b64 = BIO_new(BIO_f_base64())) == NULL) {
@@ -420,11 +420,11 @@ int tpmUnsealFile( char* fname, unsigned
 
 	bmem = BIO_push( b64, bmem );
 	while ((rcLen = BIO_read(bmem, data, sizeof(data))) > 0) {
-		EVP_DecryptUpdate(ctx, res_data+res_size,
+		EVP_DecryptUpdate(&ctx, res_data+res_size,
 					&rcLen, (unsigned char *)data, rcLen);
 		res_size += rcLen;
 	}
-	EVP_DecryptFinal(ctx, res_data+res_size, &rcLen);
+	EVP_DecryptFinal(&ctx, res_data+res_size, &rcLen);
 	res_size += rcLen;
 	bmem = BIO_pop(b64);
 	BIO_free(b64);
--- a/src/cmds/tpm_sealdata.c
+++ b/src/cmds/tpm_sealdata.c
@@ -375,16 +375,16 @@ int main(int argc, char **argv)
 	BIO_puts(bdata, TPMSEAL_ENC_STRING); 
 	bdata = BIO_push(b64, bdata);
 
-	EVP_CIPHER_CTX *ctx = NULL;
-	EVP_EncryptInit(ctx, EVP_aes_256_cbc(), randKey, (unsigned char *)TPMSEAL_IV);
+	EVP_CIPHER_CTX ctx;
+	EVP_EncryptInit(&ctx, EVP_aes_256_cbc(), randKey, (unsigned char *)TPMSEAL_IV);
 
 	while ((lineLen = BIO_read(bin, line, sizeof(line))) > 0) {
-		EVP_EncryptUpdate(ctx, encData, &encDataLen,
+		EVP_EncryptUpdate(&ctx, encData, &encDataLen,
 				  line, lineLen);
 		BIO_write(bdata, encData, encDataLen);
 	}
 
-	EVP_EncryptFinal(ctx, encData, &encDataLen);
+	EVP_EncryptFinal(&ctx, encData, &encDataLen);
 	BIO_write(bdata, encData, encDataLen);
 	if (BIO_flush(bdata) != 1) {
 		logError(_("Unable to flush output\n"));
