Index: tpm-tools-1.3.1/src/cmds/Makefile.am
===================================================================
--- tpm-tools-1.3.1.orig/src/cmds/Makefile.am	2010-03-17 20:56:52.000000000 +0000
+++ tpm-tools-1.3.1/src/cmds/Makefile.am	2010-03-17 21:36:03.000000000 +0000
@@ -21,7 +21,7 @@
 #       http://www.opensource.org/licenses/cpl1.0.php.
 #
 
-bin_PROGRAMS 	=	tpm_sealdata tpm_extendpcr
+bin_PROGRAMS 	=	tpm_sealdata tpm_unsealdata tpm_extendpcr
 
 if TSS_LIB_IS_12
 AM_CPPFLAGS	=	-I$(top_builddir)/include -D_LINUX -DTSS_LIB_IS_12
@@ -32,4 +32,6 @@
 LDADD		=	$(top_builddir)/lib/libtpm_tspi.la -ltspi
 
 tpm_sealdata_SOURCES = tpm_sealdata.c
+tpm_unsealdata_SOURCES = tpm_unsealdata.c
+tpm_unsealdata_LDADD = $(LDADD) $(top_builddir)/lib/libtpm_unseal.la
 tpm_extendpcr_SOURCES = tpm_extendpcr.c
Index: tpm-tools-1.3.1/src/cmds/tpm_unsealdata.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ tpm-tools-1.3.1/src/cmds/tpm_unsealdata.c	2010-03-17 21:38:04.000000000 +0000
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2010 Citrix Systems, Inc.
+ *
+ * The Initial Developer of the Original Code is International
+ * Business Machines Corporation. Portions created by IBM
+ * Corporation are Copyright (C) 2005, 2006 International Business
+ * Machines Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the Common Public License as published by
+ * IBM Corporation; either version 1 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * Common Public License for more details.
+ *
+ * You should have received a copy of the Common Public License
+ * along with this program; if not, a copy can be viewed at
+ * http://www.opensource.org/licenses/cpl1.0.php.
+ */
+#include <openssl/evp.h>
+#include <limits.h>
+#include "tpm_tspi.h"
+#include "tpm_utils.h"
+#include "tpm_unseal.h"
+
+static void help(const char *aCmd)
+{
+	logCmdHelp(aCmd);
+	logCmdOption("-i, --infile FILE",
+		     _
+		     ("Filename containing key to seal. Default is STDIN."));
+	logCmdOption("-o, --outfile FILE",
+		     _
+		     ("Filename to write sealed key to.  Default is STDOUT."));
+	logCmdOption("-z, --well-known", _("Use TSS_WELL_KNOWN_SECRET as the SRK secret."));
+	logCmdOption("-u, --unicode", _("Use TSS UNICODE encoding for the SRK password to comply with applications using TSS popup boxes"));
+
+}
+
+static char in_filename[PATH_MAX] = "", out_filename[PATH_MAX] = "";
+static BOOL passUnicode = FALSE;
+static BOOL isWellKnown = FALSE;
+TSS_HCONTEXT hContext = 0;
+
+static int parse(const int aOpt, const char *aArg)
+{
+	int rc = -1;
+
+	switch (aOpt) {
+	case 'i':
+		if (aArg) {
+			strncpy(in_filename, aArg, PATH_MAX);
+			rc = 0;
+		}
+		break;
+	case 'o':
+		if (aArg) {
+			strncpy(out_filename, aArg, PATH_MAX);
+			rc = 0;
+		}
+		break;
+	case 'u':
+		passUnicode = TRUE;
+		rc = 0;
+		break;
+	case 'z':
+		isWellKnown = TRUE;
+		rc = 0;
+		break;
+	default:
+		break;
+	}
+	return rc;
+
+}
+
+int main(int argc, char **argv)
+{
+
+	int iRc = -1;
+	struct option opts[] =
+	    { {"infile", required_argument, NULL, 'i'},
+	{"outfile", required_argument, NULL, 'o'},
+	{"unicode", no_argument, NULL, 'u'},
+	{"well-known", no_argument, NULL, 'z'}
+	};
+
+	BIO *bdata=NULL;
+	unsigned char *data;
+	int size;
+
+	initIntlSys();
+
+	if (genericOptHandler(argc, argv, "i:o:uz", opts,
+			      sizeof(opts) / sizeof(struct option), parse,
+			      help) != 0)
+		goto out;
+
+	if (tpmUnsealFile(in_filename, &data, &size)) {
+		logError(_("unseal failed\n"));
+		goto out;
+	}
+
+	/* Create a BIO for the output file */
+	if ((bdata = BIO_new(BIO_s_file())) == NULL) {
+		logError(_("Unable to open output BIO\n"));
+		goto out;
+	}
+
+	/* Assign the output file to the BIO */
+	if (strlen(out_filename) == 0)
+		BIO_set_fp(bdata, stdout, BIO_NOCLOSE);
+	else if (BIO_write_filename(bdata, out_filename) <= 0) {
+		logError(_("Unable to open output file: %s\n"),
+			 out_filename);
+		goto out;
+	}
+
+	/* Output the unsealed data */
+	BIO_write(bdata, data, size);
+	if (BIO_flush(bdata) != 1) {
+		logError(_("Unable to flush output\n"));
+		goto out;
+	}
+	
+	iRc = 0;
+	logSuccess(argv[0]);
+
+out:
+	if (bdata)
+		BIO_free(bdata);
+	return iRc;
+}
Index: tpm-tools-1.3.1/lib/tpm_unseal.c
===================================================================
--- tpm-tools-1.3.1.orig/lib/tpm_unseal.c	2010-03-17 21:26:07.000000000 +0000
+++ tpm-tools-1.3.1/lib/tpm_unseal.c	2010-03-17 21:30:17.000000000 +0000
@@ -332,11 +332,21 @@
 		goto tss_out;
 	}
 
+#if 0
 	if ((rc=Tspi_Policy_SetSecret(hPolicy, TSS_SECRET_MODE_PLAIN, 0, NULL)) 
 					!= TSS_SUCCESS) {
 		tpm_errno = ETSPIPOLSS;
 		goto tss_out;
 	}
+#else
+	BYTE wellKnown[TCPA_SHA1_160_HASH_LEN] = TSS_WELL_KNOWN_SECRET;
+
+	if ((rc=Tspi_Policy_SetSecret(hPolicy, TSS_SECRET_MODE_SHA1, sizeof(wellKnown), wellKnown))
+					!= TSS_SUCCESS) {
+		tpm_errno = ETSPIPOLSS;
+		goto tss_out;
+	}
+#endif
 
 	/* Failure point if trying to unseal data on a differnt TPM */
 	if ((rc=Tspi_Context_LoadKeyByBlob(hContext, hSrk, tssLen, 
