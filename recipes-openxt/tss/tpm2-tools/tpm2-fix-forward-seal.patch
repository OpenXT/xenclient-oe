--- a/lib/pcr.c
+++ b/lib/pcr.c
@@ -61,20 +61,25 @@ static int pcr_parse_selection(const cha
     return 0;
 }
 
-int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash)
+int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash, bool *hash_set)
 {
     char * pstr;
     UINT16 length;
     int ret = 0;
-    if (strchr(arg, ':')) {
+
+    *hash_set = (strchr(arg, ':') != NULL);
+    if (*hash_set) {
         //read forward hash and convert to hex to byte
         pstr = strtok(arg, ":");
-        if (pstr)
+        if (pstr){
             ret = pcr_get_id(pstr, pcrId);
+        }
 
-        pstr = strtok(arg, ":");
-        if (pstr)
+        pstr = strtok(NULL, ":");
+        if (pstr) {
+            length = sizeof(BYTE)*32;
             hex2ByteStructure(pstr, &length, forwardHash);
+        }
     } else {
         ret = pcr_get_id(arg, pcrId);
     }
--- a/tools/tpm2_sealdata.c
+++ b/tools/tpm2_sealdata.c
@@ -102,6 +102,7 @@ execute_tool(int                 argc,
     UINT32 objectAttributes = 0;
     char opuFilePath[PATH_MAX] = {0};
     char oprFilePath[PATH_MAX] = {0};
+    bool hash_set = false;
 
     UINT32 pcr = -1;
     INT32 pcrCount = 0;
@@ -214,7 +215,7 @@ execute_tool(int                 argc,
             H_flag = 1;
             break;
         case 'r':
-            if ( pcr_parse_arg(optarg, &pcr, forwardHash) )
+            if ( pcr_parse_arg(optarg, &pcr, forwardHash, &hash_set) )
             {
                 printf("Invalid pcr value.\n");
                 returnVal = -10;
@@ -223,6 +224,7 @@ execute_tool(int                 argc,
             r_flag = 1;
             pcr_struct *new_pcr = (pcr_struct *) malloc(sizeof(pcr_struct));
             new_pcr->pcr = pcr;
+            new_pcr->hash_set = hash_set;
             memcpy(new_pcr->forwardHash, forwardHash, 32);
             memset(forwardHash, 0, 32);
             pcrList[pcrCount] = new_pcr;
--- a/lib/pcr.h
+++ b/lib/pcr.h
@@ -2,15 +2,17 @@
 #define SRC_PCR_H_
 
 #include <sapi/tpm20.h>
+#include <stdbool.h>
 
 int pcr_get_id(const char *arg, UINT32 *pcrId);
 int pcr_parse_selections(const char *arg, TPML_PCR_SELECTION *pcrSels);
 int pcr_parse_list(const char *str, int len, TPMS_PCR_SELECTION *pcrSel);
-int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash);
+int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash, bool *hash_set);
 
 typedef struct pcr_struct {
 	UINT32 pcr;
 	BYTE forwardHash[32];
+	bool hash_set;
 } pcr_struct;
 
 #define SET_PCR_SELECT_BIT( pcrSelection, pcr ) \
--- a/tools/tpm2_unsealdata.c
+++ b/tools/tpm2_unsealdata.c
@@ -201,7 +201,7 @@ execute_tool(int               argc,
     UINT32 pcr = -1;
     INT32 pcrCount = 0;
     pcr_struct * pcrList[24];
-    BYTE forwardHash[32] = {0};
+    bool hash_set = false;
 
     setbuf(stdout, NULL);
     setvbuf (stdout, NULL, _IONBF, BUFSIZ);
@@ -280,7 +280,7 @@ execute_tool(int               argc,
             g_flag = 1;
             break;
         case 'r':
-            if (pcr_parse_arg(optarg, &pcr, forwardHash))
+            if (pcr_parse_arg(optarg, &pcr, NULL, &hash_set))
             {
                 printf("Invalid pcr value.\n");
                 returnVal = -10;
@@ -289,8 +289,7 @@ execute_tool(int               argc,
             r_flag = 1;
             pcr_struct *new_pcr = (pcr_struct *) malloc(sizeof(pcr_struct));
             new_pcr->pcr = pcr;
-            memcpy(new_pcr->forwardHash, forwardHash, 32);
-            memset(forwardHash, 0, 32);
+            new_pcr->hash_set = false;
             pcrList[pcrCount] = new_pcr;
             pcrCount++;
             break;
--- a/lib/build-policy.c
+++ b/lib/build-policy.c
@@ -29,7 +29,6 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
     UINT32 pcrUpdateCounter;
 
     TPM_RC rval = TPM_RC_SUCCESS;
-    char empty[32] = {0};
     zero_pcr_selection(&pcrs, nameAlg);
 
     //Init the pcr selection we will use for the PCRPolicy call
@@ -39,7 +38,7 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
     for(int i = 0; i < pcrCountIn; i++)
     {
         //No forward hash provided, need to read this pcr
-        if(!memcmp(pcrList[i]->forwardHash, empty, 32)) {
+        if(!pcrList[i]->hash_set) {
             zero_pcr_selection(&pcrsTmp, nameAlg);
             SET_PCR_SELECT_BIT(pcrsTmp.pcrSelections[0], pcrList[i]->pcr);
             memset(&tmpPcrValues, 0, sizeof(TPML_DIGEST));
@@ -51,6 +50,7 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
             memcpy(pcrValues[i].t.buffer, tmpPcrValues.digests[0].t.buffer, tmpPcrValues.digests[0].t.size);
         } else {
             //Forward hash provided, copy into digest buffer
+            pcrValues[i].t.size = sizeof(pcrList[i]->forwardHash);
             memcpy(pcrValues[i].t.buffer, pcrList[i]->forwardHash, sizeof(pcrList[i]->forwardHash));
         }
     }
