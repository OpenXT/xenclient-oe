################################################################################
SHORT DESCRIPTION:
################################################################################
Add tpm2_sealdata binary.

################################################################################
LONG DESCRIPTION:
################################################################################
Add tpm2_sealdata binary and convert tpm2_create from a commandline binary
to a library. The latter was necessary as each tool is a standalone
binary that cannot be used by other tools, and tpm2_sealdata needs
tpm2_create's functionality.

Note that this patch absorbed the tools/tpm2_sealdata.c and lib/build-policy.c
changes from the old tpm2-fix-forward-seal.patch.

################################################################################
CHANGELOG
################################################################################
Add tpm2_sealdata: Chris Rogers <rogersc@ainfosec.com>
Uprev from v2.0.0 to v3.1.3: Nicholas Tsirakis <tsirakisn@ainfosec.com>

################################################################################
REMOVAL
################################################################################

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################

commit 931fd721177789154b128d9d1f16854d1a919a6b
Author: Nicholas Tsirakis <tsirakisn@ainfosec.com>
Date:   Tue May 22 16:18:54 2018 -0400

    Apply tpm2-sealing-support patch

--- a/lib/build-policy.c
+++ b/lib/build-policy.c
@@ -4,7 +4,7 @@
 #include <string.h>
 #include "tpm_session.h"
 #include "tpm_hash.h"
-#include "string-bytes.h"
+#include "tpm2_util.h"
 #include "pcr.h"
 
 #define INIT_SIMPLE_TPM2B_SIZE( type ) (type).size = sizeof( type ) - 2;
@@ -25,12 +25,11 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
 {
     TPM2B_DIGEST pcrDigest;
     TPML_DIGEST tmpPcrValues;
-    TPM2B_MAX_BUFFER pcrValues[24];
+    TPM2B_DIGEST pcrValues[24];
     TPML_PCR_SELECTION pcrs, pcrsTmp, pcrSelectionOut;
     UINT32 pcrUpdateCounter;
 
     TPM2_RC rval = TPM2_RC_SUCCESS;
-    char empty[32] = {0};
     zero_pcr_selection(&pcrs, nameAlg);
 
     //Init the pcr selection we will use for the PCRPolicy call
@@ -40,7 +39,7 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
     for(int i = 0; i < pcrCountIn; i++)
     {
         //No forward hash provided, need to read this pcr
-        if(!memcmp(pcrList[i]->forwardHash, empty, 32)) {
+        if(!pcrList[i]->hash_set) {
             zero_pcr_selection(&pcrsTmp, nameAlg);
             SET_PCR_SELECT_BIT(pcrsTmp.pcrSelections[0], pcrList[i]->pcr);
             memset(&tmpPcrValues, 0, sizeof(TPML_DIGEST));
@@ -52,6 +51,7 @@ int build_pcr_policy( TSS2_SYS_CONTEXT *
             memcpy(pcrValues[i].buffer, tmpPcrValues.digests[0].buffer, tmpPcrValues.digests[0].size);
         } else {
             //Forward hash provided, copy into digest buffer
+            pcrValues[i].size = sizeof(pcrList[i]->forwardHash);
             memcpy(pcrValues[i].buffer, pcrList[i]->forwardHash, sizeof(pcrList[i]->forwardHash));
         }
     }
@@ -116,9 +116,7 @@ int build_policy_external(TSS2_SYS_CONTE
             return rval;
 
         // And remove the session from sessions table.
-        rval = tpm_session_auth_end( *policySession );
-        if( rval != TPM2_RC_SUCCESS )
-            return rval;
+        tpm_session_auth_end( *policySession );
     }
 
     memcpy(policyDigestOut->buffer, policyDigest.buffer, policyDigest.size);
--- a/tools/shared.h
+++ b/tools/shared.h
@@ -6,9 +6,7 @@
 #include "tpm_session.h"
 #include "pcr.h"
 
-int setup_alg(TPMI_ALG_PUBLIC type, TPMI_ALG_HASH nameAlg, TPM2B_PUBLIC *in_public, int I_flag);
-
-int create(TSS2_SYS_CONTEXT *sysContext, TPMI_DH_OBJECT parent_handle, TPM2B_PUBLIC *in_public, TPM2B_SENSITIVE_CREATE *in_sensitive, TPMI_ALG_PUBLIC type, TPMI_ALG_HASH nameAlg, const char *opu_path, const char *opr_path, int o_flag, int O_flag, int I_flag, int A_flag, UINT32 objectAttributes);
+int create(TSS2_SYS_CONTEXT *sapi_context, TPMI_DH_OBJECT parent_handle, TPM2B_PUBLIC *in_public, TPM2B_SENSITIVE_CREATE *in_sensitive, TPMI_ALG_PUBLIC type, TPMI_ALG_HASH nameAlg, char *input, char *opu_path, char *opr_path, int H_flag, int g_flag, int G_flag, int I_flag, int o_flag, int O_flag, int A_flag, TPMA_OBJECT objectAttributes);
 
 int build_policy_external(TSS2_SYS_CONTEXT *sysContext, SESSION **policySession, int trial, pcr_struct **pcrList, INT32 pcrCount, TPM2B_DIGEST *policyDigestOut, TPMI_ALG_HASH nameAlg);
 
--- a/tools/tpm2_create.c
+++ b/tools/tpm2_create.c
@@ -49,6 +49,7 @@
 #include "tpm2_password_util.h"
 #include "tpm2_tool.h"
 #include "tpm2_util.h"
+#include "shared.h"
 
 typedef struct tpm_create_ctx tpm_create_ctx;
 struct tpm_create_ctx {
@@ -62,6 +63,7 @@ struct tpm_create_ctx {
     char *opu_path;
     char *opr_path;
     char *context_parent_path;
+    TPMA_OBJECT objectAttributes;
     struct {
         UINT16 H : 1;
         UINT16 P : 1;
@@ -113,6 +115,8 @@ int setup_alg()
         return -1;
     }
 
+    ctx.in_public.publicArea.type = ctx.type;
+
     switch(ctx.in_public.publicArea.type) {
     case TPM2_ALG_RSA:
         ctx.in_public.publicArea.parameters.rsaDetail.symmetric.algorithm = TPM2_ALG_NULL;
@@ -164,7 +168,7 @@ int setup_alg()
     return 0;
 }
 
-int create(TSS2_SYS_CONTEXT *sapi_context)
+int create_internal(TSS2_SYS_CONTEXT *sapi_context)
 {
     TSS2_RC rval;
     TSS2L_SYS_AUTH_COMMAND sessionsData;
@@ -187,6 +191,10 @@ int create(TSS2_SYS_CONTEXT *sapi_contex
     if(setup_alg())
         return -1;
 
+    if (ctx.flags.A) {
+        ctx.in_public.publicArea.objectAttributes = ctx.objectAttributes;
+    }
+
     creationPCR.count = 0;
 
     rval = TSS2_RETRY_EXP(Tss2_Sys_Create(sapi_context, ctx.parent_handle, &sessionsData, &ctx.in_sensitive,
@@ -216,135 +224,6 @@ int create(TSS2_SYS_CONTEXT *sapi_contex
     return 0;
 }
 
-static bool on_option(char key, char *value) {
-
-    bool res;
-
-    switch(key) {
-    case 'H':
-        if(!tpm2_util_string_to_uint32(value, &ctx.parent_handle)) {
-            LOG_ERR("Invalid parent handle, got\"%s\"", value);
-            return false;
-        }
-        ctx.flags.H = 1;
-        break;
-    case 'P':
-        res = tpm2_password_util_from_optarg(value, &ctx.session_data.hmac);
-        if (!res) {
-            LOG_ERR("Invalid parent key password, got\"%s\"", value);
-            return false;
-        }
-        ctx.flags.P = 1;
-        break;
-    case 'K':
-        res = tpm2_password_util_from_optarg(value, &ctx.in_sensitive.sensitive.userAuth);
-        if (!res) {
-            LOG_ERR("Invalid key password, got\"%s\"", value);
-            return false;
-        }
-        ctx.flags.K = 1;
-        ctx.in_public.publicArea.objectAttributes |= TPMA_OBJECT_USERWITHAUTH;
-        break;
-    case 'g':
-        ctx.nameAlg = tpm2_alg_util_from_optarg(value);
-        if(ctx.nameAlg == TPM2_ALG_ERROR) {
-            LOG_ERR("Invalid hash algorithm, got\"%s\"", value);
-            return false;
-        }
-        ctx.flags.g = 1;
-        break;
-    case 'G':
-        ctx.in_public.publicArea.type = tpm2_alg_util_from_optarg(value);
-        if(ctx.in_public.publicArea.type == TPM2_ALG_ERROR) {
-            LOG_ERR("Invalid key algorithm, got\"%s\"", value);
-            return false;
-        }
-
-        ctx.flags.G = 1;
-        break;
-    case 'A': {
-        bool res = tpm2_attr_util_obj_from_optarg(value,
-                &ctx.in_public.publicArea.objectAttributes);
-        if(!res) {
-            LOG_ERR("Invalid object attribute, got\"%s\"", value);
-            return false;
-        }
-        ctx.flags.A = 1;
-    } break;
-    case 'I':
-        ctx.input = strcmp("-", value) ? value : NULL;
-        ctx.flags.I = 1;
-        break;
-    case 'L':
-        ctx.in_public.publicArea.authPolicy.size = sizeof(ctx.in_public.publicArea.authPolicy) - 2;
-        if(!files_load_bytes_from_path(value, ctx.in_public.publicArea.authPolicy.buffer,
-                                       &ctx.in_public.publicArea.authPolicy.size)) {
-            return false;
-        }
-        ctx.flags.L = 1;
-        if (!ctx.flags.K) {
-             ctx.in_public.publicArea.objectAttributes &= ~TPMA_OBJECT_USERWITHAUTH;
-        }
-        break;
-    case 'S':
-        if (!tpm2_util_string_to_uint32(value, &ctx.session_data.sessionHandle)) {
-            LOG_ERR("Could not convert session handle to number, got: \"%s\"",
-                    value);
-            return false;
-        }
-        break;
-    case 'u':
-        ctx.opu_path = value;
-        if(files_does_file_exist(ctx.opu_path) != 0) {
-            return false;
-        }
-        ctx.flags.o = 1;
-        break;
-    case 'r':
-        ctx.opr_path = value;
-        if(files_does_file_exist(ctx.opr_path) != 0) {
-            return false;
-        }
-        ctx.flags.O = 1;
-        break;
-    case 'c':
-        ctx.context_parent_path = value;
-        if(ctx.context_parent_path == NULL || ctx.context_parent_path[0] == '\0') {
-            return false;
-        }
-        ctx.flags.c = 1;
-        break;
-    };
-
-    return true;
-}
-
-bool tpm2_tool_onstart(tpm2_options **opts) {
-
-    static struct option topts[] = {
-      {"parent",1,NULL,'H'},
-      {"pwdp",1,NULL,'P'},
-      {"pwdk",1,NULL,'K'},
-      {"halg",1,NULL,'g'},
-      {"kalg",1,NULL,'G'},
-      {"object-attributes",1,NULL,'A'},
-      {"in-file",1,NULL,'I'},
-      {"policy-file",1,NULL,'L'},
-      {"pubfile",1,NULL,'u'},
-      {"privfile",1,NULL,'r'},
-      {"context-parent",1,NULL,'c'},
-      {"input-session-handle",1,NULL,'S'},
-    };
-
-    setbuf(stdout, NULL);
-    setvbuf (stdout, NULL, _IONBF, BUFSIZ);
-
-    *opts = tpm2_options_new("H:P:K:g:G:A:I:L:u:r:c:S:", ARRAY_LEN(topts),
-            topts, on_option, NULL, TPM2_OPTIONS_SHOW_USAGE);
-
-    return *opts != NULL;
-}
-
 static bool load_sensitive(void) {
 
     ctx.in_sensitive.sensitive.data.size = BUFFER_SIZE(typeof(ctx.in_sensitive.sensitive.data), buffer);
@@ -352,10 +231,32 @@ static bool load_sensitive(void) {
             &ctx.in_sensitive.sensitive.data.size, ctx.in_sensitive.sensitive.data.buffer);
 }
 
-int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sapi_context, tpm2_option_flags flags) {
-
-    UNUSED(flags);
+// tpm2_create used to be a commandline tool, but now it's just a library.
+// This wrapper allows us to build the tpm_create context from the args and
+// skirt the new tpm2_tool option parsing scheme.
+//
+// Calls create_internal(), which was the original create()
+// Note that some flags (e.g. P) are currently unused
+int create(TSS2_SYS_CONTEXT *sapi_context, TPMI_DH_OBJECT parent_handle, TPM2B_PUBLIC *in_public, TPM2B_SENSITIVE_CREATE *in_sensitive, TPMI_ALG_PUBLIC type, TPMI_ALG_HASH nameAlg, char *input, char *opu_path, char *opr_path, int H_flag, int g_flag, int G_flag, int I_flag, int o_flag, int O_flag, int A_flag, TPMA_OBJECT objectAttributes) {
+
+    ctx.parent_handle = parent_handle;
+    ctx.in_public = *in_public;
+    ctx.in_sensitive = *in_sensitive;
+    ctx.type = type;
+    ctx.nameAlg = nameAlg;
+    ctx.input = input;
+    ctx.opu_path = opu_path;
+    ctx.opr_path = opr_path;
+    ctx.objectAttributes = objectAttributes;
+    ctx.flags.H = H_flag;
+    ctx.flags.g = g_flag;
+    ctx.flags.G = G_flag;
+    ctx.flags.I = I_flag;
+    ctx.flags.o = o_flag;
+    ctx.flags.O = O_flag;
+    ctx.flags.A = A_flag;
 
+    // Everything below used to be tpm2_tool_onrun
     int returnVal = 0;
     int flagCnt = 0;
 
@@ -369,7 +270,7 @@ int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sa
         }
     }
 
-    if (ctx.flags.I && ctx.in_public.publicArea.type != TPM2_ALG_KEYEDHASH) {
+    if (ctx.flags.I && ctx.type != TPM2_ALG_KEYEDHASH) {
         LOG_ERR("Only TPM2_ALG_KEYEDHASH algorithm is allowed when sealing data");
         return 1;
     }
@@ -382,8 +283,9 @@ int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sa
         if(ctx.flags.c)
             returnVal = files_load_tpm_context_from_file(sapi_context,
                                                          &ctx.parent_handle, ctx.context_parent_path) != true;
+
         if(returnVal == 0)
-            returnVal = create(sapi_context);
+            returnVal = create_internal(sapi_context);
 
         if(returnVal)
             return 1;
--- a/tools/tpm2_createprimary.c
+++ b/tools/tpm2_createprimary.c
@@ -191,6 +191,8 @@ int create_primary(TSS2_SYS_CONTEXT *sap
 static bool on_option(char key, char *value) {
 
     bool res;
+    char pass[40];
+    char *index = NULL;
 
     switch(key) {
     case 'H':
@@ -209,7 +211,15 @@ static bool on_option(char key, char *va
         ctx.flags.A = 1;
         break;
     case 'P':
-        res = tpm2_password_util_from_optarg(value, &ctx.session_data.hmac);
+        if (fgets(pass, 40, stdin)) {
+            index = strchr(pass, '\n');
+            if (index)
+                *index = '\0';
+        } else {
+            LOG_ERR("No password provided");
+            return false;
+        }
+        res = tpm2_password_util_from_optarg(pass, &ctx.session_data.hmac);
         if (!res) {
             LOG_ERR("Invalid parent key password, got\"%s\"", value);
             return false;
@@ -290,7 +300,7 @@ bool tpm2_tool_onstart(tpm2_options **op
     setbuf(stdout, NULL);
     setvbuf (stdout, NULL, _IONBF, BUFSIZ);
 
-    *opts = tpm2_options_new("A:P:K:g:G:C:L:S:H:", ARRAY_LEN(topts), topts,
+    *opts = tpm2_options_new("A:PK:g:G:C:L:S:H:", ARRAY_LEN(topts), topts,
             on_option, NULL, TPM2_OPTIONS_SHOW_USAGE);
 
     return *opts != NULL;
--- /dev/null
+++ b/tools/tpm2_sealdata.c
@@ -0,0 +1,262 @@
+
+//**********************************************************************;
+// Copyright (c) 2015, Intel Corporation
+// Copyright (c) 2017, Assured Information Security
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+// this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+// this list of conditions and the following disclaimer in the documentation
+// and/or other materials provided with the distribution.
+//
+// 3. Neither the name of Intel Corporation nor the names of its contributors
+// may be used to endorse or promote products derived from this software without
+// specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+// THE POSSIBILITY OF SUCH DAMAGE.
+//**********************************************************************;
+
+#include <stdarg.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <limits.h>
+#include <ctype.h>
+#include <getopt.h>
+#include <stdbool.h>
+
+#include <tss2/tss2_sys.h>
+#include <tss2/tss2_tcti_mssim.h>
+#include "pcr.h"
+#include "log.h"
+#include "tpm_session.h"
+#include "tpm2_options.h"
+#include "tpm2_util.h"
+#include "tpm2_attr_util.h"
+#include "tpm2_alg_util.h"
+#include "files.h"
+#include "shared.h"
+
+//Define the context object for tpm2_sealdata
+typedef struct tpm_sealdata_ctx tpm_sealdata_ctx;
+struct tpm_sealdata_ctx {
+    TPMI_DH_OBJECT handle2048rsa;
+    TPM2B_SENSITIVE_CREATE inSensitive;
+    TPMI_ALG_PUBLIC type;
+    TPMI_ALG_HASH nameAlg;
+    TPMA_OBJECT objectAttributes;
+    char * input;
+    char * opu_path;
+    char * opr_path;
+
+    UINT32 pcr;
+    INT32 pcrCount;
+    pcr_struct* pcrList[24];
+    BYTE forwardHash[32];
+    bool hash_set;
+
+    struct {
+        UINT16 H : 1;
+        UINT16 K : 1;
+        UINT16 g : 1;
+        UINT16 G : 1;
+        UINT16 I : 1;
+        UINT16 o : 1;
+        UINT16 O : 1;
+        UINT16 b : 1;
+        UINT16 r : 1;
+    } flags;
+};
+
+//Initialize the context object
+static tpm_sealdata_ctx ctx = {
+    .objectAttributes = 0,
+    .opu_path = NULL,
+    .opr_path = NULL,
+    .pcr = -1,
+    .pcrCount = 0,
+    .hash_set = false,
+    .forwardHash = {0}
+};
+
+int seal(TSS2_SYS_CONTEXT *sapi_context)
+{
+    UINT32 rval;
+    SESSION *policySession;
+    TPM2B_PUBLIC inPublic;
+    TPM2B_DIGEST policyDigest;
+
+    //Build a trial policy gated by the provided PCR
+    rval = build_policy_external(sapi_context, &policySession, true, ctx.pcrList, ctx.pcrCount, &policyDigest, ctx.nameAlg);
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("build_policy failed, ec: 0x%x\n", rval);
+        return rval;
+    }
+
+    inPublic.publicArea.authPolicy.size = policyDigest.size;
+    memcpy(inPublic.publicArea.authPolicy.buffer, policyDigest.buffer, policyDigest.size);
+
+    //Seal the provided data
+    rval = create(sapi_context, ctx.handle2048rsa, &inPublic, &ctx.inSensitive, ctx.type, ctx.nameAlg, ctx.input, ctx.opu_path, ctx.opr_path, ctx.flags.H, ctx.flags.g, ctx.flags.G, ctx.flags.I, ctx.flags.o, ctx.flags.O, ctx.flags.b, ctx.objectAttributes);
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("create() failed, ec: 0x%x\n", rval);
+        return rval;
+    }
+
+    return rval;
+
+}
+
+static bool on_option(char key, char *value) {
+
+    ctx.inSensitive.sensitive.data.size = 0;
+
+    switch (key) {
+    case 'K':
+        ctx.inSensitive.sensitive.userAuth.size = sizeof(ctx.inSensitive.sensitive.userAuth) - 2;
+        if(tpm2_util_hex_to_byte_structure(value, &ctx.inSensitive.sensitive.userAuth.size, ctx.inSensitive.sensitive.userAuth.buffer) != 0) {
+            return false;
+        }
+        ctx.flags.K = 1;
+        break;
+    case 'g':
+        ctx.nameAlg = tpm2_alg_util_from_optarg(value);
+        if(ctx.nameAlg == TPM2_ALG_ERROR) {
+            return false;
+        }
+        LOG_INFO("nameAlg = 0x%4.4x\n", ctx.nameAlg);
+        ctx.flags.g = 1;
+        break;
+    case 'G':
+        ctx.type = tpm2_alg_util_from_optarg(value);
+        if(ctx.type == TPM2_ALG_ERROR) {
+            return false;
+        }
+        LOG_INFO("type = 0x%4.4x\n", ctx.type);
+        ctx.flags.G = 1;
+        break;
+    case 'b':
+        if(!tpm2_attr_util_obj_from_optarg(value, &ctx.objectAttributes)) {
+            return false;
+        }
+        ctx.flags.b = 1;
+        break;
+    case 'I':
+        ctx.input = strcmp("-", value) ? value : NULL;
+        ctx.flags.I = 1;
+        LOG_INFO("ctx.inSensitive.sensitive.data.size = %d\n", ctx.inSensitive.sensitive.data.size);
+        break;
+    case 'o':
+        ctx.opu_path = value;
+        if(files_does_file_exist(ctx.opu_path) != 0) {
+            return false;
+        }
+        ctx.flags.o = 1;
+        break;
+    case 'O':
+        ctx.opr_path = value;
+        //Allow output file to be overwritten
+        ctx.flags.O = 1;
+        break;
+    case 'H':
+        if (!tpm2_util_string_to_uint32(value, &ctx.handle2048rsa)) {
+            LOG_ERR(
+                    "Could not convert object handle to a number, got: \"%s\"",
+                    value);
+            return false;
+        }
+        ctx.flags.H = 1;
+        break;
+    case 'r':
+        if ( pcr_parse_arg(value, &ctx.pcr, ctx.forwardHash, &ctx.hash_set) ) {
+            LOG_ERR("Invalid pcr value.\n");
+            return false;
+        }
+        pcr_struct *new_pcr = (pcr_struct *) malloc(sizeof(pcr_struct));
+        new_pcr->pcr = ctx.pcr;
+        new_pcr->hash_set = ctx.hash_set;
+        memcpy(new_pcr->forwardHash, ctx.forwardHash, 32);
+        memset(ctx.forwardHash, 0, 32);
+        ctx.pcrList[ctx.pcrCount] = new_pcr;
+        ctx.pcrCount++;
+
+        ctx.flags.r = 1;
+        break;
+    }
+
+    return true;
+}
+
+bool tpm2_tool_onstart(tpm2_options **opts) {
+
+    const struct option topts[] = {
+      {"pwdk",             required_argument, NULL, 'K'},
+      {"halg",             required_argument, NULL, 'g'},
+      {"kalg",             required_argument, NULL, 'G'},
+      {"objectAttributes", required_argument, NULL, 'b'},
+      {"pcr",              required_argument, NULL, 'r'},
+      {"inFile",           required_argument, NULL, 'I'},
+      {"opu",              required_argument, NULL, 'o'},
+      {"opr",              required_argument, NULL, 'O'},
+      {"handle",           required_argument, NULL, 'H'}
+    };
+
+    *opts = tpm2_options_new("H:K:g:G:I:o:O:b:r:", ARRAY_LEN(topts), topts,
+            on_option, NULL, TPM2_OPTIONS_SHOW_USAGE);
+
+    return *opts != NULL;
+}
+
+int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sapi_context, tpm2_option_flags flags) {
+
+    UNUSED(flags);
+
+    int returnVal = 0;
+    int flagCnt = 0;
+
+    if(ctx.flags.K == 0)
+        ctx.inSensitive.sensitive.userAuth.size = 0;
+
+    flagCnt = ctx.flags.g + ctx.flags.G + ctx.flags.I + ctx.flags.r;
+    if(flagCnt == 1) {
+        returnVal = -16;
+		goto out;
+    } else if(flagCnt >= 4 && ctx.flags.I == 1 && ctx.flags.g == 1 && ctx.flags.G == 1 && ctx.flags.r == 1 && ctx.flags.H == 1) {
+        if(returnVal == 0) {
+            returnVal = seal(sapi_context);
+        }
+
+        if(returnVal)
+			goto out;
+
+        //clean up pcr objects
+        for(int i = 0; i < ctx.pcrCount; i++)
+            free(ctx.pcrList[i]);
+    } else {
+        returnVal = -18;
+		goto out;
+    }
+
+out:
+	//clean up handle
+	if(Tss2_Sys_FlushContext(sapi_context, ctx.handle2048rsa) != TPM2_RC_SUCCESS)
+            LOG_WARN("FlushContext failed for handle, non-fatal\n");
+    return returnVal;
+}
+
