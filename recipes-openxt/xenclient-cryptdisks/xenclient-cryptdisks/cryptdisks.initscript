#! /bin/sh
#
# Copyright (c) 2013 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

### BEGIN INIT INFO
# Provides:          cryptdisks
# Required-Start:    
# Required-Stop:     umountroot
# Should-Start:      udev lvm2
# Should-Stop:       udev lvm2
# X-Start-Before:    checkfs
# X-Stop-After:      umountfs
# X-Interactive:     true
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: Set up NON-ROOT encrypted partition mappings.
# Description: Set up NON-ROOT encrypted partition mappings.
### END INIT INFO

if [ -x "/sbin/cryptsetup" ]; then
    CS=/sbin/cryptsetup
elif [ -x "/usr/sbin/cryptsetup" ]; then
    CS=/usr/sbin/cryptsetup
else
    exit 1
fi

[ -f /etc/crypttab -a -n "$(/bin/grep -v ^# /etc/crypttab | /bin/grep -v ^$)" ] || exit 1

# Map a crypttab entry in appropriate device mapper
process_crypttab_entry_start()
{
    if [ $# -ge 3 ]; then
        cname="$1"
        csrc="$2"
        cpass="$3"
        shift 3
        copts="$*"
        echo -n "Openning $cname ... "
        # For some fun reason, the parameter ordering varies for
        # LUKS and non-LUKS devices.  Joy.
        if [ "${cpass}" = "SWAP" ]; then
            # This is DANGEROUS! The only possible safety check
            # is to not proceed in case we find a LUKS device
            # This may cause dataloss if it is not used carefully
            $CS -d /dev/urandom $copts create $cname $csrc >/dev/null
            if [ $? -eq 0 ]; then
                echo "creating swapspace ..."
                /sbin/mkswap /dev/mapper/$cname >/dev/null
            fi
        elif [ "${cpass}" = "ASK" ]; then
            printf "\nOpening '${cname}' volume:\n"

            if $CS isLuks $csrc 2>/dev/null; then
                $CS $copts luksOpen $csrc $cname < /dev/console
            else
                $CS $copts create $cname $csrc < /dev/console
            fi
        elif [ "${cpass:0:1}" != "/" ]; then
            if $CS isLuks $csrc 2>/dev/null; then
                echo "$cpass" | $CS $copts luksOpen $csrc $cname >/dev/null
            else
                echo "$cpass" | $CS $copts create $cname $csrc >/dev/null
            fi
        else
            if $CS isLuks $csrc 2>/dev/null; then
                $CS -d $cpass $copts luksOpen $csrc $cname >/dev/null
            else
                $CS -d $cpass $copts create $cname $csrc >/dev/null
            fi
        fi
        if [ $? -ne 0 ]; then
            echo "failed"
            return 1
        fi
        echo "succeed"
    fi
}

# Unmap a cryptab entry
process_crypttab_entry_stop()
{
    if [ $# -ge 3 ]; then
        cname="$1"
        csrc="$2"
        cpass="$3"
        shift 3
        copts="$*"

        if [ ! -b "/dev/mapper/$cname" ]; then
            echo "volume $cname stopped"
            return 0
        fi

        cnt=`dmsetup info -c --noheadings -o open "$cname" 2> /dev/null`
        if [ -z "$cnt" ]; then
            echo "volume $cname: error"
            return 1
        elif [ "$cnt" != "0" ]; then
            echo "volume $cname is busy"
            return 1
        fi

        if $CS isLuks $csrc 2>/dev/null; then
            $CS luksClose $cname >/dev/null
        else
            $CS remove $cname >/dev/null
        fi
        err=$?
        [ $err -eq 0 ] && echo "volume $cname stopped"
        return $err
    fi
}

do_start()
{
    csfailed=0
    while read line; do
        eval process_crypttab_entry_start "$line"
        if [ $? -ne 0 ]; then
            csfailed=1
        fi
    done </etc/crypttab

    if [ $csfailed -ne 0 ]; then
        echo "error occured while processing crypttab"
        exit 1
    fi
}

do_stop()
{
    csfailed=0
    while read line; do
        eval process_crypttab_entry_stop "$line"
        if [ $? -ne 0 ]; then
            csfailed=1
        fi
    done </etc/crypttab

    if [ $csfailed -ne 0 ]; then
        echo "error occured while processing crypttab"
        exit 1
    fi
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart|reload)
        do_stop
        do_start
        ;;
    *)
        echo "Usage: cryptdisks {start|stop|restart|reload}"
        exit 1
        ;;
esac
