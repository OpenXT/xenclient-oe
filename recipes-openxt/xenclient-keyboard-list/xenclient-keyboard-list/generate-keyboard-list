#!/usr/bin/perl
#
# Copyright (c) 2011 Citrix Systems, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

use strict;
use warnings;

my %layouts;
my %variants;
my %supported;

sub main()
{
    if (scalar(@ARGV) != 2)
    {
        die "Usage: $0 evdev.lst supported-keyboards > keyboards\n";
    }

    read_all_keyboards($ARGV[0]);
    read_supported_keyboards($ARGV[1]);
    write_keyboards();
}

sub read_all_keyboards
{
    my ($file) = @_;

    open(my $input, "<", $file) or die "open failed: $file";

    my $section;

    while (my $line = <$input>)
    {
        chomp $line;

        if ($line =~ /^!\s+(.*)$/)
        {
            $section = $1;
        }
        elsif ($line eq "")
        {
        }
        elsif ($section eq "layout" &&
                $line =~ /^\s*(\S+)\s+(\S.*)$/)
        {
            $layouts{$1} = $2;
        }
        elsif ($section eq "variant" &&
                $line =~ /^\s*(\S+)\s+([^\s:]+):\s*(\S.*)$/)
        {
            $variants{$2}->{$1} = $3;
        }
        elsif ($section eq "model" || $section eq "option")
        {
        }
        else
        {
            die "invalid input at $file line $.: $line";
        }
    }

    close($input);
}

sub read_supported_keyboards
{
    my ($file) = @_;

    open(my $input, "<", $file) or die "open failed: $file";

    while (my $line = <$input>)
    {
        chomp $line;

        if ($line =~ /^#/ || $line eq "")
        {
        }
        elsif ($line =~ /^([^:]+):(.*)$/)
        {
            $supported{$1} = $2;
        }
        else
        {
            die "invalid input at $file line $.: $line";
        }
    }

    close($input);
}

sub write_keyboards
{
    my %keyboards;

    foreach my $layout (keys %layouts)
    {
        foreach my $variant ("", keys %{$variants{$layout}})
        {
            my $keyboard = $layout;
            my $name = $layouts{$layout};
            my $enabled = "n";

            if ($variant ne "")
            {
                $keyboard .= "-".$variant;
                $name .= " - ".$variants{$layout}->{$variant};
            }

            $keyboard = lc($keyboard);
            $keyboard =~ s/[^-a-z0-9]/-/g;

            my $supported_name = $supported{$keyboard};

            if (defined($supported_name))
            {
                $enabled = "y";

                if ($supported_name ne "")
                {
                    $name = $supported_name;
                }
            }

            $name =~ s/:/ -/g;

            $keyboards{$keyboard} = [$enabled, $layout, $variant, $name];
        }
    }

    foreach my $keyboard (sort {$keyboards{$a}->[3] cmp $keyboards{$b}->[3]}
                               keys %keyboards)
    {
        print join(":", $keyboard, @{$keyboards{$keyboard}})."\n";
    }
}

main();
