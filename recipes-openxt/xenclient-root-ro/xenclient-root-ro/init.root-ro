#!/bin/sh
#
# Copyright (c) 2014 Citrix Systems, Inc.
# Copyright (c) 2016 Daniel P. Smith, Apertus Solutions, LLC
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#
# Setup config partition
#

. /etc/init.d/functions
. /usr/lib/openxt/key-functions
. /usr/lib/tpm-scripts/tpm-functions

CONFIG_LV=xenclient-config

SYS_TPM_DIR="/boot/system/tpm"

# Trousers persistent storage
PS_FILE_SRC=/usr/share/trousers/system.data.auth
PS_DIR=${SYS_TPM_DIR}
PS_FILE=${PS_DIR}/system.data
TSS_USER="tss"

BACK_TITLE="OpenXT Measured Launch Security"

PCRS_GOOD="/config/good.pcrs"
PCRS_BAD="${SYS_TPM_DIR}/bad.pcrs"

export PATH=/usr/bin:/bin:/usr/sbin:/sbin
export TERM=linux

read_args() {
    [ -z "$CMDLINE" ] && CMDLINE=`cat /proc/cmdline`
    for arg in $CMDLINE; do
        optarg=`expr "x$arg" : 'x[^=]*=\(.*\)'`
        case $arg in
            debug)
                set -x ;;
            break=*)
                BREAK=$optarg ;;
        esac
    done
}

# break to shell
#   will be on on terminal if executed after load_modules, serial otherwise
maybe_break() {
    if [ "${BREAK:-}" = "$1" ]; then
        echo "Spawning shell in init.root-ro..."
        PS1='XT: ' /bin/sh
    fi
}

# from initramfs
dev_setup()
{
    echo -n "init.root-ro: Creating device nodes: "
    grep '^ *[0-9]' /proc/partitions | while read major minor blocks dev
    do
        case "$dev" in
        dm-*)
          continue
          ;;
        esac
        if [ ! -e /dev/$dev ]; then
            echo -n "$dev "
            [ -e /dev/$dev ] || mknod /dev/$dev b $major $minor
        fi
    done
    echo

    [ -d /dev/mapper ] || {
        echo "init.root-ro: Configuring LVM"
        LVM_SYSTEM_DIR=/dev/etc-lvm lvm vgscan --ignorelockingfailure
        LVM_SYSTEM_DIR=/dev/etc-lvm lvm vgchange -a y --ignorelockingfailure
        LVM_SYSTEM_DIR=/dev/etc-lvm lvm vgmknodes --ignorelockingfailure
        rm -rf /dev/etc-lvm
    }
}

is_launch_measured()
{
        v=`txt-stat | grep 'TXT measured launch' | awk '{print $4}'`
        [ "$v" == "TRUE" ] && return 0
        MEASURED_BOOT=0
        return 1
}

poweroff()
{
    exec 0<&-
    exec 1>&-
    exec 2>&-

    if [ "$1" == "-r" ]; then
        exec /sbin/reboot -f
    else
        exec /sbin/poweroff -f
    fi
}

recovery() {
    maybe_break "recovery-password"

    recovery_unlock "/dev/mapper/${CONFIG_LV}" config && {
        mount /dev/mapper/config /config
        # To flag for rehash after recovery password is legacy approach
        # and is not the best approach. The concept of a recovery shell
        # needs to be added and then this can be removed.
        touch /config/rehash-vms
        return 0
    }

    dialog --stdout --colors --backtitle "${BACK_TITLE}" --infobox "
                \ZbERROR: Incorrect passphrase\ZB

    The maximum number of passphrase attempts has been exceeded.

    The system will now shutdown.
    " 0 0

    return 1
}

txt_failure()
{
    dialog --colors --backtitle "${BACK_TITLE}" --defaultno \
        --yes-label "Continue" --no-label "Shutdown" --yesno "
                 \ZbSECURITY WARNING: TXT Launch FAILED\ZB

           \ZbIt is not possible to make integrity statements! \ZB

    This is due to either system tampering or a hardware failure.
    Please see the documentation for how to provide a status-report.

    If you are willing to accept the risk, you may enter the
    recovery passphrase to continue launching the system." 0 0


    [ $? -ne 0 ] && poweroff

    recovery
    [ $? -eq 0 ] && return 0

    poweroff
    exit 1
}

unseal_failure()
{
    dialog --colors --backtitle "${BACK_TITLE}" --defaultno \
        --yes-label "Continue" --no-label "Shutdown" --yesno "
          \ZbSECURITY WARNING: Measured Launch Unseal FAILED\ZB

    The failure is due to a mismatch between sealed and current
    PCR values. Primarily this is the result of either an upgrade
    or the tampering of the system.

    If a system change is expected, then you may enter the
    recovery passphrase to continue launching the system." 0 0

    [ $? -ne 0 ] && poweroff

    recovery
    [ $? -eq 0 ] && return 0

    poweroff
    exit 1
}


platfom_unlock_failure()
{
    dialog --colors --backtitle "${BACK_TITLE}" --defaultno \
        --yes-label "Continue" --no-label "Shutdown" --yesno "
            \ZbSECURITY WARNING: Platform Key FAILED\ZB

    The platform key was not able to unlock this platform.
    If this is a Measured Launch system, then tampering has
    likely occured.

    If you believe the risk is acceptable, you may enter the 
    recovery passphrase to continue launching the system." 0 0


    [ $? -ne 0 ] && poweroff

    recovery
    [ $? -eq 0 ] && return 0

    poweroff
    exit 1
}

fail_first_seal()
{
    dialog --stdout --colors --backtitle "${BACK_TITLE}" --infobox "
                \ZbERROR: Initial seal failed\ZB

    An error occured with ${1} that inhibited the initial seal.

    The system will now shutdown.
    " 0 0

    poweroff
    exit 1
}

seal()
{
    local config_key="/config/keys/config.key"
    local sealed_key="$1"
    local sealout=""
    local sealrc=""
    local pcr_opts

    maybe_break "seal"

    dialog --colors --backtitle "${BACK_TITLE}" --mixedgauge \
        "  Sealing..." 0 0 20

    for p in $(cat "/config/config.pcrs"); do
        pcr_opts="${pcr_opts} -p ${p}"
    done
    sealout="$(tpm_seal ${pcr_opts} "${config_key}" "${sealed_key}" 2>&1)"
    sealrc="$?"
    if [ "${sealrc}" -ne "0" ]; then
        dialog --colors --backtitle "${BACK_TITLE}" --msgbox \
            "Sealing Failed\n  Error code: ${sealrc}\n  Output: ${sealout}" 0 0
        return 1
    fi

    rm -f "${PCRS_BAD}"
    tpm_list_pcrs > "${PCRS_GOOD}"

    dialog --colors --backtitle "${BACK_TITLE}" --mixedgauge \
        "  Sealing: Done" 0 0 100

    poweroff -r
    # Just reboot into sealed system...
    exit 1
}

reseal()
{
    dialog --colors  --backtitle "${BACK_TITLE}" --defaultno \
        --yes-label "Reseal & Reboot" --no-label "Continue" --yesno "
           \ZbReseal device?\ZB

    Would you like to reseal the device
    or continue without resealing?" 10 44

    [ $? -eq 0 ] && seal "${1}"
}

# Unlock the config partition
#    0 - successful
#    1 - recovered for debug
#    2 - recovered ml failed seal
unlock_config()
{
    local lv_path="/dev/mapper/${CONFIG_LV}"
    local lv_name="config"
    local tss_path="${SYS_TPM_DIR}/config.tss"
    local measured_flag="/config/tpm/measured-boot"

    local sig=$(dd if="${lv_path}" bs=4 count=1 2>/dev/null)
    case "${sig}" in
    LUKS)
        if [ -e /boot/system/tpm/enabled ]; then
            # This will seal/reboot or fail/halt
            if [ -e ${SYS_TPM_DIR}/setup ]; then
                # create a small tmpfs to use for sealing, then remove
                mount -t tmpfs -o defaults,size=10M tmpfs /tmp
                platform_unlock "${lv_path}" "${lv_name}" || \
                    fail_first_seal "unlocking"
                clear_platform_key "$(gen_platform_key)" "${lv_path}" || \
                    fail_first_seal "clearing the platform key"

                mount /dev/mapper/config /config
                rm ${SYS_TPM_DIR}/setup
                seal ${tss_path} || fail_first_seal "sealing"

                # Should not get here, but in case clean up mount and return
                # failure.
                umount /tmp
                return 1
            fi

            encrypted_unlock "${lv_path}" "${lv_name}" "${tss_path}" && {
                mount /dev/mapper/config /config
                mkdir -p $(dirname ${measured_flag})
                touch ${measured_flag}
                return 0
            }
            maybe_break "measure-fail"

            # store PCR hints for recovery
            tpm_list_pcrs > "${PCRS_BAD}"

            unseal_failure
            [ -f ${measured_flag} ] && rm -f ${measured_flag}
            reseal "${tss_path}"

            return 2
        else
            platform_unlock "${lv_path}" "${lv_name}" || {
                platform_unlock_failure
                [ -f ${measured_flag} ] && rm -f ${measured_flag}
                return 1
            }
            mount /dev/mapper/config /config
            [ -f ${measured_flag} ] && rm -f ${measured_flag}
            return 0
        fi
    ;;
    *)
        # We want to do this (for some sort of ref counting)
        # but the lvm/dm versions used don't allow this (anymore).
        # secs=$(dmsetup table "${CONFIG_LV}" | cut -f2 -d\ )
        # echo 0 ${secs} linear "/dev/mapper/${CONFIG_LV}" 0 | dmsetup create config
        # Instead make a symlink:
        ln -fs xenclient-config /dev/mapper/config
        return 0
    ;;
    esac
}

load_modules()
{
    modprobe usbhid
    modprobe ehci-pci
    modprobe uhci-hcd
    modprobe ohci-pci
    modprobe xhci-pci
    modprobe hid
    modprobe hid-generic

    # A few temp. hacks to get TPM measurement back on track
    modprobe tpm
    modprobe tpm_tis
    modprobe i915
    # End of hacks

    exec 0<&-
    exec 1>&-
    exec 2>&-

    exec 0< /dev/tty1
    exec 1> /dev/tty1
    exec 2> /dev/tty1

    sleep 3
}

unload_modules()
{
    exec 0<&-
    exec 1>&-
    exec 2>&-

    echo -n 0 > /sys/class/vtconsole/vtcon1/bind 2>/dev/null
}

#
# Main
#
! [ -e /dev/mapper/config ] || exec /sbin/init

[ -e /proc/mounts ] || mount -t proc proc /proc
! grep -q sysfs /proc/filesystems ||
  [ -e /sys/kernel ] ||
    mount sysfs /sys -t sysfs

grep -q '^[a-z]\+\s\+/dev\s\+devtmpfs' /proc/mounts ||
  mount -t devtmpfs none /dev || {
    echo "FATAL: Failed to mount /dev."
    exit 1
}

[ -e /dev/null ] || mknod -m 0666 /dev/null c 1 3
[ -e /dev/zero ] || mknod -m 0666 /dev/zero c 1 5
[ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9
[ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
[ -e /dev/tty1 ] || mknod -m 600 /dev/tty1 c 4 1
[ -e /dev/mem ] || mknod -m 640 /dev/mem c 1 1

PCR_DEV=$(find /sys/class -name tpm0)

read_args
dev_setup

is_tpm_2_0
tpm2=$?

# Copy trousers data file to /boot/system.
if [ ! -s ${PS_FILE} ]; then
    install -m 700 -o ${TSS_USER} -g ${TSS_USER} -d ${PS_DIR}
    restore ${PS_DIR}
    install -m 600 -o ${TSS_USER} -g ${TSS_USER} ${PS_FILE_SRC} ${PS_FILE}
fi

load_modules

# Attempt to unlock config, ignore return code but in future may be used
# for setting up a recovery shell
unlock_config

restore_firstboot -r /config

if [ "${tpm2}" -eq 0 ];
then
    #cap pcr 15 in all available banks. This is a cheap operation and works for all cases
    sha256cap=$(echo -n "MEASUREDLAUNCHCLOSED"|sha256sum|cut -f1 -d\ |tr -d "\n")
    sha1cap=$(echo -n "MEASUREDLAUNCHCLOSED"|sha1sum|cut -f1 -d\ |tr -d "\n")
    pcr_bank_exists "sha256" && tpm2_extendpcr -c 15 -g 0xB -s "${sha256cap}"
    pcr_bank_exists "sha1" && tpm2_extendpcr -c 15 -g 0x4 -s "${sha1cap}"
else
    echo -n "MEASUREDLAUNCHCLOSED" | TCSD_LOG_OFF=yes tpm_extendpcr_sa -p 15
fi

unload_modules

# We want to pass the runlevel specifically, but just pass along all arguments.
exec /sbin/init "$@"
