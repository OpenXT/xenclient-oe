#!/bin/sh
#
# Copyright (c) 2013 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# attempt to start tcsd if it's not already running
# return 0 if tcsd is running or successfully started
#        1 otherwise
# A return status of 1 indicates the TPM driver is not loaded.
# In this state the TPM is disabled ... or the platform doesn't have one :)

clean_old_tpm_files () {
    [ -e /boot/system/tpm/config.tss ] && rm /boot/system/tpm/config.tss
    [ -e /boot/system/tpm/config.tss.sha256 ] && rm /boot/system/tpm/config.tss.sha256
    [ -e /boot/system/tpm/config.tss.pub.sha256 ] && rm /boot/system/tpm/config.tss.pub.sha256
}

is_tpm_2_0 () {
   [ -e /sys/class/tpm/tpm0/device/description ] && cat /sys/class/tpm/tpm0/device/description | grep "2.0" &>/dev/null
}

pcr_bank_exists () {
    local alg_in=$1

    banks=$(tpm2_listpcrs -s | cut -d ':' -f 2)
    for bank in $banks; do
        alg=$(echo $bank | cut -d '(' -f 1)
        if [ "$alg" = $alg_in ]; then
            return 0
        fi
    done
    return 1
}

alg_to_handle () {
    alg=$1
    case $alg in
        0x000b)
            echo "0x81000000"
            ;;
        0x0004)
            echo "0x81000001"
            ;;
    esac
}

tcsd_start() {
    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -ne 0 ];
    then
        local ret=1
        /etc/init.d/trousers status > /dev/null
        if [ $? -ne 0 ]; then
            /etc/init.d/trousers start > /dev/null
            sleep 1
            /etc/init.d/trousers status > /dev/null
            [ $? -ne 0 ] && return 1
        fi
    fi
    return 0
}
# Function to determin whether or not the TPM is active
# returns 0 if active
#         1 if inactive
#         2 if indeterminant
tpm_is_active() {
    local tpm="$(find /sys/class -name tpm0 2>/dev/null)/device"
    local state=""

    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        msg=$(tpm2_dump_capability --capability=properties-fixed 2>&1)
        if [ $? -ne 0 ]; then
            case "$msg" in
                *Invalid) state=1 ;;
                *) state=0 ;;
            esac
        else
            state=0
        fi
    else
        state=$(cat ${tpm}/active)
        if [ $? -ne 0 ]; then
            return 2
        fi
        [ $state -eq 1 ] && state=0 || state=1
    fi

    return $state
}
# Function to determine whether or not the TPM is enabled
# return 0 if TPM is enabled
#        1 if TPM is disabled
#        2 if indeterminant
tpm_is_enabled() {
    local tpm="$(find /sys/class -name tpm0 2>/dev/null)/device"
    local state=""

    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        msg=$(tpm2_getcapabilities 2>&1)
        if [ $? -ne 0 ]; then
            case "$msg" in
                *Failed\ to\ get) state=1 ;;
                *) state=0 ;;
            esac
        fi
    else
        state=$(cat ${tpm}/enabled)
        if [ $? -ne 0 ]; then
            return 2
        fi
    fi

    [ $state -eq 1 ] && state=0 || state=1

    return $state
}
# Function to determine whether or not the TPM is owned.
# returns 0 if TPM is owned
#         1 if TPM is not owned
#         2 if indeterminant
tpm_is_owned() {
    local tpm="$(find /sys/class -name tpm0 2>/dev/null)/device"
    local state=""

    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        tpm2_dump_capability --capability=properties-variable | grep -q 'ownerAuthSet:[[:space:]]\+set'
        ret=$?
        if [ "${ret}" -eq 0 ]; then
            state=1
        fi
    else
        state=$(cat ${tpm}/owned)
        if [ $? -ne 0 ]; then
            return 2
        fi
    fi

    [ $state -eq 1 ] && state=0 || state=1

    return $state
}
# Function to determin whether or not the TPM owner password is the well known
#   secret of 20 bytes of 0's
# returns 0 if owner password is WKS
#         1 if owner password is not WKS
#         2 if indeterminant
tpm_is_owner_wks() {
    local ret=0
    local msg=""

    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        return $ret
    fi

    msg=$(tpm_setenable -z -s 2>&1)
    if [ $? -ne 0 ]; then
        case "$msg" in
            *TPM\ is\ deactivated) ret=2 ;;
            *TPM\ is\ disabled) ret=2 ;;
            *Authentication\ failed) ret=1 ;;
            *No\ SRK) ret=1 ;;
            *) ret=2 ;;
        esac
    fi
    return $ret
}
# Function to determine whether or not the TPM SRK pasword is the well known
#   20 bytes of 0's.
# returns 0 if TPM SRK passwd is WKS
#         1 if TPM SRK passwd is not WKS
#         2 if indeterminant
tpm_is_srk_wks() {
    local ret=0
    local msg=""

    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        return $ret
    fi

    msg=$(echo "data" | tpm_sealdata -z 2>&1)
    if [ $? -ne 0 ]; then
        case "$msg" in
            *TPM\ is\ deactivated) ret=2 ;;
            *TPM\ is\ disabled) ret=2 ;;
            *Authentication\ failed) ret=1 ;;
            *No\ SRK) ret=1 ;;
            *No\ EK) ret=1 ;;
            *) ret=2 ;;
        esac
    fi
    return $ret
}
# Function to determine whether or not the TPM has an EK
# NOTE: 99.99% of the platforms in this world ship with an EK from the factory.
#       The only systems I've seen w/o EKs have been Intell branded boards.
# returns 0 if TPM has an EK
#         1 if TPM does not have an EK
#         2 if indeterminant
tpm_has_ek() {
    local ret=0
    local msg=""

    #tpm2.0 most likely has EK. TODO: figure out if I need to verify this.
    is_tpm_2_0
    local tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        ret=0
    else
        msg=$(echo "data" | tpm_sealdata -z 2>&1)
        if [ $? -ne 0 ]; then
            case "$msg" in
                *TPM\ is\ deactivated) ret=2 ;;
                *TPM\ is\ disabled) ret=2 ;;
                *No\ SRK | *Authentication\ failed | *Handle\ is\ incorrect) ;;
                *No\ EK)  ret=1 ;;
                *) ret=2 ;;
            esac
        fi
    fi
    return $ret
}

#Taking ownership for tpm2 is slightly more complicated. Encapsulate this process
#in its own function, checking err after each critical operation.
tpm2_ownership () {
    passwd=$1

    #Taking endoresement password AND lockout password to fully own tpm
    err=$(tpm2_takeownership -o "${passwd}" -e "${passwd}" 2>&1)
    ret=$?
    [ ${ret} -ne 0 ] && echo ${err} && return ${ret}

    #Create our primary object
    handle=$(echo -n "${passwd}" | tpm2_createprimary -A o -g 0xB -G 0x1 -P | grep Handle | cut -d ':' -f 2)
    ret=$?
    [ ${ret} -ne 0 ] && echo "Failed to create primary" && return ${ret}
    #Make it permanent for this measured install
    err=$(tpm2_evictcontrol -A o -H ${handle} -S $(alg_to_handle "0x000b") -P "${passwd}" 2>&1)
    ret=$?
    [ ${ret} -ne 0 ] && echo ${err} && return ${ret}
    return 0
}

# Function to take ownership of the TPM.  Wraps some common functionality to
#   create an EK and check that we can seal with the well-known SRK.
# parameter 0: password
#           1: create EK (true|false)
# return 0 on success
#        1 on error
tpm_take_ownership() {
    local passwd="$1"
    local has_ek="${2:-false}"

    is_tpm_2_0
    local tpm2=$?

    # create EK if necessary
    case ${has_ek} in
        true) ;;
        false)
            err=$(tpm_createek 2>&1)
            if [ $? -ne 0 ]; then
                echo "error creating EK for TPM: ${err}" >&2
                return 1
            fi
            ;;
        *)
            echo "invalid parameter for EK: ${has_ek}" >&2
            return 1
    esac

    if [ "${tpm2}" -eq 0 ];
    then
        err=$(tpm2_ownership ${passwd})
    else
        # take ownership of TPM
        err=$(cat "${passwd}" | tpm_takeownership --srk-well-known --stdin 2>&1)
    fi

    if [ $? -ne 0 ]; then
        echo "error taking ownership of TPM: ${err}" >&2
        return 1
    fi

    #sealing data with wks is tpm 1.2 only
    if [ "${tpm2}" -eq 1 ];
    then
        # check to be sure we can seal data with the well-known-key
        err=$(echo data | tpm_sealdata -z 2>&1 >/dev/null)
        [ $? -ne 0 ] && {
            echo "Test to seal data with well-known SRK failed with error: ${err}" >&2
            return 1
        }
    fi
    return 0
}

tpm_seal() {
    local root=""
    local hashalg="sha1"
    local pcrs=""
    local pcr_params=""
    local OPTIND
    local opt

    while getopts ":a:r:p:" opt; do
        case "${opt}" in
            a)
                hashalg=${OPTARG}
            ;;
            r)
                root=${OPTARG}
            ;;
            p)
                pcrs="${pcrs} ${OPTARG}"
            ;;
        esac
    done
    shift $((OPTIND-1))

    local secret="${root}/${1}"
    local tss="${root}/${2}"

    for p in ${pcrs}; do
        if [[ "${tpm2}" -eq 0 ]]; then
            pcr_params="${pcr_params} -r ${p}"
        else
            pcr_params="${pcr_params} -p ${p}"
        fi
    done

    is_tpm_2_0
    if [ $? -eq 0 ]; then
        pcr_bank_exists "TPM_ALG_$(echo $hashalg|tr [a-z] [A-Z])"
        [ $? -eq 0 ] || return 1

        case $hashalg in
        sha1)
            sealout=$(tpm2_sealdata -H 0x81000001 -I ${secret} \
                -O ${tss}.sha1 -o ${tss}.pub.sha1 -g 0x4 \
                -G 8 -b 0x492 ${pcr_params} 2>&1)
            return $?
        ;;
        sha256)
            sealout=$(tpm2_sealdata -H 0x81000000 -I ${secret} \
                -O ${tss}.sha256 -o ${tss}.pub.sha256 -g 0xB \
                -G 8 -b 0x492 ${pcr_params} 2>&1)
            return $?
        ;;
        *)
            return 1
        ;;
        esac
    else
        sealout=$(tpm_sealdata_sa -i ${secret} -o ${tss}.sha1 \
            -z ${pcr_params} 2>&1)
        return $?
    fi
}

tpm_forward_seal() {
    local root=""
    local forward_values=""
    local hashalg="sha1"
    local pcrs=""
    local pcr_params=""
    local OPTIND
    local opt
    local p
    is_tpm_2_0
    local tpm2=$?

    while getopts ":a:r:p:" opt; do
        case "${opt}" in
            a)
                hashalg=${OPTARG}
            ;;
            r)
                root=${OPTARG}
            ;;
            p)
                pcrs="${pcrs} ${OPTARG}"
            ;;
        esac
    done
    shift $((OPTIND-1))

    local key="${root}/${1}"
    local tss="${root}/${2}"

    for p in ${pcrs}; do
        if [[ "${tpm2}" -eq 0 ]]; then
            pcr_params="${pcr_params} -r ${p}"
        else
            pcr_params="${pcr_params} -p ${p}"
        fi
    done

    if [ "${tpm2}" -eq 0 ];
    then
        seal_file=${key}
        clean_old_tpm_files
        if pcr_bank_exists "TPM_ALG_SHA256"; then
            tpm2_sealdata -H 0x81000000 -I ${seal_file} -O ${tss}.sha256 -o ${tss}.pub.sha256 -g 0xB -G 8 -b 0x492 ${pcr_params} 2>&1
            err=$?
            if [ $err -ne 0 ]; then return $err; fi
        fi
        [ -e ${tss} ] || [ -e ${tss}.sha256 ] && return 0
        return 1
    else
        /etc/init.d/trousers status > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            tpm_sealdata_sa -i ${key} -o ${tss} -z ${pcr_params} 2>&1
            return $?
        else
            tpm_sealdata -i ${key} -o ${tss} -z ${pcr_params} 2>&1
            return $?
        fi
    fi
}

tpm_unseal() {
    local root=""
    local hashalg="sha1"
    local pcrs=""
    local pcr_params=""
    local OPTIND
    local opt

    while getopts ":a:r:p:" opt; do
        case "${opt}" in
            a)
                hashalg=${OPTARG}
            ;;
            r)
                root=${OPTARG}
            ;;
            p)
                pcrs="${pcrs} ${OPTARG}"
            ;;
        esac
    done
    shift $((OPTIND-1))

    local tss="${root}/${1}"

    is_tpm_2_0
    if [ $? -eq 0 ]; then
        for p in ${pcrs}; do
            pcr_params="${pcr_params} -r ${p}"
        done

        pcr_bank_exists "TPM_ALG_$(echo $hashalg|tr [a-z] [A-Z])"
        [ $? -eq 0 ] || return 1

        case $hashalg in
        sha1)
            tpm2_unsealdata -H 0x81000001 -n "${tss}.sha1" \
                -u "${tss}.pub.sha1" -g 0x4 ${pcr_params} 2>/dev/null
            return $?
        ;;
        sha256)
            tpm2_unsealdata -H 0x81000000 -n "${tss}.sha256" \
                -u "${tss}.pub.sha256" -g 0xB ${pcr_params} 2>/dev/null
            return $?
        ;;
        *)
            return 1
        ;;
        esac
    else
        tpm_unsealdata_sa -z -i $tss 2>/dev/null
        ret=$?
    fi

}

QUIRK_D="/usr/lib/tpm-scripts/quirks.d"

[ -d "${QUIRK_D}" ] || {
    echo "no quirk.d directory: ${QUIRK_D}, fail" >&2
    exit 1
}

# run *-detect.sh scripts from QUIRK_D directory
# execute callbacks based on quirk script exit status
# return status
#   0 : either no quirks or only quirks with workarounds
#   1 : platform has fatal quirks (quirks with no workarounds)
#       or caller has chosen to make non-fatal quirks fatal
#   2 : error condition: unexpected value returned from quirk detect script
#   3 : missing / bad parameter
quirk_detect () {
    local fptr_info="$1"
    local fptr_fatal="$2"
    local msg=""
    local ret=0

    [ -z ${fptr_info} ] && {
        echo "No quirk \"info\" callback provided."
        return 3
    }
    [ -z ${fptr_fatal} ] && {
        echo "No quirk \"fatal\" callback provided."
        return 3
    }

    for detect in $(ls -1 "${QUIRK_D}"/*-detect.sh); do
        msg=$(${detect} 2>&1)
        case $? in
            # no quirk
            0)  ;;
            # quirk: work around exists, call 'info' function
            # exit if 'info' function returns anything but 0
            #   this is a way for calling script to reject quirk work around
            1)  ${fptr_info} "${msg}"
                ret=$?
                [ ${ret} -ne 0 ] && return "${ret}"
                ;;
            # quirk: no work around
            2)  ${fptr_fatal} "${msg}"
                ret=$?
                [ ${ret} -eq 0 ] && return 1
                echo "ignoring fatal quirk, this is a bad idea ..."
                ;;
            # error condition, bad quirk script
            *)  echo "unexpected return value from quirk detect script: ${detect}" >&2
                return 2
                ;;
        esac
    done
    return 0
}

# run *-fix.sh scripts from QUIRK_D directory
# return status
#   0 : all fixes successful
#   1 : fix script returned non-zero status, error message is sent to stderr
#   2 : internal error
quirk_fix () {
    local root="${1:-/}"
    local ignore_errs="${2:-false}"
    local detect=""
    local fix=""
    local quirk_name=""
    local msg=""

    [ -d "${root}" ] || {
        echo "quirk_fix root param is not a directory: ${root}" >&2
        return 2
    }

    for fix in $(ls -1 "${QUIRK_D}"/*-fix.sh); do
        # run detect script
        quirk_name=$(echo "${fix}" | sed -e "s&${QUIRK_D}/\(.*\)-fix.sh&\1&")
        detect="${QUIRK_D}/${quirk_name}-detect.sh"
        [ -x "${detect}" ] || {
            echo "Quirk ${quirk_name} has no detect script, abort." >&2
            return 0
        }
        msg=$(${detect} 2>&1)
        case $? in
            0)  break ;; # quirk doesn't apply, break
            1)  ;;       # quirk does apply, NOOP
            2)  echo "Quirk deetct script ${detect} reports quirk is fatal but a fix script exists.  Not applying fix.  Consult quirk documentation."
                break
                ;;
            *)  echo "Error code returned from quirk detect script: ${detect}."
                break
                ;;
        esac
        # run fix script
        msg=$(${fix} "${root}" 2>&1)
        case $? in
            0)  ;;
            *)  [ "${ignore_errs}" != "true" ] && {
                    echo "Error returned by ML Quirk fix script: ${fix}.  Error message: ${msg}" >&2
                    return 1
                }
                ;;
        esac
    done
}
