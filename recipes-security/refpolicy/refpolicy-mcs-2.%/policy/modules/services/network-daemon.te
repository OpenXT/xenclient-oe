#############################################################################
#
# Copyright (C) 2014 Citrix Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#############################################################################

policy_module(network-daemon, 0.1)

########################################
#
# Declarations
#

type network_daemon_t;
type network_daemon_exec_t;
init_daemon_domain(network_daemon_t, network_daemon_exec_t)

type network_slave_t;
type network_slave_exec_t;
init_daemon_domain(network_slave_t, network_slave_exec_t)

#######################################
#
# Network Daemon Local Policy
#
corecmd_exec_bin(network_daemon_t)
corecmd_exec_shell(network_daemon_t)
files_read_etc_files(network_daemon_t)
kernel_read_system_state(network_daemon_t)
sysnet_domtrans_dhcpc(network_daemon_t)
sysnet_domtrans_ifconfig(network_daemon_t)
sysnet_read_dhcpc_pid(network_daemon_t)
sysnet_signal_dhcpc(network_daemon_t)
dbus_connect_system_bus(network_daemon_t)
dbus_system_bus_client(network_daemon_t)
rpcproxy_dbus_chat(network_daemon_t)
rpcproxy_websockets_dbus_chat(network_daemon_t)
xen_dbus_chat(network_daemon_t)
xen_stream_connect_xenstore(network_daemon_t)
dbd_dbus_chat(network_daemon_t)
xen_geattr_config_files(network_daemon_t)
fs_rw_xenfs_files(network_daemon_t)

xc_files_rw_argo_chr(network_daemon_t)
xc_config_dir_search(network_daemon_t)
xc_getattr_service_disk_dir(network_daemon_t)
xc_search_storage(network_daemon_t)

# nwd uses xl for creating/destroying vifs
xen_domtrans_xm(network_daemon_t)

# xenops
# dac_override caused by /proc/xen being 555
#   and /proc/xen/privcmd being 400
allow network_daemon_t self:capability dac_override;
kernel_read_xen_state(network_daemon_t)
kernel_write_xen_state(network_daemon_t)

# ifconfig: OE uses busybox version so we can't transition ifconfig domain
kernel_read_network_state(network_daemon_t)
allow network_daemon_t self:dgram_socket_class_set create_socket_perms;
allow network_daemon_t self:capability net_admin;

# killall: this feels like a very slippery slope
init_read_state(network_daemon_t)
kernel_read_state(network_daemon_t)
allow network_daemon_t self:capability sys_ptrace;

logging_send_syslog_msg(network_daemon_t)

networkmanager_xc_config_filetrans(network_daemon_t)

manage_fifo_files_pattern(network_daemon_t, network_daemon_t, network_daemon_t)
allow network_daemon_t self:capability ipc_lock;
allow network_daemon_t self:process signal;

#######################################
#
# Network Slave Local Policy
#
brctl_domtrans(network_slave_t)
iptables_domtrans(network_slave_t)
networkmanager_domtrans(network_slave_t)
sysnet_domtrans_ifconfig(network_slave_t)

dbus_connect_system_bus(network_slave_t)
dbus_system_bus_client(network_slave_t)
dbusbouncer_dbus_chat(network_slave_t)
network_slave_dbus_chat(network_slave_t)
networkmanager_dbus_chat(network_slave_t)
dev_read_sysfs(network_slave_t)

dnsmasq_domtrans(network_slave_t)
dnsmasq_manage_config(network_slave_t)

xc_search_storage(network_slave_t)
xen_stream_connect_xenstore(network_slave_t)
xc_getattr_service_disk_dir(network_slave_t)
corecmd_exec_bin(network_slave_t)
corecmd_exec_shell(network_slave_t)
# manage network manager config
networkmanager_manage_etc(network_slave_t)
files_manage_etc_dirs(network_slave_t)
files_manage_etc_files(network_slave_t)
files_read_usr_files(network_slave_t)
kernel_read_network_state(network_slave_t)
kernel_read_sysctl(network_slave_t)
kernel_read_system_state(network_slave_t)
kernel_rw_net_sysctls(network_slave_t)
networkmanager_manage_lib_files(network_slave_t)

# xenbus
allow network_slave_t self:capability dac_override;
kernel_read_xen_state(network_slave_t)
kernel_write_xen_state(network_slave_t)
fs_rw_xenfs_files(network_slave_t)
# xen 4.6 uses /dev/xen/xenbus
dev_rw_xen(network_slave_t)

sysnet_manage_config(network_slave_t)
read_fifo_files_pattern(network_slave_t, network_slave_t, network_slave_t)
logging_send_syslog_msg(network_slave_t)

db_cmd_exec(network_slave_t)
xc_files_rw_argo_chr(network_slave_t)
networkmanager_read_etc_rw(network_slave_t)

allow network_slave_t self:capability net_admin;
allow network_slave_t self:dgram_socket_class_set create_socket_perms;
allow network_slave_t self:fifo_file rw_fifo_file_perms;
allow network_slave_t self:netlink_route_socket rw_netlink_socket_perms;
allow network_slave_t self:process signal;
allow network_slave_t network_slave_exec_t:file execute_no_trans;

# Ignore CAP_IPC_LOCK denial triggered by mmap(MAP_LOCKED);
# the operation will still succeed.  See the following kernel commit:
# http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a5a6579db33af91f4f5134e14be758dc71c1b694
dontaudit network_slave_t self:capability ipc_lock;
