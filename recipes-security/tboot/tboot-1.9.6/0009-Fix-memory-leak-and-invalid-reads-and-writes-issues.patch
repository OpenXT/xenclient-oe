From 7265f9b190a63d5948d7bef6a33fd9f656bf71e3 Mon Sep 17 00:00:00 2001
From: Ning Sun <ning.sun@intel.com>
Date: Thu, 15 Mar 2018 09:38:04 -0700
Subject: [PATCH 09/22] Fix memory leak and invalid reads and writes issues.

When setting BIGNUM pointers in RSA structures then the ownership of
them is transferred into the RSA object. RSA_free() is enough to free
all of them.

When getting BIGNUM pointers from RSA structures then the ownership
remains with the RSA object. There is no need to allocate the BIGNUMs
before, or free them afterwards.

BN_bin2bn with NULL as third parameter returns a newly allocated BIGNUM.

Signed-off-by: Matthias Gerstner <mgerstner@suse.de>
Reviewed-by: Ning Sun <ning.sun@intel.com>
(cherry picked from commit 97f081b66033c3cf844207a6479eb9a87f699ccd)
---
 lcptools-v2/crtpollist.c | 24 +++++++++++++-----------
 lcptools-v2/lcputils.c   | 22 ++++------------------
 lcptools/crtpollist.c    |  8 ++++----
 lcptools/lcputils2.c     | 14 ++++----------
 4 files changed, 25 insertions(+), 43 deletions(-)

diff --git a/lcptools-v2/crtpollist.c b/lcptools-v2/crtpollist.c
index 3a9d349..44a744a 100644
--- a/lcptools-v2/crtpollist.c
+++ b/lcptools-v2/crtpollist.c
@@ -132,6 +132,7 @@ static lcp_signature_t2 *read_rsa_pubkey_file(const char *file)
     if ( fp == NULL ) {
         ERROR("Error: failed to open .pem file %s: %s\n", file,
                 strerror(errno));
+        fclose(fp);
         return NULL;
     }
 
@@ -141,6 +142,7 @@ static lcp_signature_t2 *read_rsa_pubkey_file(const char *file)
         ERROR("Error: failed to read .pem file %s: %s\n", file,
                 ERR_error_string(ERR_get_error(), NULL));
         ERR_free_strings();
+        fclose(fp);
         return NULL;
     }
 
@@ -148,6 +150,7 @@ static lcp_signature_t2 *read_rsa_pubkey_file(const char *file)
     if ( keysize == 0 ) {
         ERROR("Error: public key size is 0\n");
         RSA_free(pubkey);
+        fclose(fp);
         return NULL;
     }
 
@@ -155,19 +158,19 @@ static lcp_signature_t2 *read_rsa_pubkey_file(const char *file)
     if ( sig == NULL ) {
         ERROR("Error: failed to allocate sig\n");
         RSA_free(pubkey);
+        fclose(fp);
         return NULL;
     }
-
+    const BIGNUM *modulus = NULL;
     memset(sig, 0, sizeof(lcp_rsa_signature_t) + 2*keysize);
     sig->rsa_signature.pubkey_size = keysize;
 
     /* OpenSSL Version 1.1.0 and later don't allow direct access to RSA 
        stuct */    
     #if OPENSSL_VERSION_NUMBER >= 0x10100000L
-        BIGNUM *modulus = BN_new();
-        RSA_get0_key(pubkey, (const BIGNUM **)&modulus, NULL, NULL); 
+        RSA_get0_key(pubkey, &modulus, NULL, NULL);
     #else
-        BIGNUM *modulus = BN_dup(pubkey->n);
+        modulus = pubkey->n;
     #endif
 
     unsigned char key[keysize];
@@ -183,8 +186,8 @@ static lcp_signature_t2 *read_rsa_pubkey_file(const char *file)
     }
 
     LOG("read rsa pubkey succeed!\n");
-    BN_free(modulus);
     RSA_free(pubkey);
+    fclose(fp);
     return sig;
 }
 
@@ -386,13 +389,13 @@ static bool ecdsa_sign_tpm20_list_data(lcp_policy_list_t2 *pollist, EC_KEY *ecke
             return false;
         }
 
-        BIGNUM *r = BN_new();
-        BIGNUM *s = BN_new();
-        
+        const BIGNUM *r = NULL;
+        const BIGNUM *s = NULL; 
+
 	/* OpenSSL Version 1.1.0 and later don't allow direct access to 
 	   ECDSA_SIG stuct */ 
         #if OPENSSL_VERSION_NUMBER >= 0x10100000L
-      	    ECDSA_SIG_get0(ecdsasig, (const BIGNUM **)&r, (const BIGNUM **)&s);
+            ECDSA_SIG_get0(ecdsasig, &r, &s);
         #else
     	    r = ecdsasig->r;
     	    s = ecdsasig->s;
@@ -415,8 +418,7 @@ static bool ecdsa_sign_tpm20_list_data(lcp_policy_list_t2 *pollist, EC_KEY *ecke
             display_tpm20_signature("    ", sig, pollist->sig_alg, false);
         }
 
-	BN_free(r);
-	BN_free(s);
+        ECDSA_SIG_free(ecdsasig);
         return true;
     }
     return false;
diff --git a/lcptools-v2/lcputils.c b/lcptools-v2/lcputils.c
index a81a02f..981b9f8 100644
--- a/lcptools-v2/lcputils.c
+++ b/lcptools-v2/lcputils.c
@@ -444,9 +444,8 @@ bool verify_signature(const uint8_t *data, size_t data_size,
         return false;
     }
 
-    BIGNUM *modulus = BN_new();
+    BIGNUM *modulus = BN_bin2bn(key, pubkey_size, NULL);
     BIGNUM *exponent = BN_new();
-    modulus = BN_bin2bn(key, pubkey_size, NULL);
 
     /* uses fixed exponent (LCP_SIG_EXPONENT) */
     char exp[32];
@@ -457,8 +456,8 @@ bool verify_signature(const uint8_t *data, size_t data_size,
     #if OPENSSL_VERSION_NUMBER >= 0x10100000L
         RSA_set0_key(rsa_pubkey, modulus, exponent, NULL); 
     #else
-        rsa_pubkey->n = BN_dup(modulus);
-        rsa_pubkey->e = BN_dup(exponent);
+        rsa_pubkey->n = modulus;
+        rsa_pubkey->e = exponent;
         rsa_pubkey->d = rsa_pubkey->p = rsa_pubkey->q = NULL;
     #endif
 
@@ -480,8 +479,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
     tb_hash_t digest;
     if ( !hash_buffer(data, data_size, &digest, hashalg) ) {
         ERROR("Error: failed to hash list\n");
-	BN_free(modulus);
-	BN_free(exponent);
         RSA_free(rsa_pubkey);
         return false;
     }
@@ -524,8 +521,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
             ERROR("Error: failed to verify list: %s\n", 
                     ERR_error_string(ERR_get_error(), NULL));
             ERR_free_strings();
-	    BN_free(modulus);
-	    BN_free(exponent);
             RSA_free(rsa_pubkey);
             return false;
         }
@@ -540,8 +535,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
             ERROR("Error: failed to verify list: %s\n", 
                     ERR_error_string(ERR_get_error(), NULL));
             ERR_free_strings();
-	    BN_free(modulus);
-	    BN_free(exponent);
             RSA_free(rsa_pubkey);
             return false;
         }
@@ -556,8 +549,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
             ERROR("Error: failed to verify list: %s\n", 
                     ERR_error_string(ERR_get_error(), NULL));
             ERR_free_strings();
-	    BN_free(modulus);
-	    BN_free(exponent);
             RSA_free(rsa_pubkey);
             return false;
         }
@@ -572,8 +563,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
             ERROR("Error: failed to verify list: %s\n", 
                     ERR_error_string(ERR_get_error(), NULL));
             ERR_free_strings();
-	    BN_free(modulus);
-	    BN_free(exponent);
             RSA_free(rsa_pubkey);
             return false;
         }
@@ -581,13 +570,10 @@ bool verify_signature(const uint8_t *data, size_t data_size,
 
     default :
         LOG("unknown hash alg\n");
-	BN_free(modulus);
-	BN_free(exponent);
         return false;
+        RSA_free(rsa_pubkey);
     }
 
-    BN_free(modulus);
-    BN_free(exponent);
     RSA_free(rsa_pubkey);
     return true;
 }
diff --git a/lcptools/crtpollist.c b/lcptools/crtpollist.c
index 01c45f1..52cb8d1 100644
--- a/lcptools/crtpollist.c
+++ b/lcptools/crtpollist.c
@@ -156,13 +156,14 @@ static lcp_signature_t *read_pubkey_file(const char *file)
     memset(sig, 0, sizeof(*sig) + 2*keysize);
     sig->pubkey_size = keysize;
 
+    const BIGNUM *modulus = NULL;
+
     /* OpenSSL Version 1.1.0 and later don't allow direct access to RSA 
        stuct */ 
     #if OPENSSL_VERSION_NUMBER >= 0x10100000L
-        BIGNUM *modulus = BN_new();
-        RSA_get0_key(pubkey, (const BIGNUM **)&modulus, NULL, NULL); 
+        RSA_get0_key(pubkey, &modulus, NULL, NULL); 
     #else
-        BIGNUM *modulus = BN_dup(pubkey->n);
+        modulus = pubkey->n;
     #endif
     unsigned char key[keysize];
     BN_bn2bin(modulus, key);
@@ -176,7 +177,6 @@ static lcp_signature_t *read_pubkey_file(const char *file)
         display_signature("    ", sig, false);
     }
  
-    BN_free(modulus);
     RSA_free(pubkey);
     return sig;
 }
diff --git a/lcptools/lcputils2.c b/lcptools/lcputils2.c
index 797b71d..30447ad 100644
--- a/lcptools/lcputils2.c
+++ b/lcptools/lcputils2.c
@@ -274,9 +274,9 @@ bool verify_signature(const uint8_t *data, size_t data_size,
         ERROR("Error: failed to allocate key\n");
         return false;
     }
-    BIGNUM *modulus = BN_new();
+    
+    BIGNUM *modulus = BN_bin2bn(key, pubkey_size, NULL);
     BIGNUM *exponent = BN_new();
-    modulus = BN_bin2bn(key, pubkey_size, NULL);
 
     /* uses fixed exponent (LCP_SIG_EXPONENT) */
     char exp[32];
@@ -288,8 +288,8 @@ bool verify_signature(const uint8_t *data, size_t data_size,
     #if OPENSSL_VERSION_NUMBER >= 0x10100000L
         RSA_set0_key(rsa_pubkey, modulus, exponent, NULL); 
     #else
-      	rsa_pubkey->n = BN_dup(modulus);
-    	rsa_pubkey->e = BN_dup(exponent);
+      	rsa_pubkey->n = modulus;
+    	rsa_pubkey->e = exponent;
   	rsa_pubkey->d = rsa_pubkey->p = rsa_pubkey->q = NULL;
     #endif
 
@@ -297,8 +297,6 @@ bool verify_signature(const uint8_t *data, size_t data_size,
     tb_hash_t digest;
     if ( !hash_buffer(data, data_size, &digest, TB_HALG_SHA1_LG) ) {
         ERROR("Error: failed to hash list\n");
-        BN_free(modulus);
-	BN_free(exponent);
         RSA_free(rsa_pubkey);
         return false;
     }
@@ -339,14 +337,10 @@ bool verify_signature(const uint8_t *data, size_t data_size,
         ERROR("Error: failed to verify list: %s\n", 
               ERR_error_string(ERR_get_error(), NULL));
         ERR_free_strings();
-        BN_free(modulus);
-	BN_free(exponent);
 	RSA_free(rsa_pubkey);
         return false;
     }
     
-    BN_free(modulus);
-    BN_free(exponent);
     RSA_free(rsa_pubkey);
     return true;
 }
-- 
2.16.1

