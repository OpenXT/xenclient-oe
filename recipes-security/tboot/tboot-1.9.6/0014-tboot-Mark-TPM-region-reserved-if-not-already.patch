From d8a47c4cc0b37c33f0a0c45719380c632e6472a1 Mon Sep 17 00:00:00 2001
From: Eric Chanudet <chanudete@ainfosec.com>
Date: Mon, 13 Aug 2018 12:02:19 -0400
Subject: [PATCH 14/22] tboot: Mark TPM region reserved if not already.

TPM specification defines one region @0xfed40000-0xfed44fff.  Given a
32bits dom0 with "enough" memory (dom_mem=>4G), it is likely that the
kernel will try to use every last region for RAM, even in upper 32bit
regions.

For some reason, BIOS in HPs or Dells do not report that region in the
e820 as reserved.  It is only reported in one of the SSDT. This patch
tries to work that around by doing so in TBoot.

Signed-off-by: Eric Chanudet <chanudete@ainfosec.com>
---
 tboot/common/tboot.c |  3 +++
 tboot/common/tpm.c   | 31 +++++++++++++++++++++++++++++++
 tboot/include/tpm.h  |  1 +
 3 files changed, 35 insertions(+)

diff --git a/tboot/common/tboot.c b/tboot/common/tboot.c
index 2292227..67be4f0 100644
--- a/tboot/common/tboot.c
+++ b/tboot/common/tboot.c
@@ -192,6 +192,9 @@ static void post_launch(void)
     if ( !verify_modules(g_ldr_ctx) )
         apply_policy(TB_ERR_POST_LAUNCH_VERIFICATION);
 
+    /* mark iomem regions of TPM as E820_RESERVED. */
+    tpm_protect_mem_regions();
+
     /* verify that tboot is in valid RAM (i.e. E820_RAM) */
     base = (uint64_t)TBOOT_BASE_ADDR;
     size = (uint64_t)((unsigned long)&_end - base);
diff --git a/tboot/common/tpm.c b/tboot/common/tpm.c
index 5831ea6..e02d1d5 100644
--- a/tboot/common/tpm.c
+++ b/tboot/common/tpm.c
@@ -42,6 +42,10 @@
 #include <processor.h>
 #include <io.h>
 #include <string.h>
+#include <page.h>
+#include <uuid.h>
+#include <loader.h>
+#include <e820.h>
 #include <tpm.h>
 #include <sha1.h>
 
@@ -913,6 +917,33 @@ const struct tpm_if_fp *get_tpm_fp(void)
     return NULL;
 
 }
+
+void tpm_protect_mem_regions(void)
+{
+    /* TPM specification defines one region @0xfed40000-0xfed44fff.
+     * Given a 32bits dom0 with "enough" memory (dom_mem=>4G), it is likely
+     * that the kernel will try to use every last region for RAM, even in upper
+     * 32bit regions.
+     * For some reason, the BIOS does not report that region in the e820 as
+     * reserved. It is only reported in one of the SSDT.
+     * There is many way to deal with that problem:
+     * - add memmap=0x5000$0xfed40000 to Linux (dom0) cmdline
+     * - patch Linux dom0 memory layout management to leave that region alone.
+     * - Have the tpm_tis driver ioremap that region without checking if the
+     *   kernel used it for something else (devm_ioremap() instead of
+     *   devm_ioremap_resource(), the later being used since around 4.6).
+     * - Or have tboot change the e820 to mark that region reserved...
+     */
+    uint64_t base = TPM_LOCALITY_BASE;
+    uint64_t size = (NR_TPM_LOCALITY_PAGES * TPM_NR_LOCALITIES) << PAGE_SHIFT;
+
+    printk(TBOOT_INFO"Marking TPM region [%#llx-%#llx] as reserved...\n",
+           base, base + size - 1);
+    if ( !e820_protect_region(base, size, E820_RESERVED) )
+        printk(TBOOT_WARN"TPM region [%#llx-%#llx] is not reserved.\n",
+               base, base + size - 1);
+}
+
 /*
  * Local variables:
  * mode: C
diff --git a/tboot/include/tpm.h b/tboot/include/tpm.h
index bf49d53..4cd9b25 100644
--- a/tboot/include/tpm.h
+++ b/tboot/include/tpm.h
@@ -503,6 +503,7 @@ extern bool release_locality(uint32_t locality);
 extern bool prepare_tpm(void);
 extern bool tpm_detect(void);
 extern void tpm_print(struct tpm_if *ti);
+void tpm_protect_mem_regions(void);
 extern bool tpm_submit_cmd(u32 locality, u8 *in, u32 in_size, u8 *out, u32 *out_size);
 extern bool tpm_submit_cmd_crb(u32 locality, u8 *in, u32 in_size, u8 *out, u32 *out_size);
 extern bool tpm_wait_cmd_ready(uint32_t locality);
-- 
2.16.1

