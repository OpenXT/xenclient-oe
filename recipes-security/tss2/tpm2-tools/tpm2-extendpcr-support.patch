################################################################################
SHORT DESCRIPTION:
################################################################################
Add tpm2_extendpcr binary.

################################################################################
LONG DESCRIPTION:
################################################################################

################################################################################
CHANGELOG
################################################################################
Add tpm2_extendpcr: Chris Rogers <rogersc@ainfosec.com>
Uprev from v2.0.0 to v3.1.3: Nicholas Tsirakis <tsirakisn@ainfosec.com>

################################################################################
REMOVAL
################################################################################
The upstream tpm2-tools added their own tpm2_pcrextend tool in
version 3.X.Y. This patch can be removed if that tool provides
the same functionality, though it is currently untested.

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################

commit 3978a8c5f05f5b35c34bd63e974493044ae4df6e
Author: Nicholas Tsirakis <tsirakisn@ainfosec.com>
Date:   Thu May 24 16:05:16 2018 -0400

    Apply tpm2-extendpcr-support patch

--- a/Makefile.am
+++ b/Makefile.am
@@ -75,7 +75,6 @@ bin_PROGRAMS = \
     tools/tpm2_nvrelease \
     tools/tpm2_nvwrite \
     tools/tpm2_pcrevent \
-    tools/tpm2_pcrextend \
     tools/tpm2_pcrlist \
     tools/tpm2_quote \
     tools/tpm2_rc_decode \
@@ -169,7 +168,6 @@ tools_tpm2_rsaencrypt_SOURCES = tools/tp
 tools_tpm2_sign_SOURCES = tools/tpm2_sign.c $(TOOL_SRC)
 tools_tpm2_unseal_SOURCES = tools/tpm2_unseal.c $(TOOL_SRC)
 tools_tpm2_dictionarylockout_SOURCES = tools/tpm2_dictionarylockout.c $(TOOL_SRC)
-tools_tpm2_pcrextend_SOURCES = tools/tpm2_pcrextend.c $(TOOL_SRC)
 tools_tpm2_pcrevent_SOURCES = tools/tpm2_pcrevent.c $(TOOL_SRC)
 tools_tpm2_rc_decode_SOURCES = tools/tpm2_rc_decode.c $(TOOL_SRC)
 tools_tpm2_extendpcr_SOURCES = tools/tpm2_extendpcr.c $(TOOL_SRC)
--- /dev/null
+++ b/tools/tpm2_extendpcr.c
@@ -0,0 +1,192 @@
+//**********************************************************************;
+// Copyright (c) 2015, Intel Corporation
+// Copyright (c) 2017, Assured Information Security
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+// this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+// this list of conditions and the following disclaimer in the documentation
+// and/or other materials provided with the distribution.
+//
+// 3. Neither the name of Intel Corporation nor the names of its contributors
+// may be used to endorse or promote products derived from this software without
+// specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+// THE POSSIBILITY OF SUCH DAMAGE.
+//**********************************************************************;
+
+#include <stdarg.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <limits.h>
+#include <ctype.h>
+#include <getopt.h>
+
+#include <tss2/tss2_sys.h>
+#include <tss2/tss2_tcti_mssim.h>
+#include "pcr.h"
+#include "log.h"
+#include "tpm_session.h"
+#include "tpm2_options.h"
+#include "tpm2_util.h"
+
+typedef struct tpm_extendpcr_ctx tpm_extendpcr_ctx;
+struct tpm_extendpcr_ctx {
+    BYTE byteHash[TPM2_SHA512_DIGEST_SIZE];
+    TPMI_ALG_HASH algorithmId;
+    UINT32 pcr;
+
+    struct {
+        UINT16 g : 1;
+        UINT16 s : 1;
+        UINT16 c : 1;
+    } flags;
+};
+
+static tpm_extendpcr_ctx ctx = {
+    .algorithmId = 0,
+    .pcr = -1
+};
+
+int pcr_extend(TSS2_SYS_CONTEXT *sapi_context) {
+    TPMS_AUTH_COMMAND sessionData;
+    TSS2L_SYS_AUTH_COMMAND sessionsData;
+    TPML_PCR_SELECTION pcrSelection;
+    TPML_DIGEST_VALUES digests;
+    TSS2_RC rval;
+
+    sessionsData.auths[0] = sessionData;
+
+    sessionData.sessionHandle = TPM2_RS_PW;
+
+    sessionData.nonce.size = 0;
+    sessionData.hmac.size = 0;
+
+    *( (UINT8 *)((void *)&sessionData.sessionAttributes ) ) = 0;
+
+    digests.count = 1;
+    digests.digests[0].hashAlg = ctx.algorithmId;
+
+    switch (ctx.algorithmId) {
+
+        case TPM2_ALG_SHA1:
+            memcpy(digests.digests[0].digest.sha1, ctx.byteHash, TPM2_SHA1_DIGEST_SIZE);
+            break;
+        case TPM2_ALG_SHA256:
+            memcpy(digests.digests[0].digest.sha256, ctx.byteHash, TPM2_SHA256_DIGEST_SIZE);
+            break;
+        case TPM2_ALG_SHA384:
+            memcpy(digests.digests[0].digest.sha384, ctx.byteHash, TPM2_SHA384_DIGEST_SIZE);
+            break;
+        case TPM2_ALG_SHA512:
+            memcpy(digests.digests[0].digest.sha512, ctx.byteHash, TPM2_SHA512_DIGEST_SIZE);
+            break;
+        case TPM2_ALG_SM3_256:
+            memcpy(digests.digests[0].digest.sha1, ctx.byteHash, TPM2_SM3_256_DIGEST_SIZE);
+            break;
+        default:
+            LOG_ERR("Invalid algorithm.  Exiting");
+            return -1;
+    }
+
+    pcrSelection.count = 1;
+    pcrSelection.pcrSelections[0].hash = ctx.algorithmId;
+    pcrSelection.pcrSelections[0].sizeofSelect = 3;
+
+    CLEAR_PCR_SELECT_BITS(pcrSelection.pcrSelections[0]);
+
+    SET_PCR_SELECT_BIT(pcrSelection.pcrSelections[0], ctx.pcr);
+
+    sessionsData.count = 1;
+    sessionsData.auths[0] = sessionData;
+
+    rval = Tss2_Sys_PCR_Extend( sapi_context, ctx.pcr, &sessionsData, &digests, 0 );
+    if( rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("Failed to extend PCR: %d\n", ctx.pcr);
+        return -2;
+    }
+    return 0;
+}
+
+static bool on_option(char key, char *value) {
+
+    UINT16 size;
+
+    switch(key) {
+    case 's':
+        size = strlen(value); //set initial size of hash, hex2Byte will fail if size is wrong
+        if(tpm2_util_hex_to_byte_structure(value, &size, ctx.byteHash) != 0) {
+            LOG_ERR("Invalid hex value.\n");
+            return false;
+        }
+        ctx.flags.s = 1;
+        break;
+    case 'c':
+        if (pcr_get_id(value, &ctx.pcr)) {
+            LOG_ERR("Invalid pcr value.\n");
+            return false;
+        }
+        ctx.flags.c = 1;
+        break;
+    case 'g':
+        if(!tpm2_util_string_to_uint16(value, &ctx.algorithmId)) {
+            return false;
+        }
+        ctx.flags.g = 1;
+        break;
+    case ':':
+        return false;
+    case '?':
+        return false;
+    }
+
+    return true;
+}
+
+bool tpm2_tool_onstart(tpm2_options **opts) {
+
+    const struct option topts[] = {
+        {"algorithm", required_argument, NULL, 'g'},
+        {"hash",      required_argument, NULL, 's'},
+        {"pcr",       required_argument, NULL, 'c'}
+    };
+
+    *opts = tpm2_options_new("g:s:c:", ARRAY_LEN(topts), topts,
+            on_option, NULL, TPM2_OPTIONS_SHOW_USAGE);
+
+    return *opts != NULL;
+}
+
+int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sapi_context, tpm2_option_flags flags) {
+
+    UNUSED(flags);
+
+    int returnVal;
+    int flagCnt = 0;
+    flagCnt = ctx.flags.g + ctx.flags.s + ctx.flags.c;
+
+    if(flagCnt < 3) {
+        return -10;
+    }
+
+    returnVal = pcr_extend(sapi_context);
+
+    return returnVal;
+}
