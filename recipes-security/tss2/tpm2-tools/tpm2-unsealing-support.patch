################################################################################
SHORT DESCRIPTION:
################################################################################
Add tpm2_unsealdata binary.

################################################################################
LONG DESCRIPTION:
################################################################################

Add tpm2_unsealdata binary to unseal data that was sealed with
tpm2_sealdata.

Note that this patch absorbed the tools/tpm2_unsealdata.c changes
from the old tpm2-fix-forward-seal.patch.

################################################################################
CHANGELOG
################################################################################
Add tpm2_unsealdata: Chris Rogers <rogersc@ainfosec.com>
Uprev from v2.0.0 to v3.1.3: Nicholas Tsirakis <tsirakisn@ainfosec.com>

################################################################################
REMOVAL
################################################################################
The upstream tpm2-tools added their own tpm2_unseal tool in
version 3.X.Y. This patch can be removed if that tool provides
the same functionality, though it is currently untested.

################################################################################
UPSTREAM PLAN
################################################################################

################################################################################
INTERNAL DEPENDENCIES
################################################################################

################################################################################
PATCHES
################################################################################

commit 022bdc2cfb6fb672c5278d18030b8a593e03e75b
Author: Nicholas Tsirakis <tsirakisn@ainfosec.com>
Date:   Tue May 22 18:14:27 2018 -0400

    Apply tpm2-unsealing-support patch

--- /dev/null
+++ b/tools/tpm2_unsealdata.c
@@ -0,0 +1,289 @@
+//**********************************************************************;
+// Copyright (c) 2015, Intel Corporation
+// Copyright (c) 2017, Assured Information Security
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+// this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+// this list of conditions and the following disclaimer in the documentation
+// and/or other materials provided with the distribution.
+//
+// 3. Neither the name of Intel Corporation nor the names of its contributors
+// may be used to endorse or promote products derived from this software without
+// specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+// THE POSSIBILITY OF SUCH DAMAGE.
+//**********************************************************************;
+
+#include <stdarg.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <string.h>
+#include <limits.h>
+#include <ctype.h>
+#include <getopt.h>
+
+#include <tss2/tss2_sys.h>
+#include <tss2/tss2_tcti_mssim.h>
+#include "pcr.h"
+#include "log.h"
+#include "tpm2_options.h"
+#include "tpm2_util.h"
+#include "tpm2_alg_util.h"
+#include "tpm_session.h"
+#include "shared.h"
+#include "files.h"
+
+TPM2_HANDLE handle2048rsa;
+
+typedef struct tpm_unsealdata_ctx tpm_unsealdata_ctx;
+struct tpm_unsealdata_ctx {
+    TPMI_ALG_HASH nameAlg;
+    TPMI_DH_OBJECT itemHandle;
+    TPMS_AUTH_COMMAND session_data;
+    TPM2B_PUBLIC  in_public;
+    TPM2B_PRIVATE in_private;
+    UINT32 pcr;
+    INT32 pcrCount;
+    pcr_struct * pcrList[24];
+    bool hash_set;
+    bool hexPasswd;
+
+    struct {
+        UINT16 H : 1;
+        UINT16 P : 1;
+        UINT16 r : 1;
+        UINT16 u : 1;
+        UINT16 g : 1;
+        UINT16 n : 1;
+        UINT16 X : 1;
+    } flags;
+};
+
+static tpm_unsealdata_ctx ctx = {
+    .session_data = TPMS_AUTH_COMMAND_INIT(TPM2_RS_PW),
+    .pcr = -1,
+    .pcrCount = 0,
+    .hash_set = false,
+    .hexPasswd = false
+};
+
+UINT32 load(TSS2_SYS_CONTEXT *sapi_context)
+{
+    UINT32 rval;
+    TPMS_AUTH_RESPONSE sessionDataOut;
+    TSS2L_SYS_AUTH_COMMAND sessionsData;
+    TSS2L_SYS_AUTH_RESPONSE sessionsDataOut;
+
+    TPM2B_NAME nameExt = TPM2B_TYPE_INIT(TPM2B_NAME, name);
+
+    sessionsDataOut.auths[0] = sessionDataOut;
+    sessionsData.auths[0] = ctx.session_data;
+
+    sessionsDataOut.count = 1;
+    sessionsData.count = 1;
+
+    ctx.session_data.sessionAttributes |= TPMA_SESSION_CONTINUESESSION;
+    if(ctx.flags.P == 0)
+        ctx.session_data.hmac.size = 0;
+    if (ctx.session_data.hmac.size > 0 && ctx.hexPasswd) {
+        ctx.session_data.hmac.size = sizeof(ctx.session_data.hmac) - 2;
+        if (tpm2_util_hex_to_byte_structure(
+                              (char *)ctx.session_data.hmac.buffer,
+                              &ctx.session_data.hmac.size,
+                              ctx.session_data.hmac.buffer) != 0) {
+            LOG_ERR( "Failed to convert Hex format password for item Passwd.\n");
+            return -1;
+        }
+    }
+
+    rval = Tss2_Sys_Load(sapi_context, ctx.itemHandle, &sessionsData, &ctx.in_private, &ctx.in_public, &handle2048rsa, &nameExt, &sessionsDataOut);
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("\nLoad Object Failed ! ErrorCode: 0x%0x\n\n",rval);
+        return rval;
+    }
+
+    return 0;
+
+}
+
+UINT32 unseal(TSS2_SYS_CONTEXT *sapi_context)
+{
+    UINT32 rval;
+    SESSION *policySession;
+    TPM2B_DIGEST policyDigest; //unused for now here but build_policy_external needs to return the policy for sealdata.
+
+    rval = build_policy_external(sapi_context, &policySession, false, ctx.pcrList, ctx.pcrCount, &policyDigest, ctx.nameAlg);  //Build real policy, don't write to file
+
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("build_policy() failed, ec: 0x%x\n", rval);
+        Tss2_Sys_FlushContext( sapi_context, policySession->sessionHandle);
+        tpm_session_auth_end(policySession);
+
+        return rval;
+    }
+
+    rval = load(sapi_context);
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("load() failed, ec: 0x%x\n", rval);
+        Tss2_Sys_FlushContext( sapi_context, policySession->sessionHandle);
+        tpm_session_auth_end(policySession);
+
+        return rval;
+    }
+
+    // reset the session data attributes
+    ctx.session_data.nonce.size = 0;
+    ctx.session_data.sessionAttributes = 0;
+
+    ctx.session_data.sessionHandle = policySession->sessionHandle;
+
+    TSS2L_SYS_AUTH_COMMAND sessionsData = { 1, { ctx.session_data }};
+    TSS2L_SYS_AUTH_RESPONSE sessionsDataOut;
+
+    TPM2B_SENSITIVE_DATA outData = TPM2B_TYPE_INIT(TPM2B_SENSITIVE_DATA, buffer);
+
+    rval = TSS2_RETRY_EXP(Tss2_Sys_Unseal(sapi_context, handle2048rsa, &sessionsData, &outData, &sessionsDataOut));
+    if(rval != TPM2_RC_SUCCESS) {
+        LOG_ERR("unseal() failed. ec: 0x%x\n", rval);
+        Tss2_Sys_FlushContext( sapi_context, policySession->sessionHandle);
+        tpm_session_auth_end(policySession);
+
+        return rval;
+    }
+
+    //Write data directly to stdout, to be consumed by the caller
+    fwrite(outData.buffer, 1, outData.size, stdout);
+
+    Tss2_Sys_FlushContext( sapi_context, policySession->sessionHandle);
+
+    tpm_session_auth_end(policySession);
+
+    return 0;
+}
+
+static bool on_option(char key, char *value) {
+
+    switch(key) {
+    case 'H':
+        if(!tpm2_util_string_to_uint32(value, &ctx.itemHandle)) {
+            return false;
+        }
+        ctx.flags.H = 1;
+        break;
+    case 'P':
+        ctx.session_data.hmac.size = sizeof(ctx.session_data.hmac) - 2;
+        if(tpm2_util_hex_to_byte_structure(value,&ctx.session_data.hmac.size,ctx.session_data.hmac.buffer) != 0) {
+            return false;
+        }
+        ctx.flags.P = 1;
+        break;
+    case 'u':
+        if(!files_load_public(value, &ctx.in_public)) {
+            return false;
+        }
+        ctx.flags.u = 1;
+        break;
+    case 'n':
+        if(!files_load_private(value, &ctx.in_private)) {
+            return false;
+        }
+        ctx.flags.n = 1;
+        break;
+    case 'g':
+        ctx.nameAlg = tpm2_alg_util_from_optarg(value);
+        if(ctx.nameAlg == TPM2_ALG_ERROR) {
+            return false;
+        }
+        ctx.flags.g = 1;
+        break;
+    case 'r':
+        if (pcr_parse_arg(value, &ctx.pcr, NULL, &ctx.hash_set)) {
+            LOG_ERR("Invalid pcr value.\n");
+            return false;
+        }
+        ctx.flags.r = 1;
+        pcr_struct *new_pcr = (pcr_struct *) malloc(sizeof(pcr_struct));
+        new_pcr->pcr = ctx.pcr;
+        new_pcr->hash_set = false;
+        ctx.pcrList[ctx.pcrCount] = new_pcr;
+        ctx.pcrCount++;
+        break;
+    case 'X':
+        ctx.hexPasswd = true;
+        break;
+    case ':':
+        break;
+    case '?':
+        break;
+    }
+
+    return true;
+}
+
+bool tpm2_tool_onstart(tpm2_options **opts) {
+
+    const struct option topts[] = {
+      {"item",        required_argument, NULL, 'H'},
+      {"pwdi",        required_argument, NULL, 'P'},
+      {"pubfile",     required_argument, NULL, 'u'},
+      {"privfile",    required_argument, NULL, 'n'},
+      {"halg",        required_argument, NULL, 'g'},
+      {"pcr",         required_argument, NULL, 'r'},
+      {"loadContext", required_argument, NULL, 'C'},
+      {"passwdInHex", required_argument, NULL, 'X'}
+    };
+
+    *opts = tpm2_options_new("H:P:r:u:g:n:X", ARRAY_LEN(topts), topts,
+            on_option, NULL, TPM2_OPTIONS_SHOW_USAGE);
+
+    return *opts != NULL;
+}
+
+int tpm2_tool_onrun(TSS2_SYS_CONTEXT *sapi_context, tpm2_option_flags flags) {
+
+    UNUSED(flags);
+
+    int returnVal = 0;
+    int flagCnt = 0;
+
+    flagCnt = ctx.flags.H + ctx.flags.n + ctx.flags.u + ctx.flags.g + ctx.flags.r;
+    if(flagCnt == 1) {
+        return -14;
+    } else if(flagCnt >= 4 && ctx.flags.H == 1 && ctx.flags.n == 1 && ctx.flags.u == 1 && ctx.flags.r == 1) {
+        if (returnVal == 0)
+            returnVal = unseal(sapi_context);
+
+        //clean up pcr objects
+        for(int i = 0; i < ctx.pcrCount; i++)
+            free(ctx.pcrList[i]);
+
+        Tss2_Sys_FlushContext(sapi_context, ctx.itemHandle);
+
+        //make sure handle2048 rsa is always cleaned
+        Tss2_Sys_FlushContext(sapi_context, handle2048rsa);
+        if(returnVal)
+            return -15;
+    } else {
+        return -16;
+    }
+
+    return 0;
+}
