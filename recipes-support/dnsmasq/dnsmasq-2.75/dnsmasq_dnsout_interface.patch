diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index cf1a782..f975fa2 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -524,6 +524,7 @@ struct irec {
   struct in_addr netmask; /* only valid for IPv4 */
   int tftp_ok, dhcp_ok, mtu, done, warned, dad, dns_auth, index, multicast_done, found;
   char *name; 
+  int idx;
   struct irec *next;
 };
 
@@ -948,7 +949,8 @@ extern struct daemon {
   struct cond_domain *cond_domain, *synth_domains;
   char *runfile; 
   char *lease_change_command;
-  struct iname *if_names, *if_addrs, *if_except, *dhcp_except, *auth_peers, *tftp_interfaces;
+  struct iname *if_names, *if_addrs, *if_except, *dhcp_except, *auth_peers, *tftp_interfaces,
+  *dnsout_names;
   struct bogus_addr *bogus_addr, *ignore_addr;
   struct server *servers;
   struct ipsets *ipsets;
diff --git a/src/network.c b/src/network.c
index a1d90c8..718f50f 100644
--- a/src/network.c
+++ b/src/network.c
@@ -489,6 +489,7 @@ static int iface_allowed(struct iface_param *param, int if_index, char *label,
 	  daemon->interfaces = iface;
 	  return 1;
 	}
+      iface->idx = if_index;
       free(iface);
 
     }
@@ -1108,6 +1109,12 @@ void join_multicast(int dienow)
 int random_sock(int family)
 {
   int fd;
+  struct ifreq ifr;
+  struct iname *ifn;
+
+  memset(&ifr, 0, sizeof (ifr));
+  if ((ifn = daemon->dnsout_names))
+      strncpy(ifr.ifr_name, ifn->name, sizeof (ifr.ifr_name));
 
   if ((fd = socket(family, SOCK_DGRAM, 0)) != -1)
     {
@@ -1146,6 +1153,13 @@ int random_sock(int family)
 #endif
 	      }
 #endif
+            if (ifr.ifr_name[0])
+            {
+                printf("Use interface %s\n", ifr.ifr_name);
+                if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE,
+                               (void *)&ifr, sizeof (ifr)) < 0)
+                    break;
+            }
 	    
 	    if (bind(fd, (struct sockaddr *)&addr, sa_len(&addr)) == 0)
 	      return fd;
diff --git a/src/option.c b/src/option.c
index ecc2619..cee7b01 100644
--- a/src/option.c
+++ b/src/option.c
@@ -154,6 +154,7 @@ struct myoption {
 #define LOPT_HOST_INOTIFY  342
 #define LOPT_DNSSEC_STAMP  343
 #define LOPT_TFTP_NO_FAIL  344
+#define LOPT_DNSOUT_IF     345
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -184,6 +185,7 @@ static const struct myoption opts[] =
     { "domain", 1, 0, 's' },
     { "domain-suffix", 1, 0, 's' },
     { "interface", 1, 0, 'i' },
+    { "dnsout-interface", 1, 0, LOPT_DNSOUT_IF },
     { "listen-address", 1, 0, 'a' },
     { "local-service", 0, 0, LOPT_LOCAL_SERVICE },
     { "bogus-priv", 0, 0, 'b' },
@@ -352,6 +354,7 @@ static struct {
   { 'H', ARG_DUP, "<path>", gettext_noop("Specify a hosts file to be read in addition to %s."), HOSTSFILE },
   { LOPT_HOST_INOTIFY, ARG_DUP, "<path>", gettext_noop("Read hosts files from a directory."), NULL },
   { 'i', ARG_DUP, "<interface>", gettext_noop("Specify interface(s) to listen on."), NULL },
+  { LOPT_DNSOUT_IF, ARG_DUP, "dnsout-interface", gettext_noop("Specify which interface(s) to use for dns request."), NULL },
   { 'I', ARG_DUP, "<interface>", gettext_noop("Specify interface(s) NOT to listen on.") , NULL },
   { 'j', ARG_DUP, "set:<tag>,<class>", gettext_noop("Map DHCP user class to tag."), NULL },
   { LOPT_CIRCUIT, ARG_DUP, "set:<tag>,<circuit>", gettext_noop("Map RFC3046 circuit-id to tag."), NULL },
@@ -2130,6 +2133,20 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	break;
       /* fall through */
 
+      case LOPT_DNSOUT_IF: /*--dnsout-interface */
+      do {
+          struct iname *new = opt_malloc(sizeof (struct iname));
+          memset(new, 0, sizeof (*new));
+          comma = split(arg);
+          new->next = daemon->dnsout_names;
+          daemon->dnsout_names = new;
+          /* new->name may be NULL if someone does
+           * "interface=" to disable all interfaces except loop. */
+          new->name = opt_string_alloc(arg);
+          arg = comma;
+      } while (arg);
+      break;
+
     case 'I':  /* --except-interface */
     case '2':  /* --no-dhcp-interface */
       do {
