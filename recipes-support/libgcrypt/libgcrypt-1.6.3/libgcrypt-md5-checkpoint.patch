diff --git a/cipher/md.c b/cipher/md.c
index 22da30a..bc4f703 100644
--- a/cipher/md.c
+++ b/cipher/md.c
@@ -1234,6 +1234,45 @@ _gcry_md_is_enabled (gcry_md_hd_t a, int algo)
   return value;
 }
 
+int
+_save_md5_checkpoint(FILE *f, gcry_md_hd_t *hd)
+{
+	GcryDigestEntry *entry;
+	int n;
+
+	n = (*hd)->ctx->actual_handle_size - sizeof (struct gcry_md_context);
+	if (fwrite(*hd, n, 1, f) != 1)
+		return (-1);
+	entry = (*hd)->ctx->list;
+	if (fwrite(entry->context.c, entry->spec->contextsize, 1, f) != 1)
+		return (-1);
+
+	return (0);
+}
+
+int
+_load_md5_checkpoint(FILE *f, gcry_md_hd_t *hd)
+{
+	GcryDigestEntry *entry;
+	void *ctx;
+	int n;
+
+	_gcry_md_open(hd, GCRY_MD_MD5, 0);
+	/* see comment above in md_open() for description of layout */
+	ctx = (*hd)->ctx;
+	n = (*hd)->ctx->actual_handle_size - sizeof (struct gcry_md_context);
+	if (fread(*hd, n, 1, f) != 1)
+		goto fail;
+	(*hd)->ctx = ctx;
+	entry = (*hd)->ctx->list;
+	if (fread(entry->context.c, entry->spec->contextsize, 1, f) != 1)
+		goto fail;
+
+	return (0);
+fail:
+	_gcry_md_close(*hd);
+	return (-1);
+}
 
 /* Run the selftests for digest algorithm ALGO with optional reporting
    function REPORT.  */
diff --git a/src/gcrypt.h.in b/src/gcrypt.h.in
index dbf48e3..ca09e85 100644
--- a/src/gcrypt.h.in
+++ b/src/gcrypt.h.in
@@ -25,6 +25,7 @@
 #ifndef _GCRYPT_H
 #define _GCRYPT_H
 
+#include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
 #include <string.h>
@@ -1668,6 +1669,8 @@ int gcry_is_secure (const void *a) _GCRY_GCC_ATTR_PURE;
 /* Return true if Libgcrypt is in FIPS mode.  */
 #define gcry_fips_mode_active()  !!gcry_control (GCRYCTL_FIPS_MODE_P, 0)
 
+int save_md5_checkpoint(FILE *f, gcry_md_hd_t *hd);
+int load_md5_checkpoint(FILE *f, gcry_md_hd_t *hd);
 
 #if 0 /* (Keep Emacsens' auto-indent happy.) */
 {
diff --git a/src/gcrypt-int.h b/src/gcrypt-int.h
index 65dcb4d..f833039 100644
--- a/src/gcrypt-int.h
+++ b/src/gcrypt-int.h
@@ -24,6 +24,7 @@
 #error  gcrypt.h already included
 #endif
 
+#include <stdio.h>
 #include "gcrypt.h"
 #include "types.h"
 
@@ -448,6 +449,8 @@ void _gcry_mpi_set_flag (gcry_mpi_t a, enum gcry_mpi_flag flag);
 void _gcry_mpi_clear_flag (gcry_mpi_t a, enum gcry_mpi_flag flag);
 int _gcry_mpi_get_flag (gcry_mpi_t a, enum gcry_mpi_flag flag);
 
+int _save_md5_checkpoint(FILE *f, gcry_md_hd_t *hd);
+int _load_md5_checkpoint(FILE *f, gcry_md_hd_t *hd);
 
 /* Private function - do not use.  */
 /* gcry_mpi_t _gcry_mpi_get_const (int no); */
diff --git a/src/libgcrypt.def b/src/libgcrypt.def
index a90efce..999858a 100644
--- a/src/libgcrypt.def
+++ b/src/libgcrypt.def
@@ -275,5 +275,7 @@ EXPORTS
       gcry_mac_verify           @241
       gcry_mac_ctl              @242
 
+      save_md5_checkpoint       @243
+      load_md5_checkpoint       @244
 
 ;; end of file with public symbols for Windows.
diff --git a/src/libgcrypt.vers b/src/libgcrypt.vers
index 5118c81..1863000 100644
--- a/src/libgcrypt.vers
+++ b/src/libgcrypt.vers
@@ -115,6 +115,8 @@ GCRYPT_1.6 {
 
     gcry_ctx_release;
 
+    save_md5_checkpoint; load_md5_checkpoint;
+
   local:
     *;
 
diff --git a/src/visibility.c b/src/visibility.c
index 2989498..dc518d1 100644
--- a/src/visibility.c
+++ b/src/visibility.c
@@ -1530,3 +1530,15 @@ gcry_is_secure (const void *a)
 {
   return _gcry_is_secure (a);
 }
+
+int
+save_md5_checkpoint(FILE *f, gcry_md_hd_t *hd)
+{
+	return _save_md5_checkpoint(f, hd);
+}
+
+int
+load_md5_checkpoint(FILE *f, gcry_md_hd_t *hd)
+{
+	return _load_md5_checkpoint(f, hd);
+}
diff --git a/src/visibility.h b/src/visibility.h
index 4127a43..a4c8421 100644
--- a/src/visibility.h
+++ b/src/visibility.h
@@ -269,6 +269,9 @@ MARK_VISIBLEX (gcry_mpi_test_bit)
 
 MARK_VISIBLEX (gcry_ctx_release)
 
+MARK_VISIBLEX (save_md5_checkpoint)
+MARK_VISIBLEX (load_md5_checkpoint)
+
 MARK_VISIBLEX (gcry_log_debug)
 MARK_VISIBLEX (gcry_log_debughex)
 MARK_VISIBLEX (gcry_log_debugmpi)
@@ -482,6 +485,9 @@ MARK_VISIBLEX (_gcry_mpi_get_const)
 #define gcry_mpi_swap               _gcry_USE_THE_UNDERSCORED_FUNCTION
 #define gcry_mpi_test_bit           _gcry_USE_THE_UNDERSCORED_FUNCTION
 
+#define save_md5_checkpoint	    _save_md5_checkpoint
+#define load_md5_checkpoint	    _load_md5_checkpoint
+
 #define gcry_mpi_abs                _gcry_USE_THE_UNDERSCORED_FUNCTION
 #define gcry_mpi_ec_add             _gcry_USE_THE_UNDERSCORED_FUNCTION
 #define gcry_mpi_ec_curve_point     _gcry_USE_THE_UNDERSCORED_FUNCTION
