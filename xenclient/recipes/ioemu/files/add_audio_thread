diff --git a/audio/audio.c b/audio/audio.c
index a2636cb..b983d0b 100644
--- a/audio/audio.c
+++ b/audio/audio.c
@@ -28,6 +28,7 @@
 #include "sysemu.h"
 
 #define AUDIO_CAP "audio"
+#include <pthread.h>
 #include "audio_int.h"
 
 /* #define DEBUG_PLIVE */
@@ -35,6 +36,8 @@
 /* #define DEBUG_OUT */
 /* #define DEBUG_CAPTURE */
 
+pthread_mutex_t audio_mutex = PTHREAD_MUTEX_INITIALIZER; 
+
 #define SW_NAME(sw) (sw)->name ? (sw)->name : "unknown"
 
 static struct audio_driver *drvtab[] = {
@@ -1474,6 +1477,28 @@ static void audio_run_capture (AudioState *s)
     }
 }
 
+static void *audio_worker_thread(void *arg)
+{
+    AudioState *s = arg;
+    struct timespec ts;
+
+    ts.tv_sec = 0;
+    ts.tv_nsec = 2000*1000;
+
+    while (1) {
+	nanosleep(&ts, NULL);
+
+	pthread_mutex_lock(&audio_mutex);
+
+	audio_run_out (s);
+	audio_run_in (s);
+	audio_run_capture (s);
+
+	pthread_mutex_unlock(&audio_mutex);
+    }
+}
+
+#if 0
 static void audio_timer (void *opaque)
 {
     AudioState *s = opaque;
@@ -1484,6 +1509,7 @@ static void audio_timer (void *opaque)
 
     qemu_mod_timer (s->ts, qemu_get_clock (vm_clock) + conf.period.ticks);
 }
+#endif
 
 static struct audio_option audio_options[] = {
     /* DAC */
@@ -1716,11 +1742,13 @@ AudioState *AUD_init (void)
     LIST_INIT (&s->cap_head);
     atexit (audio_atexit);
 
+#if 0
     s->ts = qemu_new_timer (vm_clock, audio_timer, s);
     if (!s->ts) {
         dolog ("Could not create audio timer\n");
         return NULL;
     }
+#endif
 
     audio_process_options ("AUDIO", audio_options);
 
@@ -1807,7 +1835,13 @@ AudioState *AUD_init (void)
 
     LIST_INIT (&s->card_head);
     register_savevm ("audio", 0, 1, audio_save, audio_load, s);
+
+#if 0
     qemu_mod_timer (s->ts, qemu_get_clock (vm_clock) + conf.period.ticks);
+#endif
+
+    pthread_create(&s->audio_thread, NULL, audio_worker_thread, (void *)s);
+
     return s;
 }
 
diff --git a/audio/audio_int.h b/audio/audio_int.h
index fc87458..ce15bd9 100644
--- a/audio/audio_int.h
+++ b/audio/audio_int.h
@@ -193,6 +193,7 @@ struct AudioState {
     int nb_hw_voices_out;
     int nb_hw_voices_in;
     int vm_running;
+    pthread_t audio_thread;
 };
 
 extern struct audio_driver no_audio_driver;
diff --git a/hw/ac97.c b/hw/ac97.c
index 9d0da51..7ec8a9b 100644
--- a/hw/ac97.c
+++ b/hw/ac97.c
@@ -20,6 +20,8 @@
 #include "pci.h"
 #include "sysemu.h"
 
+extern pthread_mutex_t audio_mutex;
+
 enum {
     AC97_Reset                     = 0x00,
     AC97_Master_Volume_Mute        = 0x02,
@@ -115,7 +117,7 @@ enum {
 #define EACS_VRA 1
 #define EACS_VRM 8
 
-#define VOL_MASK 0x1f
+#define VOL_MASK 0x3f
 #define MUTE_SHIFT 15
 #define MAX_VOL_MASK 0xff
 
@@ -534,9 +536,8 @@ static void set_volume (AC97LinkState *s, int index,
                         /* audmixerctl_t mt, */ uint32_t val)
 {
     int mute = (val >> MUTE_SHIFT) & 1;
-    uint8_t rvol = val & MAX_VOL_MASK;
-    uint8_t lvol = (val >> 8) & MAX_VOL_MASK;
-
+    uint8_t rvol = val & VOL_MASK;
+    uint8_t lvol = (val >> 8) & VOL_MASK;
     if (rvol > VOL_MASK)
         rvol = VOL_MASK;
 
@@ -606,8 +607,10 @@ static uint32_t nam_readb (void *opaque, uint32_t addr)
 {
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
+    pthread_mutex_lock(&audio_mutex);
     dolog ("U nam readb %#x\n", addr);
     s->cas = 0;
+    pthread_mutex_unlock(&audio_mutex);
     return ~0U;
 }
 
@@ -615,10 +618,12 @@ static uint32_t nam_readw (void *opaque, uint32_t addr)
 {
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t val = ~0U;
     uint32_t index = addr - s->base[0];
     s->cas = 0;
     val = mixer_load (s, index);
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
@@ -627,7 +632,9 @@ static uint32_t nam_readl (void *opaque, uint32_t addr)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     dolog ("U nam readl %#x\n", addr);
+    pthread_mutex_lock(&audio_mutex);
     s->cas = 0;
+    pthread_mutex_unlock(&audio_mutex);
     return ~0U;
 }
 
@@ -640,13 +647,16 @@ static void nam_writeb (void *opaque, uint32_t addr, uint32_t val)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     dolog ("U nam writeb %#x <- %#x\n", addr, val);
+    pthread_mutex_lock(&audio_mutex);
     s->cas = 0;
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void nam_writew (void *opaque, uint32_t addr, uint32_t val)
 {
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[0];
     s->cas = 0;
     switch (index) {
@@ -733,6 +743,7 @@ static void nam_writew (void *opaque, uint32_t addr, uint32_t val)
         mixer_store (s, index, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void nam_writel (void *opaque, uint32_t addr, uint32_t val)
@@ -740,7 +751,9 @@ static void nam_writel (void *opaque, uint32_t addr, uint32_t val)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     dolog ("U nam writel %#x <- %#x\n", addr, val);
+    pthread_mutex_lock(&audio_mutex);
     s->cas = 0;
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 /**
@@ -752,6 +765,7 @@ static uint32_t nabm_readb (void *opaque, uint32_t addr)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     uint32_t val = ~0U;
 
@@ -800,6 +814,7 @@ static uint32_t nabm_readb (void *opaque, uint32_t addr)
         dolog ("U nabm readb %#x -> %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
@@ -808,6 +823,7 @@ static uint32_t nabm_readw (void *opaque, uint32_t addr)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     uint32_t val = ~0U;
 
@@ -830,6 +846,7 @@ static uint32_t nabm_readw (void *opaque, uint32_t addr)
         dolog ("U nabm readw %#x -> %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
@@ -838,6 +855,7 @@ static uint32_t nabm_readl (void *opaque, uint32_t addr)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     uint32_t val = ~0U;
 
@@ -877,6 +895,7 @@ static uint32_t nabm_readl (void *opaque, uint32_t addr)
         dolog ("U nabm readl %#x -> %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
@@ -889,6 +908,7 @@ static void nabm_writeb (void *opaque, uint32_t addr, uint32_t val)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     switch (index) {
     case PI_LVI:
@@ -939,6 +959,7 @@ static void nabm_writeb (void *opaque, uint32_t addr, uint32_t val)
         dolog ("U nabm writeb %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void nabm_writew (void *opaque, uint32_t addr, uint32_t val)
@@ -946,6 +967,7 @@ static void nabm_writew (void *opaque, uint32_t addr, uint32_t val)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     switch (index) {
     case PI_SR:
@@ -960,6 +982,7 @@ static void nabm_writew (void *opaque, uint32_t addr, uint32_t val)
         dolog ("U nabm writew %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void nabm_writel (void *opaque, uint32_t addr, uint32_t val)
@@ -967,6 +990,7 @@ static void nabm_writel (void *opaque, uint32_t addr, uint32_t val)
     PCIAC97LinkState *d = opaque;
     AC97LinkState *s = &d->ac97;
     AC97BusMasterRegs *r = NULL;
+    pthread_mutex_lock(&audio_mutex);
     uint32_t index = addr - s->base[1];
     switch (index) {
     case PI_BDBAR:
@@ -995,6 +1019,7 @@ static void nabm_writel (void *opaque, uint32_t addr, uint32_t val)
         dolog ("U nabm writel %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static int write_audio (AC97LinkState *s, AC97BusMasterRegs *r,
@@ -1223,6 +1248,7 @@ static void ac97_save (QEMUFile *f, void *opaque)
     uint8_t active[LAST_INDEX];
     AC97LinkState *s = opaque;
 
+    pthread_mutex_lock(&audio_mutex);
     pci_device_save (s->pci_dev, f);
 
     qemu_put_be32s (f, &s->glob_cnt);
@@ -1248,6 +1274,7 @@ static void ac97_save (QEMUFile *f, void *opaque)
     active[PO_INDEX] = AUD_is_active_out (s->voice_po) ? 1 : 0;
     active[MC_INDEX] = AUD_is_active_in (s->voice_mc) ? 1 : 0;
     qemu_put_buffer (f, active, sizeof (active));
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static int ac97_load (QEMUFile *f, void *opaque, int version_id)
@@ -1257,6 +1284,7 @@ static int ac97_load (QEMUFile *f, void *opaque, int version_id)
     uint8_t active[LAST_INDEX];
     AC97LinkState *s = opaque;
 
+    pthread_mutex_lock(&audio_mutex);
     if (version_id != 2)
         return -EINVAL;
 
@@ -1296,6 +1324,7 @@ static int ac97_load (QEMUFile *f, void *opaque, int version_id)
 
     s->bup_flag = 0;
     s->last_samp = 0;
+    pthread_mutex_unlock(&audio_mutex);
     return 0;
 }
 
@@ -1329,6 +1358,7 @@ static void ac97_on_reset (void *opaque)
 {
     AC97LinkState *s = opaque;
 
+    pthread_mutex_lock(&audio_mutex);
     reset_bm_regs (s, &s->bm_regs[0]);
     reset_bm_regs (s, &s->bm_regs[1]);
     reset_bm_regs (s, &s->bm_regs[2]);
@@ -1339,6 +1369,7 @@ static void ac97_on_reset (void *opaque)
      * the codec manually.
      */
     mixer_reset (s);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 int ac97_init (PCIBus *bus, AudioState *audio)
diff --git a/hw/es1370.c b/hw/es1370.c
index c3f2457..b7dfe16 100644
--- a/hw/es1370.c
+++ b/hw/es1370.c
@@ -72,6 +72,8 @@
 #define ES1370_REG_PHANTOM_FRAMEADR 0xd38
 #define ES1370_REG_PHANTOM_FRAMECNT 0xd3c
 
+extern pthread_mutex_t audio_mutex;
+
 static const unsigned dac1_samplerate[] = { 5512, 11025, 22050, 44100 };
 
 #define DAC2_SRTODIV(x) (((1411200+(x)/2)/(x))-2)
@@ -483,6 +485,7 @@ IO_WRITE_PROTO (es1370_writeb)
     ES1370State *s = opaque;
     uint32_t shift, mask;
 
+    pthread_mutex_lock(&audio_mutex);
     addr = es1370_fixup (s, addr);
 
     switch (addr) {
@@ -514,11 +517,13 @@ IO_WRITE_PROTO (es1370_writeb)
         lwarn ("writeb %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 IO_WRITE_PROTO (es1370_writew)
 {
     ES1370State *s = opaque;
+    pthread_mutex_lock(&audio_mutex);
     addr = es1370_fixup (s, addr);
     uint32_t shift, mask;
     struct chan *d = &s->chan[0];
@@ -553,11 +558,13 @@ IO_WRITE_PROTO (es1370_writew)
         lwarn ("writew %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 IO_WRITE_PROTO (es1370_writel)
 {
     ES1370State *s = opaque;
+    pthread_mutex_lock(&audio_mutex);
     struct chan *d = &s->chan[0];
 
     addr = es1370_fixup (s, addr);
@@ -619,6 +626,7 @@ IO_WRITE_PROTO (es1370_writel)
         lwarn ("writel %#x <- %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 IO_READ_PROTO (es1370_readb)
@@ -626,6 +634,7 @@ IO_READ_PROTO (es1370_readb)
     ES1370State *s = opaque;
     uint32_t val;
 
+    pthread_mutex_lock(&audio_mutex);
     addr = es1370_fixup (s, addr);
 
     switch (addr) {
@@ -653,12 +662,14 @@ IO_READ_PROTO (es1370_readb)
         lwarn ("readb %#x -> %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
 IO_READ_PROTO (es1370_readw)
 {
     ES1370State *s = opaque;
+    pthread_mutex_lock(&audio_mutex);
     struct chan *d = &s->chan[0];
     uint32_t val;
 
@@ -695,6 +706,7 @@ IO_READ_PROTO (es1370_readw)
         break;
     }
 
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
@@ -702,6 +714,7 @@ IO_READ_PROTO (es1370_readl)
 {
     ES1370State *s = opaque;
     uint32_t val;
+    pthread_mutex_lock(&audio_mutex);
     struct chan *d = &s->chan[0];
 
     addr = es1370_fixup (s, addr);
@@ -780,6 +793,7 @@ IO_READ_PROTO (es1370_readl)
         lwarn ("readl %#x -> %#x\n", addr, val);
         break;
     }
+    pthread_mutex_unlock(&audio_mutex);
     return val;
 }
 
diff --git a/hw/intel-hda.c b/hw/intel-hda.c
index 03b2bd7..4363974 100644
--- a/hw/intel-hda.c
+++ b/hw/intel-hda.c
@@ -18,6 +18,7 @@
  */
 
 #include <assert.h>
+#include <execinfo.h>
 
 #include "hw.h"
 #include "pci.h"
@@ -26,6 +27,8 @@
 #include "intel-hda.h"
 #include "intel-hda-defs.h"
 
+extern pthread_mutex_t audio_mutex;
+
 typedef uint32_t pcibus_t;
 
 /* --------------------------------------------------------------------- */
@@ -397,6 +400,7 @@ static bool intel_hda_xfer(HDACodecDevice *dev, uint32_t stnr, bool output,
     uint32_t s, copy, left;
     bool irq = false;
 
+    dprint(d, 3, "intel_hda_xfer len=%d\n", len);
     for (s = 0; s < ARRAY_SIZE(d->st); s++) {
         if (stnr == ((d->st[s].ctl >> 20) & 0x0f)) {
             st = d->st + s;
@@ -438,7 +442,7 @@ static bool intel_hda_xfer(HDACodecDevice *dev, uint32_t stnr, bool output,
         if (st->bpl[st->be].len == st->bp) {
             /* bpl entry filled */
             if (st->bpl[st->be].flags & 0x01) {
-                irq = true;
+		irq = true;
             }
             st->bp = 0;
             st->be++;
@@ -504,54 +508,71 @@ static void intel_hda_notify_codecs(IntelHDAState *d, uint32_t stream, bool runn
 
 static void intel_hda_set_g_ctl(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     if ((d->g_ctl & ICH6_GCTL_RESET) == 0) {
         intel_hda_reset(d);
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_wake_en(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_update_irq(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_state_sts(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_update_irq(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_int_ctl(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_update_irq(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_get_wall_clk(IntelHDAState *d, const IntelHDAReg *reg)
 {
     int64_t ns;
 
+    pthread_mutex_lock(&audio_mutex);
     /* ns = qemu_get_clock_ns(vm_clock) - d->wall_base_ns; */
     ns = qemu_get_clock(vm_clock) - d->wall_base_ns;
     d->wall_clk = (uint32_t)(ns * 24 / 1000);  /* 24 MHz */
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_corb_wp(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_corb_run(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_corb_ctl(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_corb_run(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_rirb_wp(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     if (d->rirb_wp & ICH6_RIRBWP_RST) {
         d->rirb_wp = 0;
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_rirb_sts(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     intel_hda_update_irq(d);
 
     if ((old & ICH6_RBSTS_IRQ) && !(d->rirb_sts & ICH6_RBSTS_IRQ)) {
@@ -559,17 +580,21 @@ static void intel_hda_set_rirb_sts(IntelHDAState *d, const IntelHDAReg *reg, uin
         d->rirb_count = 0;
         intel_hda_corb_run(d);
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_ics(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     if (d->ics & ICH6_IRS_BUSY) {
         intel_hda_corb_run(d);
     }
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 static void intel_hda_set_st_ctl(IntelHDAState *d, const IntelHDAReg *reg, uint32_t old)
 {
+    pthread_mutex_lock(&audio_mutex);
     IntelHDAStream *st = d->st + reg->stream;
 
     if (st->ctl & 0x01) {
@@ -593,6 +618,7 @@ static void intel_hda_set_st_ctl(IntelHDAState *d, const IntelHDAReg *reg, uint3
         }
     }
     intel_hda_update_irq(d);
+    pthread_mutex_unlock(&audio_mutex);
 }
 
 /* --------------------------------------------------------------------- */
