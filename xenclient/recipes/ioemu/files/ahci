diff --git a/hw/ide.c b/hw/ide.c
index b7a2279..d084749 100644
--- a/hw/ide.c
+++ b/hw/ide.c
@@ -609,6 +609,46 @@ typedef struct PCIIDEState {
     int type; /* see IDE_TYPE_xxx */
 } PCIIDEState;
 
+
+
+typedef struct AHCIState {
+    PCIDevice dev;
+    IDEState ide_if[1];
+    qemu_irq irq;
+
+    struct ahci_control_regs
+    {
+        uint32_t cap;
+        uint32_t ghc;
+        uint32_t irqstatus;
+        uint32_t impl;
+        uint32_t version;
+    } control_regs;
+
+    struct ahci_port_regs
+    {
+        uint32_t lst_addr;
+        uint32_t lst_addr_hi;
+        uint32_t fis_addr;
+        uint32_t fis_addr_hi;
+        uint32_t irq_stat;
+        uint32_t irq_mask;
+        uint32_t cmd;
+        uint32_t unused0;
+        uint32_t tfdata;
+        uint32_t sig;
+        uint32_t scr_stat;
+        uint32_t scr_ctl;
+        uint32_t scr_err;
+        uint32_t scr_act;
+        uint32_t cmd_issue;
+    } port_regs[2];
+
+    int mem;
+    QEMUTimer *timer;
+
+} AHCIState;
+
 static PCIIDEState *principal_ide_controller;
 
 #if defined(__ia64__)
@@ -4104,6 +4144,629 @@ void pci_piix4_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn,
     register_savevm("ide", 0, 3, pci_ide_save, pci_ide_load, d);
 }
 
+/***********************************************************/
+/* AHCI controler stuff */
+
+enum {
+	/* global controller registers */
+	HOST_CAP		= 0x00, /* host capabilities */
+	HOST_CTL		= 0x04, /* global host control */
+	HOST_IRQ_STAT		= 0x08, /* interrupt status */
+	HOST_PORTS_IMPL		= 0x0c, /* bitmap of implemented ports */
+	HOST_VERSION		= 0x10, /* AHCI spec. version compliancy */
+
+	/* HOST_CTL bits */
+	HOST_RESET		= (1 << 0),  /* reset controller; self-clear */
+	HOST_IRQ_EN		= (1 << 1),  /* global IRQ enable */
+	HOST_AHCI_EN		= (1 << 31), /* AHCI enabled */
+
+	/* HOST_CAP bits */
+	HOST_CAP_SSC		= (1 << 14), /* Slumber capable */
+	HOST_CAP_CLO		= (1 << 24), /* Command List Override support */
+	HOST_CAP_SSS		= (1 << 27), /* Staggered Spin-up */
+	HOST_CAP_NCQ		= (1 << 30), /* Native Command Queueing */
+	HOST_CAP_64		= (1 << 31), /* PCI DAC (64-bit DMA) support */
+
+	/* registers for each SATA port */
+	PORT_LST_ADDR		= 0x00, /* command list DMA addr */
+	PORT_LST_ADDR_HI	= 0x04, /* command list DMA addr hi */
+	PORT_FIS_ADDR		= 0x08, /* FIS rx buf addr */
+	PORT_FIS_ADDR_HI	= 0x0c, /* FIS rx buf addr hi */
+	PORT_IRQ_STAT		= 0x10, /* interrupt status */
+	PORT_IRQ_MASK		= 0x14, /* interrupt enable/disable mask */
+	PORT_CMD		= 0x18, /* port command */
+	PORT_TFDATA		= 0x20,	/* taskfile data */
+	PORT_SIG		= 0x24,	/* device TF signature */
+	PORT_CMD_ISSUE		= 0x38, /* command issue */
+	PORT_SCR		= 0x28, /* SATA phy register block */
+	PORT_SCR_STAT		= 0x28, /* SATA phy register: SStatus */
+	PORT_SCR_CTL		= 0x2c, /* SATA phy register: SControl */
+	PORT_SCR_ERR		= 0x30, /* SATA phy register: SError */
+	PORT_SCR_ACT		= 0x34, /* SATA phy register: SActive */
+
+	/* PORT_IRQ_{STAT,MASK} bits */
+	PORT_IRQ_COLD_PRES	= (1 << 31), /* cold presence detect */
+	PORT_IRQ_TF_ERR		= (1 << 30), /* task file error */
+	PORT_IRQ_HBUS_ERR	= (1 << 29), /* host bus fatal error */
+	PORT_IRQ_HBUS_DATA_ERR	= (1 << 28), /* host bus data error */
+	PORT_IRQ_IF_ERR		= (1 << 27), /* interface fatal error */
+	PORT_IRQ_IF_NONFATAL	= (1 << 26), /* interface non-fatal error */
+	PORT_IRQ_OVERFLOW	= (1 << 24), /* xfer exhausted available S/G */
+	PORT_IRQ_BAD_PMP	= (1 << 23), /* incorrect port multiplier */
+
+	PORT_IRQ_PHYRDY		= (1 << 22), /* PhyRdy changed */
+	PORT_IRQ_DEV_ILCK	= (1 << 7), /* device interlock */
+	PORT_IRQ_CONNECT	= (1 << 6), /* port connect change status */
+	PORT_IRQ_SG_DONE	= (1 << 5), /* descriptor processed */
+	PORT_IRQ_UNK_FIS	= (1 << 4), /* unknown FIS rx'd */
+	PORT_IRQ_SDB_FIS	= (1 << 3), /* Set Device Bits FIS rx'd */
+	PORT_IRQ_DMAS_FIS	= (1 << 2), /* DMA Setup FIS rx'd */
+	PORT_IRQ_PIOS_FIS	= (1 << 1), /* PIO Setup FIS rx'd */
+	PORT_IRQ_D2H_REG_FIS	= (1 << 0), /* D2H Register FIS rx'd */
+
+	PORT_IRQ_FREEZE		= PORT_IRQ_HBUS_ERR |
+				  PORT_IRQ_IF_ERR |
+				  PORT_IRQ_CONNECT |
+				  PORT_IRQ_PHYRDY |
+				  PORT_IRQ_UNK_FIS,
+	PORT_IRQ_ERROR		= PORT_IRQ_FREEZE |
+				  PORT_IRQ_TF_ERR |
+				  PORT_IRQ_HBUS_DATA_ERR,
+	DEF_PORT_IRQ		= PORT_IRQ_ERROR | PORT_IRQ_SG_DONE |
+				  PORT_IRQ_SDB_FIS | PORT_IRQ_DMAS_FIS |
+				  PORT_IRQ_PIOS_FIS | PORT_IRQ_D2H_REG_FIS,
+
+	/* PORT_CMD bits */
+	PORT_CMD_ATAPI		= (1 << 24), /* Device is ATAPI */
+	PORT_CMD_LIST_ON	= (1 << 15), /* cmd list DMA engine running */
+	PORT_CMD_FIS_ON		= (1 << 14), /* FIS DMA engine running */
+	PORT_CMD_FIS_RX		= (1 << 4), /* Enable FIS receive DMA engine */
+	PORT_CMD_CLO		= (1 << 3), /* Command list override */
+	PORT_CMD_POWER_ON	= (1 << 2), /* Power up device */
+	PORT_CMD_SPIN_UP	= (1 << 1), /* Spin up device */
+	PORT_CMD_START		= (1 << 0), /* Enable port DMA engine */
+
+	PORT_CMD_ICC_MASK	= (0xf << 28), /* i/f ICC state mask */
+	PORT_CMD_ICC_ACTIVE	= (0x1 << 28), /* Put i/f in active state */
+	PORT_CMD_ICC_PARTIAL	= (0x2 << 28), /* Put i/f in partial state */
+	PORT_CMD_ICC_SLUMBER	= (0x6 << 28), /* Put i/f in slumber state */
+
+	/* ap->flags bits */
+	AHCI_FLAG_NO_NCQ		= (1 << 24),
+	AHCI_FLAG_IGN_IRQ_IF_ERR	= (1 << 25), /* ignore IRQ_IF_ERR */
+	AHCI_FLAG_HONOR_PI		= (1 << 26), /* honor PORTS_IMPL */
+	AHCI_FLAG_IGN_SERR_INTERNAL	= (1 << 27), /* ignore SERR_INTERNAL */
+	AHCI_FLAG_32BIT_ONLY		= (1 << 28), /* force 32bit */
+};
+
+
+static void ahci_check_irq(AHCIState *s)
+{
+    struct ahci_port_regs *pr;
+    int i;
+
+    for(i = 0; i < 2;i++)
+    {
+	pr = &s->port_regs[i];
+
+	if(pr->irq_stat & pr->irq_mask)
+	    s->control_regs.irqstatus |= (1 << i);
+    }
+
+    if(s->control_regs.irqstatus)
+	qemu_irq_raise(s->dev.irq[0]);
+    else
+        qemu_irq_lower(s->dev.irq[0]);
+}
+
+static uint32_t ahci_port_read(AHCIState *s, int port, int offset)
+{
+    uint32_t val;
+    uint32_t *p;
+    struct ahci_port_regs *pr;
+
+    pr = &s->port_regs[port];
+
+    switch(offset)
+    {
+    case PORT_SCR:
+        if (port == 0)
+            val = 3;
+        else
+            val = 0;
+        break;
+    case PORT_IRQ_STAT:
+        val = pr->irq_stat;
+        break;
+    case PORT_TFDATA:
+    case PORT_SIG:
+    case PORT_CMD_ISSUE:
+    case PORT_SCR_CTL:
+    case PORT_SCR_ERR:
+    case PORT_SCR_ACT:
+    default:
+        p = (uint32_t *)&s->port_regs[port];
+        val = p[offset >> 2];
+        break;
+    }
+
+    return val;
+}
+
+static uint32_t ahci_mem_readl(void *ptr, target_phys_addr_t addr)
+{
+    AHCIState *s = ptr;
+    uint32_t val, offset;
+    uint32_t *p;
+
+    addr = addr & 0xfff;
+    if(addr < 0x20)
+    {
+        switch(addr)
+	{
+        case HOST_IRQ_STAT:
+    	default:
+            /* genernal host control */
+            p = (uint32_t *) &s->control_regs;
+            val = p[addr >> 2];
+        }
+    }
+    else if( addr >= 0x100 && addr < 0x200)
+    {
+        val = ahci_port_read(s, (addr -0x100) >> 7, addr & 0x7f);
+    }
+    else
+        val = 0;
+
+    return val;
+}
+
+static void ahci_port_write(AHCIState *s, int port, int offset, uint32_t val)
+{
+    struct ahci_port_regs *pr = &s->port_regs[port];
+    uint32_t *p;
+    static int64_t time;
+
+    switch(offset)
+    {
+    case PORT_LST_ADDR:
+        pr->lst_addr = val;
+        break;
+    case PORT_LST_ADDR_HI:
+        pr->lst_addr_hi = val;
+        break;
+    case PORT_FIS_ADDR:
+        pr->fis_addr = val;
+        break;
+    case PORT_FIS_ADDR_HI:
+        pr->fis_addr_hi = val;
+        break;
+    case PORT_IRQ_STAT:
+        pr->irq_stat &= ~val;
+        ahci_check_irq(s);
+        break;
+    case PORT_IRQ_MASK:
+        pr->irq_mask = val;
+        ahci_check_irq(s);
+        break;
+    case PORT_CMD:
+        pr->cmd = val & (PORT_CMD_ATAPI | PORT_CMD_LIST_ON | PORT_CMD_FIS_ON |
+                         PORT_CMD_FIS_RX | PORT_CMD_CLO| PORT_CMD_POWER_ON |
+                         PORT_CMD_SPIN_UP | PORT_CMD_START);
+        if(pr->cmd & PORT_CMD_START)
+            qemu_mod_timer(s->timer, qemu_get_clock(vm_clock) +
+                                     muldiv64(1, ticks_per_sec, 1000));
+        break;
+    case PORT_CMD_ISSUE:
+        pr->cmd_issue = val;
+        if(pr->cmd & PORT_CMD_START)
+            qemu_mod_timer(s->timer, qemu_get_clock(vm_clock) +
+                                     muldiv64(1, ticks_per_sec, 1000));
+        break;
+    case PORT_TFDATA:
+    case PORT_SIG:
+    case PORT_SCR:
+    case PORT_SCR_CTL:
+    case PORT_SCR_ERR:
+    case PORT_SCR_ACT:
+    default:
+        p = (uint32_t *)pr;
+        p[offset >> 2] = val;
+        break;
+    }
+}
+
+static void ahci_mem_writel(void *ptr, target_phys_addr_t addr, uint32_t val)
+{
+    AHCIState *s = ptr;
+    uint32_t offset;
+    uint32_t *p;
+    int i;
+
+    addr = addr & 0xfff;
+
+    /* Only aligned reads are allowed on AHCI */
+    if (addr & 3) {
+        fprintf(stderr, "ahci: Mis-aligned write to addr 0x"TARGET_FMT_plx"\n",
+                addr);
+        return;
+    }
+
+    if(addr < 0x20)
+    {
+        switch(addr)
+	{
+        case HOST_IRQ_STAT:
+            s->control_regs.irqstatus &= ~val;
+            ahci_check_irq(s);
+	    break;
+        default:
+            /* general host control */
+            p = (uint32_t *)&s->control_regs;
+        }
+    }
+    else if(addr >= 0x100 && addr < 0x200)
+    {
+        ahci_port_write(s, (addr -0x100) >> 7, addr & 0x7f, val);
+    }
+}
+
+static CPUReadMemoryFunc *ahci_readfn[3]={
+    ahci_mem_readl,
+    ahci_mem_readl,
+    ahci_mem_readl
+};
+
+static CPUWriteMemoryFunc *ahci_writefn[3]={
+    ahci_mem_writel,
+    ahci_mem_writel,
+    ahci_mem_writel
+};
+
+struct ahci_cmd_hdr
+{
+    uint32_t opts;
+    uint32_t status;
+    uint32_t tbl_addr;
+    uint32_t tbl_addr_hi;
+    uint32_t reserved[4];
+};
+
+struct ahci_sg
+{
+    uint32_t addr;
+    uint32_t addr_hi;
+    uint32_t reserved;
+    uint32_t flags_size;
+};
+
+#if 0
+static void ahci_dump_cmd_hdr(struct ahci_cmd_hdr *hdr)
+{
+    fprintf(NULL, "AHCI CMD HDR: opts=%x status=%x tbl_addr=%x tbl_addr_hi=%x reserved=%x\n",
+            hdr->opts, hdr->status, hdr->tbl_addr, hdr->tbl_addr_hi, *(uint32_t *)hdr->reserved);
+}
+
+static void ahci_dump_sg(int i, struct ahci_sg *sg)
+{
+    fprintf(NULL, "AHCI SG%d: addr=%x addr_hi=%x reserved=%x flags_size=%x\n",
+            i, sg->addr, sg->addr_hi, sg->reserved, sg->flags_size);
+}
+#endif
+
+static uint32_t ahci_write_to_sglist(void *buffer,
+                                     uint32_t len,
+                                     struct ahci_sg *sglist,
+                                     uint32_t sgcount)
+{
+    uint32_t i = 0;
+    uint32_t total = 0;
+    uint32_t once;
+
+    for(i = 0;len && sgcount; i++)
+    {
+        once = sglist->flags_size + 1;
+        if (len < once)
+            once = len;
+
+        cpu_physical_memory_write(sglist->addr, buffer, once);
+
+        sglist++;
+        sgcount--;
+
+        len -=once;
+        buffer += once;
+        total += once;
+    }
+
+    return total;
+}
+
+static uint32_t ahci_read_from_sglist(void *buffer,
+                                      uint32_t len,
+                                      struct ahci_sg *sglist,
+                                      uint32_t sgcount)
+{
+    uint32_t i = 0;
+    uint32_t total = 0;
+    uint32_t once;
+
+    for(i = 0; len && sgcount; i++)
+    {
+        once = sglist->flags_size + 1;
+        if (len < once)
+            once = len;
+
+        sglist++;
+        sgcount--;
+
+        len -=once;
+        buffer += once;
+        total += once;
+    }
+
+    return total;
+}
+
+/*
+ * ATA Commands (only mandatory commands listed here)
+ */
+#define ATA_CMD_READ	  0x20 /* Read Sectors   (with retries)                       */
+#define ATA_CMD_READN	  0x21 /* Read Sectors   (no retries)                         */
+#define ATA_CMD_WRITE	  0x30 /* Write Sectores (with retries)                       */
+#define ATA_CMD_WRITEN	  0x31 /* Write Sectors  (no retries)                         */
+#define ATA_CMD_VRFY	  0x40 /* Read Verify    (with retries)                       */
+#define ATA_CMD_VRFYN	  0x41 /* Read verify    (no retries)                         */
+#define ATA_CMD_SEEK	  0x70 /* Seek                                                */
+#define ATA_CMD_DIAG	  0x90 /* Execute Device Diagnostic                           */
+#define ATA_CMD_INIT	  0x91 /* Initialize Device Parameters                        */
+#define ATA_CMD_RD_MULT	  0xC4 /* Read Multiple                                       */
+#define ATA_CMD_WR_MULT	  0xC5 /* Write Multiple                                      */
+#define ATA_CMD_SETMULT	  0xC6 /* Set Multiple Mode                                   */
+#define ATA_CMD_RD_DMA	  0xC8 /* Read DMA       (with retries)                       */
+#define ATA_CMD_RD_DMAN	  0xC9 /* Read DMS       (no retries)                         */
+#define ATA_CMD_WR_DMA	  0xCA /* Write DMA      (with retries)                       */
+#define ATA_CMD_WR_DMAN	  0xCB /* Write DMA      (no retries)                         */
+#define ATA_CMD_IDENT	  0xEC /* Identify Device                                     */
+#define ATA_CMD_SETF	  0xEF /* Set Features                                        */
+#define ATA_CMD_CHK_PWR	  0xE5 /* Check Power Mode                                    */
+#define ATA_CMD_READ_EXT  0x24 /* Read Sectors   (with retries) with 48bit addressing */
+#define ATA_CMD_WRITE_EXT 0x34 /* Write Sectores (with retries) with 48bit addressing */
+#define ATA_CMD_VRFY_EXT  0x42 /* Read Verify    (with retries) with 48bit addressing */
+
+/*
+ * ATAPI Commands
+ */
+#define ATAPI_CMD_IDENT 0xA1 /* Identify AT Atachment Packed Interface Device */
+#define ATAPI_CMD_PACKET 0xA0 /* Packed Command */
+
+
+#define ATAPI_CMD_INQUIRY 0x12
+#define ATAPI_CMD_REQ_SENSE 0x03
+#define ATAPI_CMD_READ_CAP 0x25
+#define ATAPI_CMD_START_STOP 0x1B
+#define ATAPI_CMD_READ_12 0xA8
+
+#if 0
+static void hexdump(const void* address, uint32_t len)
+{
+    const unsigned char* p = address;
+    int i, j;
+    char line[80];
+    int k;
+
+    for (i = 0; i < len; i += 16) {
+        k = 0;
+
+        k += snprintf(line + k, sizeof (line) - k, "%04x: ", i);
+
+	for (j = 0; j < 16 && i + j < len; j++)
+	    k += snprintf(line + k, sizeof (line) - k, "%02x ", p[i + j]);
+
+	for (j = 0; j < 16 && i + j < len; j++)
+	    k += snprintf(line + k, sizeof (line) - k, "%c",
+                    (p[i + j] < ' ' || p[i + j] > 0x7f) ? '.' : p[i + j]);
+
+	fprintf(NULL, "%s\n", line);
+    }
+}
+#endif
+
+static void ahci_handle_cmd(AHCIState *s, int port, int slot)
+{
+    struct ahci_port_regs *pr;
+    struct ahci_cmd_hdr cmd_hdr;
+    int cmdaddr;
+    int cmd_len;
+    uint8_t fis[0x80];
+    int prdt_num;
+    struct ahci_sg *prdt_buf;
+    int i;
+    IDEState *ide_state;
+
+    int64_t sector_num;
+    int nb_sectors;
+    int ret;
+
+    pr = &s->port_regs[port];
+    cmdaddr = pr->lst_addr + slot * 32;
+
+    cpu_physical_memory_read(cmdaddr, (uint8_t *)&cmd_hdr, 16);
+    cmd_len = (cmd_hdr.opts & 0x1f) * 4;
+
+    cpu_physical_memory_read(cmd_hdr.tbl_addr, fis, cmd_len);
+    prdt_num = cmd_hdr.opts >> 16;
+    prdt_buf = qemu_malloc(prdt_num * 32);
+
+    cpu_physical_memory_read(cmd_hdr.tbl_addr + 0x80, (uint8_t *)prdt_buf,
+                             prdt_num * 32);
+
+    switch (fis[0])
+    {
+    case 0x27:
+        break;
+    default:
+        hw_error("unknown command fis[0]=%02x fis[1]=%02x fis[2]=%02x\n",
+                 fis[0],
+                 fis[1],
+                 fis[2]);
+        break;
+    }
+
+    switch(fis[1])
+    {
+    case (1 << 7): /* cmd fis */
+        break;
+    case 0:
+        break;
+    default:
+        hw_error("unknown command fis[0]=%02x fis[1]=%02x fis[2]=%02x\n",
+                 fis[0],
+                 fis[1],
+                 fis[2]);
+        break;
+    }
+
+    if(fis[1] == (1 << 7))
+    {
+        ide_state = &s->ide_if[0];
+
+        switch (fis[2])
+        {
+        case ATA_CMD_IDENT:
+            ide_identify(ide_state);
+            ahci_write_to_sglist(ide_state->identify_data,
+                                 sizeof (ide_state->identify_data),
+                                 prdt_buf, prdt_num);
+
+            pr->irq_stat |= (1 << 2);
+            break;
+        case WIN_SETFEATURES:
+            pr->irq_stat |= (1 << 2);
+            break;
+        case ATA_CMD_RD_DMA:
+            sector_num=(fis[6] << 16) | (fis[5] << 8) | fis[4];
+            nb_sectors=(fis[13] << 8)| fis[12];
+
+            if(!nb_sectors)
+                nb_sectors=256;
+
+            ret = bdrv_read(ide_state->bs, sector_num, ide_state->io_buffer,
+                            nb_sectors);
+            if(!ret)
+                ahci_write_to_sglist(ide_state->io_buffer, nb_sectors * 512,
+                                     prdt_buf, prdt_num);
+            pr->irq_stat |= (1 << 2);
+            break;
+
+        case ATA_CMD_WR_DMA:
+            sector_num = (fis[6] << 16) | (fis[5] << 8)| fis[4];
+            nb_sectors = (fis[13] << 8) | fis[12];
+
+            if(!nb_sectors)
+                nb_sectors=256;
+            ahci_read_from_sglist(ide_state->io_buffer, nb_sectors * 512,
+                                  prdt_buf, prdt_num);
+
+            ret = bdrv_write(ide_state->bs, sector_num, ide_state->io_buffer,
+                             nb_sectors);
+            pr->irq_stat |= (1 << 2);
+            break;
+        default:
+            hw_error("unknown command fis[0]=%02x fis[1]=%02x fis[2]=%02x\n",
+                     fis[0],
+                     fis[1],
+                     fis[2]);
+            break;
+        }
+    }
+
+    pr->cmd_issue &= ~(1 << slot);
+    ahci_check_irq(s);
+
+    qemu_free(prdt_buf);
+}
+
+
+static void ahci_timer_function(void *opaque)
+{
+    AHCIState *d = opaque;
+    struct ahci_port_regs *pr;
+    int i,j;
+
+    for(i = 0; i < 2; i++)
+    {
+        pr = &d->port_regs[i];
+
+        for(j = 0; j < 32 && pr->cmd_issue; j++)
+        {
+            if(pr->cmd_issue & (1 << j))
+            {
+                ahci_handle_cmd(d, i, j);
+            }
+        }
+    }
+}
+
+static void ahci_reset(void *opaque)
+{
+    AHCIState *d = opaque;
+
+    d->control_regs.cap = 2 | (0x1f << 8);
+    d->control_regs.ghc = 1 << 31;
+    d->control_regs.impl = 1; /* 2 ports */
+    d->control_regs.version = 0x10100;
+}
+
+static void ahci_pci_map(PCIDevice *pci_dev, int region_num,
+                         uint32_t addr, uint32_t size, int type)
+{
+    AHCIState *d = (AHCIState *)pci_dev;
+
+    cpu_register_physical_memory(addr, size, d->mem);
+}
+
+static void ahci_irq_set(void *opaque, int n, int level)
+{
+}
+
+void pci_ahci_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn)
+{
+    AHCIState *d;
+    uint8_t *pci_conf;
+    qemu_irq *irqs;
+
+    d = (AHCIState *)pci_register_device(bus, "QEMUware AHCI", sizeof (AHCIState),
+                                                               devfn,
+                                                               NULL, NULL);
+
+    pci_conf = d->dev.config;
+    pci_config_set_vendor_id(pci_conf, PCI_VENDOR_ID_INTEL);
+    pci_config_set_device_id(pci_conf, 0x2652); /* DEVICE ID */
+
+    pci_conf[PCI_COMMAND]		= 0x07;		/* I/O + Memory */
+    pci_conf[PCI_CLASS_DEVICE]	= 0;
+    pci_conf[0x0b]		= 1;//storage
+    pci_conf[0x0c]		= 0x08;		/* Cache line size */
+    pci_conf[0x0d]		= 0x40;		/* Latency timer */
+    pci_conf[0x0e]		= 0x00; /* PCI_CLASS_HEADERTYPE_00 */
+    pci_conf[0x3d] = 1;    /* interrupt pin 0 */
+
+    qemu_register_reset(ahci_reset, d);
+    ahci_reset(d);
+
+    d->mem = cpu_register_io_memory(0, ahci_readfn, ahci_writefn, d);
+    d->timer = qemu_new_timer(vm_clock, ahci_timer_function, d);
+
+    pci_register_io_region((PCIDevice *)d, 5, 0x200,
+                           PCI_ADDRESS_SPACE_MEM, ahci_pci_map);
+
+    irqs = qemu_allocate_irqs(ahci_irq_set, d, 1);
+    d->irq = irqs[0];
+
+    ide_init2(&d->ide_if[0], hd_table[0], hd_table[1], d->irq);
+}
+
 #if defined(TARGET_PPC)
 /***********************************************************/
 /* MacIO based PowerPC IDE */
diff --git a/hw/pc.c b/hw/pc.c
index 9f017a9..6eeb709 100644
--- a/hw/pc.c
+++ b/hw/pc.c
@@ -70,6 +70,7 @@ extern size_t acpi_tables_len;
 extern int vga_passthrough;
 extern int vgpu_enabled;
 extern int xengfx_enabled;
+extern int ahci_enabled;
 
 static fdctrl_t *floppy_controller;
 static RTCState *rtc_state;
@@ -1146,7 +1147,27 @@ vga_bios_error:
     }
 
     if (pci_enabled) {
-        pci_piix3_ide_init(pci_bus, hd, piix3_devfn + 1, i8259);
+        if (ahci_enabled) {
+#if 0
+            pci_ahci_ide_init(pci_bus, hd, -1);
+#else
+            /* HACK: attach SCSI drives on the ahci controller and leave the */
+            /* IDE ones on piix3 */
+            BlockDriverState *sd[2];
+
+            for (i = 0; i < 2; i++) {
+                index = drive_get_index(IF_SCSI, 0, i);
+                if (index != -1)
+                    sd[i] = drives_table[index].bdrv;
+                else
+                    sd[i] = NULL;
+            }
+
+            pci_ahci_ide_init(pci_bus, sd, -1);
+            pci_piix3_ide_init(pci_bus, hd, piix3_devfn + 1, i8259);
+#endif
+        } else
+            pci_piix3_ide_init(pci_bus, hd, piix3_devfn + 1, i8259);
     } else {
         for(i = 0; i < MAX_IDE_BUS; i++) {
             isa_ide_init(ide_iobase[i], ide_iobase2[i], i8259[ide_irq[i]],
@@ -1198,6 +1219,7 @@ vga_bios_error:
         i440fx_init_memory_mappings(i440fx_state);
     }
 
+#if 0
     if (pci_enabled) {
 	int max_bus;
         int bus, unit;
@@ -1215,6 +1237,7 @@ vga_bios_error:
 	    }
         }
     }
+#endif
 
     if (pci_enabled) {
         PCI_EMULATION_INFO *p;
diff --git a/hw/pc.h b/hw/pc.h
index 37eaa17..8859fd9 100644
--- a/hw/pc.h
+++ b/hw/pc.h
@@ -171,6 +171,7 @@ void pci_piix3_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn,
                         qemu_irq *pic);
 void pci_piix4_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn,
                         qemu_irq *pic);
+void pci_ahci_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn);
 void ide_unplug_harddisks(void);
 void ide_unplug_aux_harddisks(void);
 
diff --git a/vl.c b/vl.c
index 6ecc299..8442d61 100644
--- a/vl.c
+++ b/vl.c
@@ -242,6 +242,7 @@ int vgpu_enabled = 0;
 const char *dom0_input = NULL;
 int intel = 0;
 int xengfx_enabled = 0;
+int ahci_enabled = 0;
 #endif
 int usb_enabled = 0;
 int smp_cpus = 1;
@@ -4393,6 +4394,7 @@ enum {
     QEMU_OPTION_dom0_input,
     QEMU_OPTION_intel,
     QEMU_OPTION_xengfx,
+    QEMU_OPTION_ahci,
 
     /* Debug/Expert options: */
     QEMU_OPTION_serial,
@@ -4576,6 +4578,7 @@ static const QEMUOption qemu_options[] = {
     { "dom0-input", 1, QEMU_OPTION_dom0_input },
     { "intel", 0, QEMU_OPTION_intel },
     { "xengfx", 0, QEMU_OPTION_xengfx },
+    { "ahci", 0, QEMU_OPTION_ahci },
 #if defined(CONFIG_XEN) && !defined(CONFIG_DM)
     { "xen-domid", HAS_ARG, QEMU_OPTION_xen_domid },
     { "xen-create", 0, QEMU_OPTION_xen_create },
@@ -5544,6 +5547,8 @@ int main(int argc, char **argv, char **envp)
             case QEMU_OPTION_xengfx:
                 xengfx_enabled = 1;
                 break;
+            case QEMU_OPTION_ahci:
+                ahci_enabled = 1;
             case QEMU_OPTION_direct_pci:
                direct_pci = optarg;
                 break;
