diff --git a/hw/pt-graphics.c b/hw/pt-graphics.c
index ad2fa79..c5d7a4c 100644
--- a/hw/pt-graphics.c
+++ b/hw/pt-graphics.c
@@ -68,10 +68,16 @@ uint32_t igd_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len)
         return pci_default_read_config(pci_dev, config_addr, len);
     }
 
+
+
     switch (config_addr)
     {
         case 0x00:        /* vendor id */
         case 0x02:        /* device id */
+        case 0x08:        /* revision id */
+        case 0x2c:        /* sybsystem vendor id */
+        case 0x2e:        /* sybsystem id */
+        case 0x50:        /* processor graphics control register */
         case 0x52:        /* processor graphics control register */
         case 0xa0:        /* top of memory */
         case 0xb0:        /* ILK: BSM: should read from dev 2 offset 0x5c */
@@ -79,13 +85,32 @@ uint32_t igd_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len)
         case 0xa4:        /* SNB: graphics base of stolen memory */
         case 0xa8:        /* SNB: base of GTT stolen memory */
             val = pt_pci_host_read(0, PCI_SLOT(pci_dev->devfn),
-                                   0, config_addr, len);
+                    0, config_addr, len);
             PT_LOG("pci_config_read: %x:%x.%x: addr=%x len=%x val=%x\n",
                    pci_bus_num(pci_dev->bus), PCI_SLOT(pci_dev->devfn),
                    PCI_FUNC(pci_dev->devfn), config_addr, len, val);
             break;
         default:
-            val = pci_default_read_config(pci_dev, config_addr, len);
+            val = pt_pci_host_read(0, 0, 0, 0x34, 1);
+
+            /* Only do the following for vendor specific caps (0x09) */
+            if ((val != 0) && (pt_pci_host_read(0, 0, 0, val, 1) == 0x09))
+            {
+                if (config_addr == 0x34) /* reading caps pointer */
+                    return 0;
+                if ((config_addr >= val) && (config_addr < (val + 12)))
+                {
+                    /* don't allow it to chain further */
+                    if (config_addr == (val + 1))
+                    {
+                        return 0;
+                    }
+                    /* reading vendor specific capabilities from PCH */
+                    return pt_pci_host_read(0, 0, 0, config_addr, len);
+                }
+            }
+            else
+                val = pci_default_read_config(pci_dev, config_addr, len);
     }
     return val;
 }
