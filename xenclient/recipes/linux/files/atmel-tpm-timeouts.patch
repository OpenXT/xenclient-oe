diff --git a/drivers/char/tpm/tpm.c b/drivers/char/tpm/tpm.c
index e3c974a..162bf3f 100644
--- a/drivers/char/tpm/tpm.c
+++ b/drivers/char/tpm/tpm.c
@@ -591,6 +591,11 @@ int tpm_get_timeouts(struct tpm_chip *chip)
 	if (timeout)
 		chip->vendor.timeout_d = usecs_to_jiffies(timeout * scale);
 
+	/* Provide ability for vendor overrides of timeout values in case
+	 * of misreporting. */
+	if (chip->vendor.update_timeouts != NULL)
+		chip->vendor.update_timeouts(chip);
+
 duration:
 	tpm_cmd.header.in = tpm_getcap_header;
 	tpm_cmd.params.getcap_in.cap = TPM_CAP_PROP;
diff --git a/drivers/char/tpm/tpm.h b/drivers/char/tpm/tpm.h
index a7bfc17..df73512 100644
--- a/drivers/char/tpm/tpm.h
+++ b/drivers/char/tpm/tpm.h
@@ -96,6 +96,7 @@ struct tpm_vendor_specific {
 	void (*cancel) (struct tpm_chip *);
 	u8 (*status) (struct tpm_chip *);
 	void (*release) (struct device *);
+	void (*update_timeouts) (struct tpm_chip *);
 	struct miscdevice miscdev;
 	struct attribute_group *attr_group;
 	struct list_head list;
diff --git a/drivers/char/tpm/tpm_tis.c b/drivers/char/tpm/tpm_tis.c
index cfb62c2..bab0b60 100644
--- a/drivers/char/tpm/tpm_tis.c
+++ b/drivers/char/tpm/tpm_tis.c
@@ -419,6 +419,73 @@ out:
 	return rc;
 }
 
+struct tis_vendor_timeout_override {
+	u32 did_vid;
+	unsigned long timeout_us[4];
+};
+
+static struct tis_vendor_timeout_override vendor_timeout_overrides[] = {
+	{ 0x32041114, { 75000, 75000, 75000, 75000 } }, /* Atmel 3204 */
+};
+
+static void report_updated_timeout(struct tpm_chip *chip, const char *id,
+				   unsigned long old, unsigned long new)
+{
+	dev_info(chip->dev, "  timeout_%s %d -> %d\n", id,
+		 jiffies_to_usecs(old), jiffies_to_usecs(new));
+}
+
+static void tpm_tis_update_timeouts(struct tpm_chip *chip)
+{
+	int i;
+	u32 did_vid;
+
+	did_vid = ioread32(chip->vendor.iobase + TPM_DID_VID(0));
+
+	for (i = 0; i < ARRAY_SIZE(vendor_timeout_overrides); i++) {
+		struct tis_vendor_timeout_override *tod;
+		unsigned long new;
+
+		if (vendor_timeout_overrides[i].did_vid != did_vid)
+			continue;
+
+		tod = &vendor_timeout_overrides[i];
+
+		dev_info(chip->dev, "Adjusting reported timeouts:\n");
+
+		new = usecs_to_jiffies(tod->timeout_us[0]);
+		if (new != 0) {
+			report_updated_timeout(chip, "a",
+					       chip->vendor.timeout_a, new);
+			chip->vendor.timeout_a = new;
+		}
+
+		new = usecs_to_jiffies(tod->timeout_us[1]);
+		if (new != 0) {
+			report_updated_timeout(chip, "b",
+					       chip->vendor.timeout_b, new);
+			chip->vendor.timeout_b = new;
+		}
+
+		new = usecs_to_jiffies(tod->timeout_us[2]);
+		if (new != 0) {
+			report_updated_timeout(chip, "c",
+					       chip->vendor.timeout_c, new);
+			chip->vendor.timeout_c = new;
+		}
+
+		new = usecs_to_jiffies(tod->timeout_us[3]);
+		if (new != 0) {
+			report_updated_timeout(chip, "d",
+		       			       chip->vendor.timeout_d, new);
+			chip->vendor.timeout_d = new;
+		}
+
+		chip->vendor.timeout_adjusted = true;
+		break;
+	}
+}
+
 static bool tpm_tis_req_canceled(struct tpm_chip *chip, u8 status)
 {
 	switch (chip->vendor.manufacturer_id) {
@@ -475,6 +542,7 @@ static struct tpm_vendor_specific tpm_tis = {
 	.recv = tpm_tis_recv,
 	.send = tpm_tis_send,
 	.cancel = tpm_tis_ready,
+	.update_timeouts = tpm_tis_update_timeouts,
 	.req_complete_mask = TPM_STS_DATA_AVAIL | TPM_STS_VALID,
 	.req_complete_val = TPM_STS_DATA_AVAIL | TPM_STS_VALID,
 	.req_canceled = tpm_tis_req_canceled,
