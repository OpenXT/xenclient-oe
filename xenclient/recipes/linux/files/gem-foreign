diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index bdcf1e4..848f09d 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -14,6 +14,7 @@ i915-y := i915_drv.o i915_dma.o i915_irq.o \
 	  i915_gem_gtt.o \
 	  i915_gem_stolen.o \
 	  i915_gem_tiling.o \
+	  i915_gem_foreign.o \
 	  i915_gem_userptr.o \
 	  i915_sysfs.o \
 	  i915_trace_points.o \
diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 3453254..0f9acaf 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1891,6 +1891,7 @@ struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_CREATE, i915_gem_context_create_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_DESTROY, i915_gem_context_destroy_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_REG_READ, i915_reg_read_ioctl, DRM_UNLOCKED),
+	DRM_IOCTL_DEF_DRV(I915_GEM_FOREIGN, i915_gem_foreign_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED),
 };
 
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 8c24b0d..692f81f 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1311,6 +1311,7 @@ struct drm_i915_gem_object {
 
 	struct sg_table *pages;
 	int pages_pin_count;
+	dma_addr_t *pfnlist;
 
 	/* prime dma-buf support */
 	void *dma_buf_vmapping;
@@ -1353,6 +1354,14 @@ struct drm_i915_gem_object {
 };
 #define to_gem_object(obj) (&((struct drm_i915_gem_object *)(obj))->base)
 
+struct i915_gem_foreign_object {
+	struct drm_i915_gem_object gem;
+	uint64_t *mfns;
+	size_t num_pages;
+	uint32_t flags;
+	struct page **pvec;
+};
+
 struct i915_gem_userptr_object {
 	struct drm_i915_gem_object gem;
 	uintptr_t user_ptr;
@@ -1369,6 +1378,7 @@ union drm_i915_gem_objects {
 	struct drm_i915_gem_object base;
 	union {
 		struct i915_gem_userptr_object userptr;
+		struct i915_gem_foreign_object foreign;
 	};
 };
 
@@ -1669,6 +1679,8 @@ int i915_gem_entervt_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file_priv);
 int i915_gem_leavevt_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file_priv);
+int i915_gem_foreign_ioctl(struct drm_device *dev, void *data,
+                           struct drm_file *file);
 int i915_gem_userptr_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file);
 int i915_gem_set_tiling(struct drm_device *dev, void *data,
@@ -1687,6 +1699,8 @@ void i915_gem_object_init(struct drm_i915_gem_object *obj,
 			 const struct drm_i915_gem_object_ops *ops);
 struct drm_i915_gem_object *i915_gem_alloc_object(struct drm_device *dev,
 						  size_t size);
+void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
+			      size_t size);
 void i915_gem_free_object(struct drm_gem_object *obj);
 
 int __must_check i915_gem_object_pin(struct drm_i915_gem_object *obj,
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 06b6900..ad4ed7b 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -79,8 +79,8 @@ static void i915_gem_info_add_obj(struct drm_i915_private *dev_priv,
 	dev_priv->mm.object_memory += size;
 }
 
-static void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
-				     size_t size)
+void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
+			      size_t size)
 {
 	dev_priv->mm.object_count--;
 	dev_priv->mm.object_memory -= size;
@@ -1836,6 +1836,7 @@ i915_gem_object_get_pages_gtt(struct drm_i915_gem_object *obj)
 	return 0;
 
 err_pages:
+	DRM_ERROR("shmem_read_mapping_page_gfp failed\n");
 	sg_mark_end(sg);
 	for_each_sg_page(st->sgl, &sg_iter, st->nents, 0)
 		page_cache_release(sg_page_iter_page(&sg_iter));
@@ -3110,8 +3111,10 @@ i915_gem_object_bind_to_gtt(struct drm_i915_gem_object *obj,
 	}
 
 	ret = i915_gem_object_get_pages(obj);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_get_pages failed");
 		return ret;
+	}
 
 	i915_gem_object_pin_pages(obj);
 
@@ -3130,9 +3133,12 @@ search_free:
 					       obj->cache_level,
 					       map_and_fenceable,
 					       nonblocking);
-		if (ret == 0)
+		if (ret == 0) {
+			DRM_ERROR("drm_mm_insert_* failed... retrying\n");
 			goto search_free;
+		}
 
+		DRM_ERROR("drm_mm_insert_* failed... aborting\n");
 		i915_gem_object_unpin_pages(obj);
 		kfree(node);
 		return ret;
@@ -3145,6 +3151,7 @@ search_free:
 
 	ret = i915_gem_gtt_prepare_object(obj);
 	if (ret) {
+		DRM_ERROR("i915_gem_gtt_prepare_object failed\n");
 		i915_gem_object_unpin_pages(obj);
 		drm_mm_put_block(node);
 		return ret;
@@ -3459,8 +3466,10 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 
 	if (pipelined != obj->ring) {
 		ret = i915_gem_object_sync(obj, pipelined);
-		if (ret)
+		if (ret) {
+			DRM_ERROR("i915_gem_object_sync failed\n");
 			return ret;
+		}
 	}
 
 	/* The display engine is not coherent with the LLC cache on gen6.  As
@@ -3473,16 +3482,20 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 	 * with that bit in the PTE to main memory with just one PIPE_CONTROL.
 	 */
 	ret = i915_gem_object_set_cache_level(obj, I915_CACHE_NONE);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_set_cache_level failed\n");
 		return ret;
+	}
 
 	/* As the user may map the buffer once pinned in the display plane
 	 * (e.g. libkms for the bootup splash), we have to ensure that we
 	 * always use map_and_fenceable for all scanout buffers.
 	 */
 	ret = i915_gem_object_pin(obj, alignment, true, false);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_pin failed\n");
 		return ret;
+	}
 
 	i915_gem_object_flush_cpu_write_domain(obj);
 
@@ -3654,8 +3667,10 @@ i915_gem_object_pin(struct drm_i915_gem_object *obj,
 		ret = i915_gem_object_bind_to_gtt(obj, alignment,
 						  map_and_fenceable,
 						  nonblocking);
-		if (ret)
+		if (ret) {
+			DRM_ERROR("i915_gem_object_bind_to_gtt failed\n");
 			return ret;
+		}
 
 		if (!dev_priv->mm.aliasing_ppgtt)
 			i915_gem_gtt_bind_object(obj, obj->cache_level);
diff --git a/drivers/gpu/drm/i915/i915_gem_foreign.c b/drivers/gpu/drm/i915/i915_gem_foreign.c
new file mode 100644
index 0000000..2066222
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_gem_foreign.c
@@ -0,0 +1,261 @@
+/*
+ * Copyright Â© 2013 Citrix Systems, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ */
+
+#include "drmP.h"
+#include "i915_drm.h"
+#include "i915_drv.h"
+#include "i915_trace.h"
+#include "intel_drv.h"
+#include <linux/mmu_notifier.h>
+#include <linux/swap.h>
+#include <asm/xen/hypervisor.h>
+#include <asm/xen/hypercall.h>
+#include <xen/page.h>
+#include <xen/xen-ops.h>
+#include <xen/balloon.h>
+#include <xen/interface/memory.h>
+
+/* TODO can't get DRM logging working, hack for now, remove later */
+#undef DRM_DEBUG_DRIVER
+#define DRM_DEBUG_DRIVER DRM_INFO
+
+static struct i915_gem_foreign_object *to_foreign_object(struct drm_i915_gem_object *obj)
+{
+	return container_of(obj, struct i915_gem_foreign_object, gem);
+}
+
+static void
+i915_gem_foreign_free_pages(struct i915_gem_foreign_object *vmap,
+			    int num_pages)
+{
+	if ((vmap->flags & I915_FOREIGN_BALLOON_PAGES) == 0) {
+		int i;
+		for (i = 0; i < num_pages; i++) {
+			__free_page(vmap->pvec[i]);
+		}
+        }
+        else {
+		free_xenballooned_pages(num_pages, vmap->pvec);
+        }
+}
+
+static void
+i915_gem_foreign_remove_override(struct i915_gem_foreign_object *vmap,
+				 int num_pages)
+{
+	int i;
+
+	for (i = 0; i < num_pages; i++) {
+		if (m2p_remove_override(vmap->pvec[i], NULL))
+			BUG();
+		if (!(i % 100)) {
+			DRM_DEBUG_DRIVER("Foreign unmap(%d) pfn = %lx, kaddr = %p\n",
+			 i, page_to_pfn(vmap->pvec[i]),
+			 pfn_to_kaddr(page_to_pfn(vmap->pvec[i])));
+		}
+	}
+}
+
+static int
+i915_gem_foreign_get_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	struct sg_table *st = NULL;
+	struct scatterlist *sg = NULL;
+	int i, ret;
+
+	DRM_DEBUG_DRIVER("**Foreign get pages.\n");
+
+	vmap->pvec = kmalloc(vmap->num_pages*sizeof(struct page *),
+			 GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY);
+	if (vmap->pvec == NULL) {
+		vmap->pvec = drm_malloc_ab(vmap->num_pages, sizeof(struct page *));
+		if (vmap->pvec == NULL)
+			return -ENOMEM;
+	}
+
+	st = kmalloc(sizeof(*st), GFP_KERNEL);
+	if (st == NULL) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	if (sg_alloc_table(st, vmap->num_pages, GFP_KERNEL)) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	if ((vmap->flags & I915_FOREIGN_BALLOON_PAGES) == 0) {
+		for (i = 0; i < vmap->num_pages; i++) {
+			vmap->pvec[i] = alloc_page(GFP_HIGHUSER);
+			if (!vmap->pvec[i]) {
+				i915_gem_foreign_free_pages(vmap, i - 1);
+				ret = -ENOMEM;
+				goto err0;
+			}
+		}
+	}
+	else {
+		/* Using balloon allocated pages to override */
+		ret = alloc_xenballooned_pages(vmap->num_pages, vmap->pvec,
+			(vmap->flags & I915_FOREIGN_BALLOON_HIGH) ? true : false);
+		if (ret) {
+			DRM_ERROR("Xen allocate balloon memory failed\n");
+			goto err0;
+		}
+	}
+
+	for (i = 0; i < vmap->num_pages; i++) {
+		ret = m2p_add_override(vmap->mfns[i], vmap->pvec[i], NULL);
+		if (ret) {
+			i915_gem_foreign_remove_override(vmap, i - 1);
+			goto err1;
+		}
+		if (!(i % 100)) {
+			DRM_DEBUG_DRIVER("Foreign map(%d) mfn = %llx, pfn = %lx, kaddr = %p, valid = %d\n",
+			 i, vmap->mfns[i], page_to_pfn(vmap->pvec[i]),
+			 pfn_to_kaddr(page_to_pfn(vmap->pvec[i])),
+			 virt_addr_valid(pfn_to_kaddr(page_to_pfn(vmap->pvec[i]))));
+		}
+	}
+
+	for_each_sg(st->sgl, sg, vmap->num_pages, i) {
+		if (!(i % 100)) {
+			DRM_DEBUG_DRIVER("Foreign page[%d] = %p\n",
+			 i, vmap->pvec[i]);
+		}
+		sg_set_page(sg, vmap->pvec[i], PAGE_SIZE, 0);
+	}
+
+	obj->pages = st;
+
+	return 0;
+
+err1:
+	i915_gem_foreign_free_pages(vmap, vmap->num_pages);
+err0:
+	if (st) {
+		sg_free_table(st);
+		kfree(st);
+	}
+	drm_free_large(vmap->pvec);
+
+	return ret;
+}
+
+static void
+i915_gem_foreign_put_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	int num_pages = obj->base.size >> PAGE_SHIFT;
+
+	DRM_DEBUG_DRIVER("**Foreign put pages.\n");
+
+	i915_gem_foreign_remove_override(vmap, num_pages);
+
+	i915_gem_foreign_free_pages(vmap, num_pages);
+
+	sg_free_table(obj->pages);
+	kfree(obj->pages);
+	drm_free_large(vmap->pvec);
+}
+
+static void
+i915_gem_foreign_release(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+
+	kfree(vmap->mfns);
+}
+
+static const struct drm_i915_gem_object_ops i915_gem_foreign_ops = {
+	.get_pages = i915_gem_foreign_get_pages,
+	.put_pages = i915_gem_foreign_put_pages,
+	.release = i915_gem_foreign_release,
+};
+
+/**
+ * Creates a new mm object that wraps some user memory.
+ */
+int
+i915_gem_foreign_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_i915_gem_foreign *args = data;
+	struct i915_gem_foreign_object *obj;
+	uint32_t size;
+	int ret = -ENOMEM;
+	u32 handle;
+
+	DRM_DEBUG_DRIVER("**Foreign init - mfns: %p num_pages: 0x%x flags: 0x%x\n",
+			args->mfns, args->num_pages, args->flags);
+
+	if ((args->num_pages * PAGE_SIZE) > dev_priv->gtt.total)
+		return -E2BIG;
+
+	/* Allocate the new object */
+	obj = kzalloc(sizeof(*obj), GFP_KERNEL);
+	if (!obj)
+		return -ENOMEM;
+
+	if (drm_gem_private_object_init(dev, &obj->gem.base,
+					args->num_pages * PAGE_SIZE))
+		goto err;
+
+	i915_gem_object_init(&obj->gem, &i915_gem_foreign_ops);
+	obj->gem.cache_level = I915_CACHE_LLC_MLC;
+
+	obj->gem.gtt_offset = 0;
+	obj->num_pages = args->num_pages;
+	obj->flags = args->flags;
+
+	/* Pull up MFN list from userland */
+	size = args->num_pages * sizeof(uint64_t);
+	obj->mfns = kzalloc(size, GFP_KERNEL);
+	if (!obj->mfns)
+		goto err;
+
+	if (DRM_COPY_FROM_USER(obj->mfns, args->mfns, size)) {
+		ret = -EFAULT;
+		goto err;
+	}
+
+	ret = drm_gem_handle_create(file, &obj->gem.base, &handle);
+	/* Drop reference from allocate - handle holds it now. If the
+	 * previous call failed, this will drop the ref cound to 0
+	 * freeing undoing everything above and cleaning up in the
+	 * release function above.
+         */
+	drm_gem_object_unreference(&obj->gem.base);
+	if (ret)
+		return ret;
+
+	args->handle = handle;
+	return 0;
+
+err:
+	kfree(obj->mfns);
+	kfree(obj);
+	return ret;
+}
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 90a7c17..df064a1 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -1801,8 +1801,10 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 
 	dev_priv->mm.interruptible = false;
 	ret = i915_gem_object_pin_to_display_plane(obj, alignment, pipelined);
-	if (ret)
+	if (ret) {
+                DRM_ERROR("pin_to_display_plane failed\n");
 		goto err_interruptible;
+        }
 
 	/* Install a fence for tiled scan-out. Pre-i965 always needs a
 	 * fence, whereas 965+ only requires a fence if using
@@ -1810,8 +1812,10 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 	 * a fence as the cost is not that onerous.
 	 */
 	ret = i915_gem_object_get_fence(obj);
-	if (ret)
+	if (ret){
+                DRM_ERROR("object_get_fence failed\n");
 		goto err_unpin;
+        }
 
 	i915_gem_object_pin_fence(obj);
 
@@ -2179,7 +2183,7 @@ intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 					 NULL);
 	if (ret != 0) {
 		mutex_unlock(&dev->struct_mutex);
-		DRM_ERROR("pin & fence failed\n");
+		DRM_ERROR("pin & fence failed: %d\n", ret);
 		return ret;
 	}
 
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 489e892..5c7e09f 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -199,6 +199,8 @@ typedef struct _drm_i915_sarea {
 #define DRM_I915_GEM_GET_CACHING	0x30
 #define DRM_I915_REG_READ		0x31
 #define DRM_I915_GEM_USERPTR		0x32
+/* RESERVE #define DRM_I915_GEM_VGTBUFFER		0x33*/
+#define DRM_I915_GEM_FOREIGN		0x34
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -248,6 +250,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_IOCTL_I915_GEM_CONTEXT_CREATE	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_CREATE, struct drm_i915_gem_context_create)
 #define DRM_IOCTL_I915_GEM_CONTEXT_DESTROY	DRM_IOW (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_DESTROY, struct drm_i915_gem_context_destroy)
 #define DRM_IOCTL_I915_REG_READ			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_REG_READ, struct drm_i915_reg_read)
+#define DRM_IOCTL_I915_GEM_FOREIGN		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_FOREIGN, struct drm_i915_gem_foreign)
 #define DRM_IOCTL_I915_GEM_USERPTR			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_USERPTR, struct drm_i915_gem_userptr)
 
 /* Allow drivers to submit batchbuffers directly to hardware, relying
@@ -984,6 +987,15 @@ struct drm_i915_reg_read {
 	__u64 val; /* Return value */
 };
 
+struct drm_i915_gem_foreign {
+	__u64 __user *mfns;
+	__u32 num_pages;
+#define I915_FOREIGN_BALLOON_PAGES 0x00000001
+#define I915_FOREIGN_BALLOON_HIGH  0x00000002
+	__u32 flags;
+	__u32 handle;
+};
+
 struct drm_i915_gem_userptr {
 	__u64 user_ptr;
 	__u32 user_size;
