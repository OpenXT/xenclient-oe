diff --git a/hw/acpi.c b/hw/acpi.c
index 8c9dcc5..6a2b8cd 100644
--- a/hw/acpi.c
+++ b/hw/acpi.c
@@ -18,12 +18,25 @@
  * Contributions after 2012-01-13 are licensed under the terms of the
  * GNU GPL, version 2 or (at your option) any later version.
  */
+/* XenClient: acpi
+ * add status messages */
+#ifdef CONFIG_SYSLOG_LOGGING
+# include "logging.h"
+#else
+# include "stdio.h"
+#endif
+
 #include "sysemu/sysemu.h"
 #include "hw.h"
 #include "pc.h"
 #include "acpi.h"
 #include "monitor/monitor.h"
 
+
+/* XenClient:
+ * needed for 'xenstore_update_power' */
+#include "xen.h"
+
 struct acpi_table_header {
     uint16_t _length;         /* our length, not actual part of the hdr */
                               /* XXX why we have 2 length fields here? */
@@ -41,6 +54,16 @@ struct acpi_table_header {
 #define ACPI_TABLE_HDR_SIZE sizeof(struct acpi_table_header)
 #define ACPI_TABLE_PFX_SIZE sizeof(uint16_t)  /* size of the extra prefix */
 
+/* XenClient: acpi */
+/* Sleep state type codes as defined by the \_Sx objects in the DSDT. */
+/* These must be kept in sync with the DSDT (hvmloader/acpi/dsdt.asl) */
+#define SLP_TYP_S4_V0     (6)
+#define SLP_TYP_S3_V0     (5)
+#define SLP_TYP_S5_V0     (7)
+#define SLP_TYP_S4_V1     (0)
+#define SLP_TYP_S3_V1     (1)
+#define SLP_TYP_S5_V1     (0)
+
 static const char dfl_hdr[ACPI_TABLE_HDR_SIZE] =
     "\0\0"                   /* fake _length (2) */
     "QEMU\0\0\0\0\1\0"       /* sig (4), len(4), revno (1), csum (1) */
@@ -421,20 +444,33 @@ static void acpi_pm1_cnt_write(ACPIREGS *ar, uint16_t val)
 {
     ar->pm1.cnt.cnt = val & ~(ACPI_BITMASK_SLEEP_ENABLE);
 
+    /* XenClient: acpi */
     if (val & ACPI_BITMASK_SLEEP_ENABLE) {
         /* change suspend type */
         uint16_t sus_typ = (val >> 10) & 7;
         switch(sus_typ) {
-        case 0: /* soft power off */
+        case SLP_TYP_S3_V0: /* S3: Suspend to RAM: Sleep */
+            /* Same code for V0 and V1 */
+        case SLP_TYP_S3_V1:
+            qemu_system_suspend_request();
+            xenstore_update_power(XENSTORE_PM_TYPE_SLEEP);
+            break;
+        case SLP_TYP_S4_V0: /* S4: Suspend to disk: Hibernation */
+            monitor_protocol_event(QEVENT_SUSPEND_DISK, NULL);
             qemu_system_shutdown_request();
+            xenstore_update_power(XENSTORE_PM_TYPE_HIBERNATE);
             break;
-        case 1:
-            qemu_system_suspend_request();
+        case SLP_TYP_S5_V0: /* S5: Shutdown */
+            /* Same code for V0 and V1 */
+        case SLP_TYP_S5_V1:
+            qemu_system_shutdown_request();
+            xenstore_update_power(XENSTORE_PM_TYPE_SHUTDOWN);
             break;
         default:
             if (sus_typ == ar->pm1.cnt.s4_val) { /* S4 request */
                 monitor_protocol_event(QEVENT_SUSPEND_DISK, NULL);
                 qemu_system_shutdown_request();
+                xenstore_update_power(XENSTORE_PM_TYPE_HIBERNATE);
             }
             break;
         }
diff --git a/hw/acpi_piix4.c b/hw/acpi_piix4.c
index 65b2601..23994d9 100644
--- a/hw/acpi_piix4.c
+++ b/hw/acpi_piix4.c
@@ -30,6 +30,9 @@
 #include "fw_cfg.h"
 #include "exec/address-spaces.h"
 
+/* XenClient: acpi */
+#include "xen.h" /* xen_enabled */
+
 //#define DEBUG
 
 #ifdef DEBUG
@@ -395,6 +398,10 @@ static int piix4_pm_initfn(PCIDevice *dev)
     /* APM */
     apm_init(dev, &s->apm, apm_ctrl_changed, s);
 
+    /* XenClient: acpi
+     * Enable ACPI, QEMU doesn't enable it by default */
+    apm_ctrl_changed(ACPI_ENABLE, s);
+
     if (s->kvm_enabled) {
         /* Mark SMM as already inited to prevent SMM from running.  KVM does not
          * support SMM mode. */
diff --git a/hw/xen.h b/hw/xen.h
index 2fca7c6..db7a1d2 100644
--- a/hw/xen.h
+++ b/hw/xen.h
@@ -68,4 +68,15 @@ void xen_register_framebuffer(struct MemoryRegion *mr);
 #  define HVM_MAX_VCPUS 32
 #endif
 
+/* Xenclient:
+ * Power Management */
+enum xenstore_pm_type {
+  XENSTORE_PM_TYPE_REBOOT = 0,
+  XENSTORE_PM_TYPE_SLEEP = 3,
+  XENSTORE_PM_TYPE_HIBERNATE = 4,
+  XENSTORE_PM_TYPE_SHUTDOWN = 5
+};
+
+int xenstore_update_power(enum xenstore_pm_type const type);
+
 #endif /* QEMU_HW_XEN_H */
diff --git a/hw/xen_backend.c b/hw/xen_backend.c
index 3fa3009..a227ca6 100644
--- a/hw/xen_backend.c
+++ b/hw/xen_backend.c
@@ -41,6 +41,9 @@
 
 #include <xen/grant_table.h>
 
+#include "ui/xen-input.h"
+#include "xen-dmbus.h"
+
 /* ------------------------------------------------------------- */
 
 /* public */
@@ -785,3 +788,23 @@ void xen_be_printf(struct XenDevice *xendev, int msg_level, const char *fmt, ...
     }
     qemu_log_flush();
 }
+
+/****************************************************
+ * XenClient: Power Management */
+
+/* XenClient:
+ * Power Management Notification */
+int xenstore_update_power(enum xenstore_pm_type const type)
+{
+    char *dompath = NULL;
+
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+
+    if (NULL == dompath) {
+        return -1;
+    }
+
+    xen_input_send_shutdown(type);
+
+    return xenstore_write_int(dompath, "power-state", type);
+}
diff --git a/xen-all.c b/xen-all.c
index 206d1fd..b4d3f82 100644
--- a/xen-all.c
+++ b/xen-all.c
@@ -1444,6 +1444,9 @@ void destroy_hvm_domain(bool reboot)
         } else {
             fprintf(stderr, "Issued domain %d %s\n", xen_domid,
                     reboot ? "reboot" : "poweroff");
+            if (reboot) {
+                xenstore_update_power(XENSTORE_PM_TYPE_REBOOT);
+            }
         }
         xc_interface_close(xc_handle);
     }
