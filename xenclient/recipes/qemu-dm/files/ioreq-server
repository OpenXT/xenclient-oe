diff --git a/hw/xen_common.h b/hw/xen_common.h
index 517bfd1..5d14072 100644
--- a/hw/xen_common.h
+++ b/hw/xen_common.h
@@ -152,34 +152,7 @@ static inline int xen_xc_hvm_inject_msi(XenXC xen_xc, domid_t dom,
 }
 #endif
 
-/* Xen before 4.3 */
-#if CONFIG_XEN_CTRL_INTERFACE_VERSION < 430
-static inline int xen_xc_hvm_register_pcidev(XenXC xen_xc, domid_t dom,
-        unsigned int serverid, uint16_t domain,
-        uint8_t bus, uint8_t device, uint8_t function)
-{
-    return 0;
-}
-
-static inline int xen_xc_hvm_map_io_range_to_ioreq_server(XenXC xen_xc,
-        domid_t dom, unsigned int serverid, int is_mmio,
-        uint64_t start, uint64_t end)
-{
-    return 1;
-}
-
-static inline int xen_xc_hvm_unmap_io_range_from_ioreq_server(XenXC xen_xc,
-        domid_t dom, unsigned int serverid, int is_mmio, uint64_t start)
-{
-    return 1;
-}
-
-static inline int xen_xc_hvm_register_ioreq_server(XenXC xen_xc, domid_t dom)
-{
-    return 0;
-}
-
-#else
+/* We suppose that Xen is able to handle multiple device model */
 static inline int xen_xc_hvm_register_pcidev(XenXC xen_xc, domid_t dom,
         unsigned int serverid, uint16_t domain,
         uint8_t bus, uint8_t device, uint8_t function)
@@ -208,8 +181,6 @@ static inline int xen_xc_hvm_register_ioreq_server(XenXC xen_xc, domid_t dom)
     return xc_hvm_register_ioreq_server(xen_xc, dom);
 }
 
-#endif
-
 void destroy_hvm_domain(bool reboot);
 
 /* shutdown/destroy current domain because of an error */
diff --git a/xen-all.c b/xen-all.c
index 794ed55..206d1fd 100644
--- a/xen-all.c
+++ b/xen-all.c
@@ -70,40 +70,6 @@ static inline ioreq_t *xen_vcpu_ioreq(shared_iopage_t *shared_page, int vcpu)
 #define HVM_PARAM_BUFIOREQ_EVTCHN 26
 #endif
 
-#if __XEN_LATEST_INTERFACE_VERSION__ < 0x00040300
-static inline unsigned long xen_buffered_iopage(void)
-{
-    unsigned long pfn;
-
-    xc_get_hvm_param(xen_xc, xen_domid, HVM_PARAM_BUFIOREQ_PFN, &pfn);
-
-    return pfn;
-}
-
-static inline unsigned long xen_iopage(void)
-{
-    unsigned long pfn;
-
-    xc_get_hvm_param(xen_xc, xen_domid, HVM_PARAM_IOREQ_PFN, &pfn);
-
-    return pfn;
-}
-
-static inline evtchn_port_or_error_t xen_buffered_channel(void)
-{
-    unsigned long evtchn;
-    int rc;
-
-    rc = xc_get_hvm_param(xen_xc, xen_domid, HVM_PARAM_BUFIOREQ_EVTCHN,
-                          &evtchn);
-
-    if (rc < 0) {
-        return rc;
-    } else {
-        return evtchn;
-    }
-}
-#else
 static inline unsigned long xen_buffered_iopage(void)
 {
     unsigned long pfn;
@@ -129,8 +95,6 @@ static inline evtchn_port_or_error_t xen_buffered_channel(void)
     return xc_hvm_get_ioreq_server_buf_channel(xen_xc, xen_domid, serverid);
 }
 
-#endif
-
 #define BUFFER_IO_MAX_DELAY  100
 
 typedef struct XenPhysmap {
@@ -191,8 +155,8 @@ int xen_register_pcidev(PCIDevice *pci_dev)
         }
     }
 
-    DPRINTF("register pci %x:%x.%x %s\n", 0, (pci_dev->devfn >> 3) & 0x1f,
-            pci_dev->devfn & 0x7, pci_dev->name);
+    printf("register pci %x:%x.%x %s\n", 0, (pci_dev->devfn >> 3) & 0x1f,
+           pci_dev->devfn & 0x7, pci_dev->name);
 
     return xen_xc_hvm_register_pcidev(xen_xc, xen_domid, serverid,
                                       0, 0, pci_dev->devfn >> 3,
@@ -369,7 +333,7 @@ void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr)
         /* RAM already populated in Xen */
         fprintf(stderr, "%s: do not alloc "RAM_ADDR_FMT
                 " bytes of ram at "RAM_ADDR_FMT" when runstate is INMIGRATE\n",
-                __func__, size, ram_addr); 
+                __func__, size, ram_addr);
         return;
     }
 
@@ -970,7 +934,6 @@ static void cpu_ioreq_move(ioreq_t *req)
     }
 }
 
-#if __XEN_LATEST_INTERFACE_VERSION__ >= 0x00040300
 static void cpu_ioreq_config_space(ioreq_t *req)
 {
     uint64_t cf8 = req->addr;
@@ -1005,7 +968,6 @@ static void cpu_ioreq_event(ioreq_t *req)
     }
 }
 
-#endif
 
 static void handle_ioreq(ioreq_t *req)
 {
@@ -1026,14 +988,12 @@ static void handle_ioreq(ioreq_t *req)
         case IOREQ_TYPE_INVALIDATE:
             xen_invalidate_map_cache();
             break;
-#if __XEN_LATEST_INTERFACE_VERSION__ >= 0x00040300
         case IOREQ_TYPE_PCI_CONFIG:
             cpu_ioreq_config_space(req);
             break;
         case IOREQ_TYPE_EVENT:
             cpu_ioreq_event(req);
             break;
-#endif
         default:
             hw_error("Invalid ioreq type 0x%x\n", req->type);
     }
@@ -1197,24 +1157,33 @@ void xenstore_store_pv_console_info(int i, CharDriverState *chr)
 static void xenstore_record_dm_state(struct xs_handle *xs, const char *state)
 {
     char path[50];
+    char *dompath;
 
     if (xs == NULL) {
         fprintf(stderr, "xenstore connection not initialized\n");
         exit(1);
     }
 
+    dompath = xs_get_domain_path(xs, xen_domid);
+    if (!dompath) {
+        hw_error("Unable to retrieve domain path\n");
+    }
+
     if (xen_dmid == ~0) {
         snprintf(path, sizeof(path), "/local/domain/0/device-model/%u/state",
                  xen_domid);
     } else {
-        snprintf(path, sizeof(path), "/local/domain/0/dms/%u/%u/state",
-                 xen_domid, xen_dmid);
+        /*  Don't use the same path for xenclient */
+        snprintf(path, sizeof(path), "%s/dms/%u/state",
+                 dompath, xen_dmid);
     }
 
     if (!xs_write(xs, XBT_NULL, path, state, strlen(state))) {
         fprintf(stderr, "error recording dm state\n");
         exit(1);
     }
+
+    free(dompath);
 }
 
 static void xen_main_loop_prepare(XenIOState *state)
