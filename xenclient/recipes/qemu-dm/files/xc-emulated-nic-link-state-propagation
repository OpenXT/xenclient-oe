diff --git a/hw/rtl8139.c b/hw/rtl8139.c
index d7716be..7528641 100644
--- a/hw/rtl8139.c
+++ b/hw/rtl8139.c
@@ -2660,6 +2660,12 @@ static void rtl8139_IntrStatus_write(RTL8139State *s, uint32_t val)
     s->IntrStatus = 0;
     rtl8139_update_irq(s);
 
+    /* XenClient:
+     * clearing RxUnderrun also seems to clear LinkChange bit */
+    if (val & RxUnderrun) {
+        s->CSCR &= ~0x0800;
+    }
+
     s->IntrStatus = newStatus;
     /*
      * Computing if we miss an interrupt here is not that correct but
diff --git a/hw/xen.h b/hw/xen.h
index db7a1d2..046fa31 100644
--- a/hw/xen.h
+++ b/hw/xen.h
@@ -47,6 +47,9 @@ void xen_hvm_inject_msi(uint64_t addr, uint32_t data);
 int xen_register_pcidev(PCIDevice *pci_dev);
 void xen_cmos_set_s3_resume(void *opaque, int irq, int level);
 
+int xenstore_register_nic(NetClientState *nc);
+int xenstore_unregister_nic(NetClientState *nc);
+
 qemu_irq *xen_interrupt_controller_init(void);
 
 int xen_init(void);
diff --git a/hw/xen_backend.c b/hw/xen_backend.c
index a227ca6..ff93081 100644
--- a/hw/xen_backend.c
+++ b/hw/xen_backend.c
@@ -38,6 +38,7 @@
 #include "char/char.h"
 #include "qemu/log.h"
 #include "xen_backend.h"
+#include "qmp-commands.h"
 
 #include <xen/grant_table.h>
 
@@ -589,6 +590,125 @@ static int xenstore_scan(const char *type, int dom, struct XenDevOps *ops)
     return 0;
 }
 
+/* XenClient: xc-emulated-nic-link-state-propagation
+ * Read the appropriate Base Register and check if we have to change the
+ * device status */
+static void xenstore_update_nic(char *watch, NetClientState *nc)
+{
+    char *tmp = NULL;
+    size_t len;
+    int val = 0;
+
+    fprintf(stderr, "%s xenstore_update_nic\n", nc->name);
+
+    tmp = xs_read(xenstore, XBT_NULL, watch, &len);
+
+    if (!tmp) {
+        fprintf(stderr, "failed to read xenstore path (%s)\n", watch);
+        return;
+    }
+
+    val = atoi(tmp) ? 1 : 0;
+
+    if (nc->link_down != val) {
+        fprintf(stderr, "%s link status change: link_down=%d\n",
+                nc->name, val);
+        qmp_set_link(nc->name, !val, NULL);
+    }
+
+    free(tmp);
+}
+
+/* XenClient: xc-emulated-nic-link-state-propagation
+ * Register a Net Client in the Xenstore Watcher. */
+int xenstore_register_nic(NetClientState *nc)
+{
+    char *dompath = NULL;
+    char type[5];
+    char path[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+    char *id;
+    char *tmp;
+    int i;
+
+    memset(type, 0, sizeof(type));
+    id = nc->name;
+    for (i = 1; i < sizeof(type) && *id; i++, id++) {
+        if (isdigit(*id)) {
+            break;
+        }
+        if (!isalpha(*id)) {
+            return -1;
+        }
+        type[i - 1] = *id;
+    }
+
+    for (tmp = id; *tmp; tmp++) {
+        if (!isdigit(*tmp)) {
+            return -1;
+        }
+    }
+
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+    snprintf(token, sizeof(token), "ni:%p", nc);
+    snprintf(path, sizeof(path), "%s/device/%s/%s/disconnect",
+             dompath, type, id);
+    free(dompath);
+    xenstore_update_nic(path, nc);
+
+    if (!xs_watch(xenstore, path, token)) {
+        fprintf(stderr, "xen: watching nic path (%s) failed\n", path);
+        return -1;
+    }
+
+    return 0;
+}
+
+/* XenClient: xc-emulated-nic-link-state-propagation
+ * Unregister a Net Client in the Xenstore Watcher.
+ * Use it when a device is removed and is no longer use. */
+int xenstore_unregister_nic(NetClientState *nc)
+{
+    char *dompath = NULL;
+    char type[5];
+    char path[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+    char *id;
+    char *tmp;
+    int i;
+
+    memset(type, 0, sizeof(type));
+    id = nc->name;
+    for (i = 1; i < sizeof(type) && *id; i++, id++) {
+        if (isdigit(*id)) {
+            break;
+        }
+        if (!isalpha(*id)) {
+            return -1;
+        }
+        type[i - 1] = *id;
+    }
+
+    for (tmp = id; *tmp; tmp++) {
+        if (!isdigit(*tmp)) {
+            return -1;
+        }
+    }
+
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+    snprintf(token, sizeof(token), "ni:%p", nc);
+    snprintf(path, sizeof(path), "%s/device/%s/%s/disconnect",
+             dompath, type, id);
+    free(dompath);
+
+    if (!xs_unwatch(xenstore, path, token)) {
+        fprintf(stderr, "xen: watching nic path (%s) failed\n", path);
+        return -1;
+    }
+
+    return 0;
+}
+
 static void xenstore_update_be(char *watch, char *type, int dom,
                                struct XenDevOps *ops)
 {
@@ -661,6 +781,11 @@ static void xenstore_update(void *unused)
     if (sscanf(vec[XS_WATCH_TOKEN], "fe:%" PRIxPTR, &ptr) == 1) {
         xenstore_update_fe(vec[XS_WATCH_PATH], (void*)ptr);
     }
+    /* XenClient:
+     * Update the NIC state if needed */
+    if (sscanf(vec[XS_WATCH_TOKEN], "ni:%" PRIxPTR, &ptr) == 1) {
+        xenstore_update_nic(vec[XS_WATCH_PATH], (void *)ptr);
+    }
 
 cleanup:
     free(vec);
diff --git a/net/net.c b/net/net.c
index be03a8d..a7c61b0 100644
--- a/net/net.c
+++ b/net/net.c
@@ -40,6 +40,10 @@
 #include "qapi/opts-visitor.h"
 #include "qapi/dealloc-visitor.h"
 
+/* XenClient: xc-emulated-nic-link-state-propagation
+ * needed for: xenstore_register_nic and xenstore_unregister_nic */
+#include "hw/xen.h"
+
 /* Net bridge is currently not supported for W32. */
 #if !defined(_WIN32)
 # define CONFIG_NET_BRIDGE
@@ -256,6 +260,13 @@ NICState *qemu_new_nic(NetClientInfo *info,
         nic->ncs[i].queue_index = i;
     }
 
+    /* XenClient: xc-emulated-nic-link-state-propagation
+     * Register the new Net Client to xenstore to ask Xenstore to propage
+     * the device status */
+    if (xen_enabled()) {
+        xenstore_register_nic(nc);
+    }
+
     return nic;
 }
 
@@ -364,6 +375,10 @@ void qemu_del_nic(NICState *nic)
 
     for (i = queues - 1; i >= 0; i--) {
         NetClientState *nc = qemu_get_subqueue(nic, i);
+        /* XenClient: xc-emulated-nic-link-state-propagation */
+        if (xen_enabled()) {
+            xenstore_unregister_nic(nc);
+        }
 
         qemu_cleanup_net_client(nc);
         qemu_free_net_client(nc);
