diff --git a/tools/blktap2/include/libvhd.h b/tools/blktap2/include/libvhd.h
index a57c1a0..7c89c80 100644
--- a/tools/blktap2/include/libvhd.h
+++ b/tools/blktap2/include/libvhd.h
@@ -392,4 +392,10 @@ int vhd_write_block(vhd_context_t *, uint32_t block, char *data);
 int vhd_io_read(vhd_context_t *, char *, uint64_t, uint32_t);
 int vhd_io_write(vhd_context_t *, char *, uint64_t, uint32_t);
 
+int vhd_io_dynamic_read_link(vhd_context_t *ctx, char *map,
+			     char *buf, uint64_t sector, uint32_t secs);
+
+void vhd_getopt_lock(void);
+void vhd_getopt_unlock(void);
+
 #endif
diff --git a/tools/blktap2/include/vhd-util.h b/tools/blktap2/include/vhd-util.h
index bd9f452..eb5afa1 100644
--- a/tools/blktap2/include/vhd-util.h
+++ b/tools/blktap2/include/vhd-util.h
@@ -38,13 +38,19 @@ int vhd_util_repair(int argc, char **argv);
 int vhd_util_fill(int argc, char **argv);
 int vhd_util_resize(int argc, char **argv);
 int vhd_util_coalesce(int argc, char **argv);
+int vhd_util_coalesce_multi(int argc, char **argv);
 int vhd_util_modify(int argc, char **argv);
 int vhd_util_scan(int argc, char **argv);
 int vhd_util_check(int argc, char **argv);
 int vhd_util_revert(int argc, char **argv);
 
-typedef int (coalesce_callback_t)(uint64_t block);
+typedef int (coalesce_block_callback_t)(int64_t block, void *data);
+typedef void (coalesce_state_callback_t)(void);
 
-void vhd_util_coalesce_set_callback(coalesce_callback_t *cb);
+/*
+ * Call the coalesce callback each time this many sectors worth of in use
+ * blocks have been processed.
+ */
+#define	COALESCE_CB_SECTORS ((32*1024*1024) / 512) /* 32 MB in sectors */
 
 #endif
diff --git a/tools/blktap2/vhd/lib/Makefile b/tools/blktap2/vhd/lib/Makefile
index cdbb86c..eee3444 100644
--- a/tools/blktap2/vhd/lib/Makefile
+++ b/tools/blktap2/vhd/lib/Makefile
@@ -30,6 +30,7 @@ endif
 LIB-SRCS        := libvhd.c
 LIB-SRCS        += libvhd-journal.c
 LIB-SRCS        += vhd-util-coalesce.c
+LIB-SRCS        += vhd-util-coalesce-multi.c
 LIB-SRCS        += vhd-util-create.c
 LIB-SRCS        += vhd-util-fill.c
 LIB-SRCS        += vhd-util-modify.c
diff --git a/tools/blktap2/vhd/lib/libvhd.c b/tools/blktap2/vhd/lib/libvhd.c
index 6ab5acf..be7359a 100644
--- a/tools/blktap2/vhd/lib/libvhd.c
+++ b/tools/blktap2/vhd/lib/libvhd.c
@@ -27,6 +27,7 @@
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
+#include <pthread.h>
 #include <stdio.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -42,6 +43,19 @@
 #include "relative-path.h"
 
 static int libvhd_dbg = 0;
+static pthread_mutex_t getopt_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+void
+vhd_getopt_lock(void)
+{
+	pthread_mutex_lock(&getopt_mutex);
+}
+
+void
+vhd_getopt_unlock(void)
+{
+	pthread_mutex_unlock(&getopt_mutex);
+}
 
 void
 libvhd_set_log_level(int level)
@@ -2758,6 +2772,10 @@ vhd_close(vhd_context_t *ctx)
 	free(ctx->file);
 	free(ctx->bat.bat);
 	free(ctx->batmap.map);
+#ifdef DYNAMIC_BATMAP
+	free(ctx->meta_ctx.dyn_batmap.map);
+	free(ctx->meta_ctx.dyn_batmap.valid);
+#endif
 	memset(ctx, 0, sizeof(vhd_context_t));
 }
 
@@ -3333,7 +3351,7 @@ __vhd_create(const char *name, const char *child, const char *parent,
 	vhd_context_t ctx;
 	vhd_footer_t *footer;
 	vhd_header_t *header;
-	uint64_t size, blks;
+	uint64_t size;
 
 	switch (type) {
 	case HD_TYPE_DIFF:
@@ -3355,8 +3373,7 @@ __vhd_create(const char *name, const char *child, const char *parent,
 	memset(&ctx, 0, sizeof(vhd_context_t));
 	footer = &ctx.footer;
 	header = &ctx.header;
-	blks   = (bytes + VHD_BLOCK_SIZE - 1) >> VHD_BLOCK_SHIFT;
-	size   = blks << VHD_BLOCK_SHIFT;
+	size   = bytes;
 
 	ctx.fd = open(name, O_WRONLY | O_CREAT |
 		      O_TRUNC | O_LARGEFILE | O_DIRECT, 0644);
@@ -3493,9 +3510,9 @@ __vhd_io_dynamic_copy_data(vhd_context_t *ctx,
 	}
 }
 
-static int
-__vhd_io_dynamic_read_link(vhd_context_t *ctx, char *map,
-			   char *buf, uint64_t sector, uint32_t secs)
+int
+vhd_io_dynamic_read_link(vhd_context_t *ctx, char *map,
+			 char *buf, uint64_t sector, uint32_t secs)
 {
 	off_t off;
 	uint32_t blk, sec;
@@ -3617,7 +3634,7 @@ __vhd_io_dynamic_read(vhd_context_t *ctx,
 	memset(buf, 0, vhd_sectors_to_bytes(secs));
 
 	for (;;) {
-		err = __vhd_io_dynamic_read_link(vhd, map, buf, sec, secs);
+		err = vhd_io_dynamic_read_link(vhd, map, buf, sec, secs);
 		if (err)
 			goto close;
 
diff --git a/tools/blktap2/vhd/lib/vhd-util-check.c b/tools/blktap2/vhd/lib/vhd-util-check.c
index 9d81652..6095575 100644
--- a/tools/blktap2/vhd/lib/vhd-util-check.c
+++ b/tools/blktap2/vhd/lib/vhd-util-check.c
@@ -962,6 +962,8 @@ vhd_util_check(int argc, char **argv)
 	vhd_context_t vhd;
 	int c, err, ignore, ignorebats, ignoretime, parents, pvalidate;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv) {
 		err = -EINVAL;
 		goto usage;
@@ -1009,6 +1011,8 @@ vhd_util_check(int argc, char **argv)
 		goto usage;
 	}
 
+	vhd_getopt_unlock();
+
 	err = vhd_util_check_vhd(name, ignore, ignoretime, pvalidate,
 	    ignorebats);
 	if (err)
@@ -1022,6 +1026,7 @@ out:
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: -n <file> [-i ignore missing primary footers] "
 	       "[-p check parents] [-P don't validate parent] "
 	       "[-B don't validate bat(map)s] "
diff --git a/tools/blktap2/vhd/lib/vhd-util-coalesce-multi.c b/tools/blktap2/vhd/lib/vhd-util-coalesce-multi.c
new file mode 100644
index 0000000..68e78e6
--- /dev/null
+++ b/tools/blktap2/vhd/lib/vhd-util-coalesce-multi.c
@@ -0,0 +1,317 @@
+/*
+ * (c) COPYRIGHT 2010 VIRTUAL COMPUTER, INC. ALL RIGHTS RESERVED.
+ */
+
+/* Copyright (c) 2008, XenSource Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include "libvhd.h"
+#include "vhd-util.h"
+
+#define BIT_MASK 0x80
+
+static inline int
+test_bit (volatile char *addr, int nr)
+{
+	return ((addr[nr >> 3] << (nr & 7)) & BIT_MASK) != 0;
+}
+
+/*
+ * The test_bits_all_* routines are called to test all the bits in a block
+ * bitmap. The only valid block sizes are 512K, 1MB and 2MB.  For these block
+ * sizes the bitmap sizes are respectively 1024, 2048 and 4096 bits. Hence the
+ * bitmap size is guaranteed to be a multiple of 64.
+ */
+static inline int
+test_bits_all_set(char *bits, int n)
+{
+	uint64_t *b = (uint64_t *)bits;
+	int i;
+
+	for (i = n / 64; i > 0; i--, b++)
+		if (*b != 0xffffffffffffffff)
+			return (0);
+	return (1);
+}
+
+static inline int
+test_bits_all_clear(char *bits, int n)
+{
+	uint64_t *b = (uint64_t *)bits;
+	int i;
+
+	for (i = n / 64; i > 0; i--, b++)
+		if (*b != 0)
+			return (0);
+	return (1);
+}
+
+/*
+ * Write the dirty sectors in buf to the given block within the VHD.
+ * @map is the dirty sector bitmap.
+ */
+static int
+write_block(vhd_context_t *vhd, uint32_t block, char *buf, char *map)
+{
+	int i, err;
+	uint64_t sec, secs;
+
+	sec = block * vhd->spb;
+
+	if (test_bits_all_set(map, vhd->spb))
+		return (vhd_io_write(vhd, buf, sec, vhd->spb));
+
+	err = 0;
+	for (i = 0; i < vhd->spb; i++) {
+		if (!test_bit(map, i))
+			continue;
+
+		/* find contiguous dirty sectors */
+		for (secs = 0; i + secs < vhd->spb; secs++)
+			if (!test_bit(map, i + secs))
+				break;
+
+		err = vhd_io_write(vhd, buf + vhd_sectors_to_bytes(i),
+		    sec + i, secs);
+		if (err)
+			break;
+
+		i += secs;
+	}
+
+	return (err);
+}
+
+/*
+ * Given a chain of @num_vhds @vhds read the dirty sectors in the range
+ * [@sec, @sec + @secs - 1] into @buf and update the dirty sector bitmap in
+ * @map.
+ */
+static int
+merge_read(vhd_context_t *vhds, int num_vhds, char *buf, char *map,
+    uint64_t sec, uint32_t secs)
+{
+	int err = 0;
+	uint32_t i, j;
+
+	memset(map, 0, (secs + 7) / 8);
+
+	for (j = 0; j < num_vhds; j++) {
+		err = vhd_io_dynamic_read_link(&vhds[j], map, buf, sec, secs);
+		if (err)
+			break;
+
+		if ((j < num_vhds - 1) && test_bits_all_set(map, secs))
+			break;
+	}
+
+	return (err);
+}
+
+static int
+coalesce_multi(vhd_context_t *vhds, int num_vhds, uint64_t start_block,
+    coalesce_state_callback_t *state_cb, coalesce_block_callback_t *block_cb,
+    void *cb_data)
+{
+	vhd_context_t *parent;
+	char *buf, *map;
+	uint64_t sec;
+	uint32_t numsecs, block;
+	int err, i, j, max_spb;
+	int merged_blocks;
+	int blocks_per_cb;
+
+	/*
+	 * Reading/writing is done in units of the largest block size over
+	 * all the VHDs in the chain.
+	 */
+	max_spb = 0;
+	for (i = 0; i < num_vhds; i++) {
+		if (vhds[i].spb > max_spb)
+			max_spb = vhds[i].spb;
+	}
+
+	err = posix_memalign((void **)&buf, 4096,
+	    vhd_sectors_to_bytes(max_spb));
+	if (err)
+		return (-err);
+
+	if ((map = malloc(max_spb >> 3)) == NULL) {
+		free(buf);
+		return (-errno);
+	}
+
+	/* the parent in the merge, i.e the VHD being written to */
+	parent = &vhds[num_vhds - 1];
+
+	blocks_per_cb = COALESCE_CB_SECTORS / parent->spb;
+	merged_blocks = 0;
+
+	/* the start block refers to a block in the parent */
+	sec = start_block * parent->spb;
+	/* the number of sectors left to process */
+	numsecs = secs_round_up(vhds[0].footer.curr_size) - sec;
+
+	/*
+	 * In units of the largest block size merge data from the first n-1
+	 * disks in the chain into the parent.
+	 */
+	for (i = numsecs / max_spb; i > 0; i--, sec += max_spb) {
+		if (state_cb)
+			state_cb();
+
+		/* read data from first n-1 disks in the chain */
+		err = merge_read(vhds, num_vhds - 1, buf, map, sec, max_spb);
+		if (err)
+			break;
+
+		if (test_bits_all_clear(map, max_spb))
+			continue;	/* no data */
+
+		/* write data into the parent in units of its block size */
+		block = sec / parent->spb;
+		for (j = 0; j < max_spb / parent->spb; j++) {
+			if (state_cb)
+				state_cb();
+			if ((parent->spb != max_spb) &&
+			    test_bits_all_clear(map + (j * parent->spb / 8),
+			    parent->spb))
+				continue;
+
+			err = write_block(parent, block + j,
+			    buf + vhd_sectors_to_bytes(j * parent->spb),
+			    map + (j * parent->spb / 8));
+			if (err)
+				break;
+
+			if (block_cb) {
+				merged_blocks++;
+				if (((merged_blocks % blocks_per_cb) == 0) &&
+				    !block_cb(block + j, cb_data)) {
+					err = -EINTR;
+					break;
+				}
+			}
+		}
+
+		if (err)
+			break;
+	}
+
+	free(buf);
+	free(map);
+
+	return (err);
+}
+
+int
+vhd_coalesce_multi(char **vhd_paths, int num_vhds, uint64_t start_block,
+    coalesce_state_callback_t state_cb, coalesce_block_callback_t *block_cb,
+    void *cb_data)
+{
+	int err, i;
+	char **name;
+	vhd_context_t *vhds;
+
+	vhds = calloc(num_vhds, sizeof (*vhds));
+
+	for (i = 0; i < num_vhds; i++) {
+		err = vhd_open(&vhds[i], vhd_paths[i],
+		    (i == num_vhds - 1) ? VHD_OPEN_RDWR : VHD_OPEN_RDONLY);
+		if (err) {
+			printf("error opening %s: %d\n", vhd_paths[i], err);
+			goto done;
+		}
+	}
+
+	for (i = 0; i < num_vhds - 1; i++) {
+		err = vhd_get_bat(&vhds[i]);
+		if (err)
+			goto done;
+
+		if (vhd_has_batmap(&vhds[i])) {
+			err = vhd_get_batmap(&vhds[i]);
+			if (err)
+				goto done;
+		}
+#ifdef DYNAMIC_BATMAP
+		else
+			vhd_create_dynamic_batmap(&vhds[i],
+			    &vhds[i].meta_ctx.dyn_batmap);
+#endif
+	}
+
+	err = coalesce_multi(vhds, num_vhds, start_block, state_cb, block_cb,
+	    cb_data);
+
+ done:
+	for (i = 0; i < num_vhds; i++)
+		vhd_close(&vhds[i]);
+	free(vhds);
+	return err;
+}
+
+int
+vhd_util_coalesce_multi(int argc, char **argv)
+{
+	uint64_t block = 0;
+	int c;
+
+	vhd_getopt_lock();
+
+	if (!argc || !argv)
+		goto usage;
+
+	optind = 0;
+	while ((c = getopt(argc, argv, "b:h")) != -1) {
+		switch (c) {
+		case 'b':
+			block = strtoull(optarg, NULL, 0);
+			break;
+		case 'h':
+		default:
+			goto usage;
+		}
+	}
+
+	if (optind >= argc)
+		goto usage;
+
+	return (vhd_coalesce_multi(argv + optind, argc - optind, block,
+	    NULL, NULL, NULL));
+
+usage:
+	printf("options: [-b block] [-h help]\n");
+	return -EINVAL;
+}
diff --git a/tools/blktap2/vhd/lib/vhd-util-coalesce.c b/tools/blktap2/vhd/lib/vhd-util-coalesce.c
index 4c3e131..370d708 100644
--- a/tools/blktap2/vhd/lib/vhd-util-coalesce.c
+++ b/tools/blktap2/vhd/lib/vhd-util-coalesce.c
@@ -34,14 +34,6 @@
 #include "libvhd.h"
 #include "vhd-util.h"
 
-/*
- * Call the callback each time this many sectors worth of in use blocks have
- * been processed.
- */
-#define	CALLBACK_SECTORS ((32*1024*1024) / 512) /* 32 MB in sectors */
-
-static coalesce_callback_t *coalesce_cb;
-
 static int
 __raw_io_write(int fd, char* buf, uint64_t sec, uint32_t secs)
 {
@@ -138,45 +130,18 @@ done:
 }
 
 int
-vhd_util_coalesce(int argc, char **argv)
+vhd_coalesce(char *name, char *pname, uint64_t block,
+    coalesce_block_callback_t *cb, void *cb_data)
 {
-	int err, c;
-	uint64_t i, block;
-	char *name, *pname;
+	int err;
+	uint64_t i;
 	vhd_context_t vhd, parent;
 	int parent_fd = -1;
 	int merged_blocks;
 	int blocks_per_cb;
 
-	block = 0;
-	name  = NULL;
-	pname = NULL;
 	parent.file = NULL;
 
-	if (!argc || !argv)
-		goto usage;
-
-	optind = 0;
-	while ((c = getopt(argc, argv, "b:n:p:h")) != -1) {
-		switch (c) {
-		case 'b':
-			block = strtoull(optarg, NULL, 0);
-			break;
-		case 'n':
-			name = optarg;
-			break;
-		case 'p':
-			pname = optarg;
-			break;
-		case 'h':
-		default:
-			goto usage;
-		}
-	}
-
-	if (!name || optind != argc)
-		goto usage;
-
 	err = vhd_open(&vhd, name, VHD_OPEN_RDONLY);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -231,12 +196,12 @@ vhd_util_coalesce(int argc, char **argv)
 			goto done;
 	}
 
-	if ((coalesce_cb != NULL) && !coalesce_cb(ULLONG_MAX)) {
+	if (cb && !cb(-1, cb_data)) {
 		err = -EINTR;
 		goto done;
 	}
 
-	blocks_per_cb = CALLBACK_SECTORS / vhd.spb;
+	blocks_per_cb = COALESCE_CB_SECTORS / vhd.spb;
 	merged_blocks = 0;
 
 	for (i = block; i < vhd.bat.entries; i++) {
@@ -247,10 +212,10 @@ vhd_util_coalesce(int argc, char **argv)
 		if (err)
 			goto done;
 
-		if (coalesce_cb != NULL) {
+		if (cb) {
 			merged_blocks++;
 			if (((merged_blocks % blocks_per_cb) == 0) &&
-			    !coalesce_cb(i)) {
+			    !cb(i, cb_data)) {
 				err = -EINTR;
 				goto done;
 			}
@@ -272,8 +237,52 @@ usage:
 	return -EINVAL;
 }
 
-void
-vhd_util_coalesce_set_callback(coalesce_callback_t cb)
+int
+vhd_util_coalesce(int argc, char **argv)
 {
-	coalesce_cb = cb;
+	int c;
+	uint64_t block;
+	char *name, *pname;
+
+	block = 0;
+	name  = NULL;
+	pname = NULL;
+
+	vhd_getopt_lock();
+
+	vhd_getopt_lock();
+
+	if (!argc || !argv)
+		goto usage;
+
+	optind = 0;
+	while ((c = getopt(argc, argv, "b:n:p:h")) != -1) {
+		switch (c) {
+		case 'b':
+			block = strtoull(optarg, NULL, 0);
+			break;
+		case 'n':
+			name = optarg;
+			break;
+		case 'p':
+			pname = optarg;
+			break;
+		case 'h':
+		default:
+			goto usage;
+		}
+	}
+
+	if (!name || optind != argc)
+		goto usage;
+
+	vhd_getopt_unlock();
+
+	return vhd_coalesce(name, pname, block, NULL, NULL);
+
+usage:
+	vhd_getopt_unlock();
+	printf("options: <-n name> [-p parent] [-b block] [-h help]\n");
+	return -EINVAL;
 }
+
diff --git a/tools/blktap2/vhd/lib/vhd-util-create.c b/tools/blktap2/vhd/lib/vhd-util-create.c
index 3517dbd..5eddb3a 100644
--- a/tools/blktap2/vhd/lib/vhd-util-create.c
+++ b/tools/blktap2/vhd/lib/vhd-util-create.c
@@ -48,6 +48,8 @@ vhd_util_create(int argc, char **argv)
 	name      = NULL;
 	flags     = 0;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv)
 		goto usage;
 
@@ -79,10 +81,13 @@ vhd_util_create(int argc, char **argv)
 	if (err || !name || optind != argc)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	return vhd_create(name, NULL, &uuid, size << 20,
 		 	  (sparse ? HD_TYPE_DYNAMIC : HD_TYPE_FIXED), flags);
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> <-s size (MB)> [-u UUID] [-r reserve] "
 	       "[-M MS compat] [-h help]\n");
 	return -EINVAL;
diff --git a/tools/blktap2/vhd/lib/vhd-util-fill.c b/tools/blktap2/vhd/lib/vhd-util-fill.c
index afbfcce..bbe1f5e 100644
--- a/tools/blktap2/vhd/lib/vhd-util-fill.c
+++ b/tools/blktap2/vhd/lib/vhd-util-fill.c
@@ -43,6 +43,8 @@ vhd_util_fill(int argc, char **argv)
 	buf  = NULL;
 	name = NULL;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv)
 		goto usage;
 
@@ -61,6 +63,8 @@ vhd_util_fill(int argc, char **argv)
 	if (!name || optind != argc)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDWR);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -100,6 +104,7 @@ vhd_util_fill(int argc, char **argv)
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> [-h help]\n");
 	return -EINVAL;
 }
diff --git a/tools/blktap2/vhd/lib/vhd-util-modify.c b/tools/blktap2/vhd/lib/vhd-util-modify.c
index b763606..a55075e 100644
--- a/tools/blktap2/vhd/lib/vhd-util-modify.c
+++ b/tools/blktap2/vhd/lib/vhd-util-modify.c
@@ -68,6 +68,8 @@ vhd_util_modify(int argc, char **argv)
 	uuid       = 0;
 	creator    = 0;
 
+	vhd_getopt_lock();
+
 	optind = 0;
 	while ((c = getopt(argc, argv, "c:n:s:p:u:mh")) != -1) {
 		switch (c) {
@@ -108,6 +110,8 @@ vhd_util_modify(int argc, char **argv)
 	if (!name || optind != argc)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDWR);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -147,6 +151,7 @@ done:
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("*** Dangerous operations, use with care ***\n");
 	printf("options: <-n name> [-p NEW_PARENT set parent [-m raw]] "
 			"[-s NEW_SIZE set size] [-u UUID] [-h help]\n");
diff --git a/tools/blktap2/vhd/lib/vhd-util-query.c b/tools/blktap2/vhd/lib/vhd-util-query.c
index 44a22d0..e86959a 100644
--- a/tools/blktap2/vhd/lib/vhd-util-query.c
+++ b/tools/blktap2/vhd/lib/vhd-util-query.c
@@ -47,6 +47,8 @@ vhd_util_query(int argc, char **argv)
 	fields  = 0;
 	depth   = 0;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv) {
 		err = -EINVAL;
 		goto usage;
@@ -87,6 +89,8 @@ vhd_util_query(int argc, char **argv)
 		goto usage;
 	}
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDONLY | VHD_OPEN_IGNORE_DISABLED);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -152,6 +156,7 @@ vhd_util_query(int argc, char **argv)
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> [-v print virtual size (in MB)] "
 	       "[-s print physical utilization (bytes)] [-p print parent] "
 	       "[-f print fields] [-d print chain depth] [-h help]\n");
diff --git a/tools/blktap2/vhd/lib/vhd-util-read.c b/tools/blktap2/vhd/lib/vhd-util-read.c
index bdf6068..9224ac0 100644
--- a/tools/blktap2/vhd/lib/vhd-util-read.c
+++ b/tools/blktap2/vhd/lib/vhd-util-read.c
@@ -642,6 +642,8 @@ vhd_util_read(int argc, char **argv)
 	read    = -1;
 	name    = NULL;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv)
 		goto usage;
 
@@ -696,6 +698,8 @@ vhd_util_read(int argc, char **argv)
 	if (!name || optind != argc)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDONLY | VHD_OPEN_IGNORE_DISABLED);
 	if (err) {
 		printf("Failed to open %s: %d\n", name, err);
@@ -767,6 +771,7 @@ vhd_util_read(int argc, char **argv)
 	return err;
 
  usage:
+	vhd_getopt_unlock();
 	printf("options:\n"
 	       "-h          help\n"
 	       "-n          name\n"
diff --git a/tools/blktap2/vhd/lib/vhd-util-repair.c b/tools/blktap2/vhd/lib/vhd-util-repair.c
index 1bcd09a..4e19752 100644
--- a/tools/blktap2/vhd/lib/vhd-util-repair.c
+++ b/tools/blktap2/vhd/lib/vhd-util-repair.c
@@ -42,6 +42,8 @@ vhd_util_repair(int argc, char **argv)
 
 	name = NULL;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv)
 		goto usage;
 
@@ -60,6 +62,8 @@ vhd_util_repair(int argc, char **argv)
 	if (!name || optind != argc)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDWR);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -81,6 +85,7 @@ vhd_util_repair(int argc, char **argv)
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> [-h help]\n");
 	return -EINVAL;
 }
diff --git a/tools/blktap2/vhd/lib/vhd-util-resize.c b/tools/blktap2/vhd/lib/vhd-util-resize.c
index c8a9528..8b7d70f 100644
--- a/tools/blktap2/vhd/lib/vhd-util-resize.c
+++ b/tools/blktap2/vhd/lib/vhd-util-resize.c
@@ -1062,6 +1062,8 @@ vhd_util_resize(int argc, char **argv)
 	name  = NULL;
 	jname = NULL;
 
+	vhd_getopt_lock();
+
 	optind = 0;
 	while ((c = getopt(argc, argv, "n:j:s:h")) != -1) {
 		switch (c) {
@@ -1084,6 +1086,8 @@ vhd_util_resize(int argc, char **argv)
 	if (err || !name || !jname || argc != optind)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	err = vhd_util_resize_check_creator(name);
 	if (err)
 		return err;
@@ -1126,6 +1130,7 @@ out:
 	return (err ? : jerr);
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> <-j journal> <-s size (in MB)> [-h help]\n");
 	return -EINVAL;
 }
diff --git a/tools/blktap2/vhd/lib/vhd-util-revert.c b/tools/blktap2/vhd/lib/vhd-util-revert.c
index dab6e8b..d418448 100644
--- a/tools/blktap2/vhd/lib/vhd-util-revert.c
+++ b/tools/blktap2/vhd/lib/vhd-util-revert.c
@@ -59,6 +59,8 @@ vhd_util_revert(int argc, char **argv)
 	name  = NULL;
 	jname = NULL;
 
+	vhd_getopt_lock();
+
 	optind = 0;
 	while ((c = getopt(argc, argv, "n:j:h")) != -1) {
 		switch (c) {
@@ -77,6 +79,8 @@ vhd_util_revert(int argc, char **argv)
 	if (!name || !jname || argc != optind)
 		goto usage;
 
+	vhd_getopt_unlock();
+
 	libvhd_set_log_level(1);
 	err = vhd_journal_open(&journal, name, jname);
 	if (err) {
@@ -101,6 +105,7 @@ vhd_util_revert(int argc, char **argv)
 	return 0;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> <-j journal> [-h help]\n");
 	return -EINVAL;
 }
diff --git a/tools/blktap2/vhd/lib/vhd-util-scan.c b/tools/blktap2/vhd/lib/vhd-util-scan.c
index e87a7ea..3f118fc 100644
--- a/tools/blktap2/vhd/lib/vhd-util-scan.c
+++ b/tools/blktap2/vhd/lib/vhd-util-scan.c
@@ -1247,6 +1247,8 @@ vhd_util_scan(int argc, char **argv)
 	volume  = NULL;
 	targets = NULL;
 
+	vhd_getopt_lock();
+
 	optind = 0;
 	while ((c = getopt(argc, argv, "m:fcl:pavh")) != -1) {
 		switch (c) {
@@ -1285,6 +1287,8 @@ vhd_util_scan(int argc, char **argv)
 		goto usage;
 	}
 
+	vhd_getopt_unlock();
+
 	if (flags & VHD_SCAN_PRETTY)
 		flags &= ~VHD_SCAN_FAST;
 
@@ -1309,6 +1313,7 @@ vhd_util_scan(int argc, char **argv)
 	return ((flags & VHD_SCAN_NOFAIL) ? 0 : err);
 
 usage:
+	vhd_getopt_unlock();
 	printf("usage: [OPTIONS] FILES\n"
 	       "options: [-m match filter] [-f fast] [-c continue on failure] "
 	       "[-l LVM volume] [-p pretty print] [-a scan parents] "
diff --git a/tools/blktap2/vhd/lib/vhd-util-set-field.c b/tools/blktap2/vhd/lib/vhd-util-set-field.c
index 32728ab..5c87fe8 100644
--- a/tools/blktap2/vhd/lib/vhd-util-set-field.c
+++ b/tools/blktap2/vhd/lib/vhd-util-set-field.c
@@ -46,6 +46,8 @@ vhd_util_set_field(int argc, char **argv)
 	name  = NULL;
 	field = NULL;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv)
 		goto usage;
 
@@ -86,6 +88,8 @@ vhd_util_set_field(int argc, char **argv)
 		goto usage;
 	}
 
+	vhd_getopt_unlock();
+
 	err = vhd_open(&vhd, name, VHD_OPEN_RDWR);
 	if (err) {
 		printf("error opening %s: %d\n", name, err);
@@ -101,6 +105,7 @@ vhd_util_set_field(int argc, char **argv)
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> <-f field> <-v value> [-h help]\n");
 	return -EINVAL;
 }
diff --git a/tools/blktap2/vhd/lib/vhd-util-snapshot.c b/tools/blktap2/vhd/lib/vhd-util-snapshot.c
index 7204c87..9fe0b3e 100644
--- a/tools/blktap2/vhd/lib/vhd-util-snapshot.c
+++ b/tools/blktap2/vhd/lib/vhd-util-snapshot.c
@@ -145,6 +145,8 @@ vhd_util_snapshot(int argc, char **argv)
 	flags   = 0;
 	limit   = 0;
 
+	vhd_getopt_lock();
+
 	if (!argc || !argv) {
 		err = -EINVAL;
 		goto usage;
@@ -188,6 +190,8 @@ vhd_util_snapshot(int argc, char **argv)
 		goto usage;
 	}
 
+	vhd_getopt_unlock();
+
 	ppath = realpath(pname, NULL);
 	if (!ppath)
 		return -errno;
@@ -249,6 +253,7 @@ out:
 	return err;
 
 usage:
+	vhd_getopt_unlock();
 	printf("options: <-n name> <-p parent name> [-c child name] "
 	    "[-l snapshot depth limit] [-u UUID] [-m parent_is_raw] "
 	    "[-M MS compat] [-h help]\n");
diff --git a/tools/blktap2/vhd/vhd-util.c b/tools/blktap2/vhd/vhd-util.c
index 944a59e..9d4cfd0 100644
--- a/tools/blktap2/vhd/vhd-util.c
+++ b/tools/blktap2/vhd/vhd-util.c
@@ -46,19 +46,20 @@ struct command {
 };
 
 struct command commands[] = {
-	{ .name = "create",      .func = vhd_util_create        },
-	{ .name = "snapshot",    .func = vhd_util_snapshot      },
-	{ .name = "query",       .func = vhd_util_query         },
-	{ .name = "read",        .func = vhd_util_read          },
-	{ .name = "set",         .func = vhd_util_set_field     },
-	{ .name = "repair",      .func = vhd_util_repair        },
-	{ .name = "resize",      .func = vhd_util_resize        },
-	{ .name = "fill",        .func = vhd_util_fill          },
-	{ .name = "coalesce",    .func = vhd_util_coalesce      },
-	{ .name = "modify",      .func = vhd_util_modify        },
-	{ .name = "scan",        .func = vhd_util_scan          },
-	{ .name = "check",       .func = vhd_util_check         },
-	{ .name = "revert",      .func = vhd_util_revert        },
+	{ .name = "create",         .func = vhd_util_create         },
+	{ .name = "snapshot",       .func = vhd_util_snapshot       },
+	{ .name = "query",          .func = vhd_util_query          },
+	{ .name = "read",           .func = vhd_util_read           },
+	{ .name = "set",            .func = vhd_util_set_field      },
+	{ .name = "repair",         .func = vhd_util_repair         },
+	{ .name = "resize",         .func = vhd_util_resize         },
+	{ .name = "fill",           .func = vhd_util_fill           },
+	{ .name = "coalesce",       .func = vhd_util_coalesce       },
+	{ .name = "coalesce_multi", .func = vhd_util_coalesce_multi },
+	{ .name = "modify",         .func = vhd_util_modify         },
+	{ .name = "scan",           .func = vhd_util_scan           },
+	{ .name = "check",          .func = vhd_util_check          },
+	{ .name = "revert",         .func = vhd_util_revert         },
 };
 
 #define print_commands()					\
