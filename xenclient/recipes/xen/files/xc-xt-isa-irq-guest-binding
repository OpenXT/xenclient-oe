diff --git a/xen/drivers/passthrough/io.c b/xen/drivers/passthrough/io.c
index f64e4ac..837d5f9 100644
--- a/xen/drivers/passthrough/io.c
+++ b/xen/drivers/passthrough/io.c
@@ -136,7 +136,28 @@ int pt_irq_create_bind(
     }
     pirq_dpci = pirq_dpci(info);
 
-    if ( pt_irq_bind->irq_type == PT_IRQ_TYPE_MSI )
+    if ( pt_irq_bind->irq_type == PT_IRQ_TYPE_ISA )
+    {
+            if ( pirq >= NR_ISAIRQS ) {
+                spin_unlock(&d->event_lock);
+                return -EINVAL;
+	    }
+
+            pirq_dpci->dom = d;
+            set_bit(pirq, hvm_irq_dpci->isairq_map);
+            hvm_irq_dpci->isairq_girq[pirq] = pt_irq_bind->u.isa.isa_irq;
+            rc = pirq_guest_bind(d->vcpu[0], info, BIND_PIRQ__WILL_SHARE);
+            if ( rc )
+            {
+                pirq_dpci->dom = NULL;
+                clear_bit(pirq, hvm_irq_dpci->isairq_map);
+                hvm_irq_dpci->isairq_girq[pirq] = 0;
+
+                spin_unlock(&d->event_lock);
+                return rc;
+            }
+    }
+    else if ( pt_irq_bind->irq_type == PT_IRQ_TYPE_MSI )
     {
         uint8_t dest, dest_mode;
         int dest_vcpu_id;
@@ -332,6 +353,14 @@ int pt_irq_destroy_bind(
     /* clear the mirq info */
     if ( pirq_dpci && (pirq_dpci->flags & HVM_IRQ_DPCI_MAPPED) )
     {
+        if ( machine_gsi < NR_ISAIRQS &&
+             test_bit(machine_gsi, hvm_irq_dpci->isairq_map) )
+        {
+            clear_bit(machine_gsi, hvm_irq_dpci->isairq_map);
+            hvm_irq_dpci->isairq_girq[machine_gsi] = 0;
+            hvm_irq_dpci->link_cnt[link]++; /* XXX */
+        }
+
         list_for_each_entry_safe ( digl, tmp, &pirq_dpci->digl_list, list )
         {
             if ( digl->device == device &&
diff --git a/xen/include/xen/hvm/irq.h b/xen/include/xen/hvm/irq.h
index 973368c..7152acb 100644
--- a/xen/include/xen/hvm/irq.h
+++ b/xen/include/xen/hvm/irq.h
@@ -86,6 +86,7 @@ struct hvm_irq_dpci {
     struct list_head girq[NR_HVM_IRQS];
     /* Record of mapped ISA IRQs */
     DECLARE_BITMAP(isairq_map, NR_ISAIRQS);
+    uint8_t isairq_girq[NR_ISAIRQS];
     /* Record of mapped Links */
     uint8_t link_cnt[NR_LINK];
     struct tasklet dirq_tasklet;
