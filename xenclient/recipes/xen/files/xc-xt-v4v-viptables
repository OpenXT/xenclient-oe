diff --git a/xen/common/v4v.c b/xen/common/v4v.c
index ae6a2b0..b673872 100644
--- a/xen/common/v4v.c
+++ b/xen/common/v4v.c
@@ -286,7 +286,7 @@ v4v_memcpy_to_guest_ring (struct v4v_ring_info *ring_info, uint32_t offset,
   return 0;
 }
 
-
+struct list_head viprules = LIST_HEAD_INIT(viprules);
 
 /*called must have L3*/
 static int
@@ -1327,6 +1327,216 @@ v4v_ring_add (struct domain *d, XEN_GUEST_HANDLE (v4v_ring_t) ring_hnd,
   return ret;
 }
 
+/**************************** VIPTables ***************************/
+
+void
+v4v_viptables_print_rule (struct v4v_viptables_rule_node *rule)
+{
+  if (rule == NULL)
+    {
+      printk("(null)\n");
+      return;
+    }
+
+  if (rule->accept == 1)
+    printk("ACCEPT");
+  else
+    printk("REJECT");
+
+  printk(" ");
+
+  if (rule->src.domain == DOMID_INVALID)
+    printk("*");
+  else
+    printk("%i", rule->src.domain);
+
+  printk(":");
+
+  if (rule->src.port == -1)
+    printk("*");
+  else
+    printk("%u", rule->src.port);
+
+  printk(" -> ");
+
+  if (rule->dst.domain == DOMID_INVALID)
+    printk("*");
+  else
+    printk("%i", rule->dst.domain);
+
+  printk(":");
+
+  if (rule->dst.port == -1)
+    printk("*");
+  else
+    printk("%u", rule->dst.port);
+
+  printk("\n");
+}
+
+int
+v4v_viptables_add (struct domain *src_d, XEN_GUEST_HANDLE(v4v_viptables_rule_t) rule,
+                   int32_t position)
+{
+  struct v4v_viptables_rule_node* new;
+  struct list_head* tmp;
+
+  /* First rule is n.1 */
+  position--;
+
+  new = v4v_xmalloc (struct v4v_viptables_rule_node);
+
+  if (copy_field_from_guest (new, rule, src))
+    return -EFAULT;
+  if (copy_field_from_guest (new, rule, dst))
+    return -EFAULT;
+  if (copy_field_from_guest (new, rule, accept))
+    return -EFAULT;
+
+  printk(KERN_ERR "VIPTables: ");
+  v4v_viptables_print_rule(new);
+
+  tmp = &viprules;
+  while (position != 0 && tmp->next != &viprules)
+    {
+      tmp = tmp->next;
+      position--;
+    }
+  list_add(&new->list, tmp);
+
+  return 0;
+}
+
+int
+v4v_viptables_del (struct domain *src_d, XEN_GUEST_HANDLE(v4v_viptables_rule_t) rule,
+                   int32_t position)
+{
+  struct list_head *tmp = NULL;
+  struct list_head *next = NULL;
+  struct v4v_viptables_rule_node *node;
+  struct v4v_viptables_rule *r;
+
+  if (position != -1)
+    {
+      /* We want to delete the rule number <position> */
+      tmp = &viprules;
+      while (position != 0 && tmp->next != &viprules)
+        {
+          tmp = tmp->next;
+          position--;
+        }
+    }
+  else if (!guest_handle_is_null(rule))
+    {
+      /* We want to delete the rule <rule> */
+      r = v4v_xmalloc (struct v4v_viptables_rule);
+
+      if (copy_field_from_guest (r, rule, src))
+        return -EFAULT;
+      if (copy_field_from_guest (r, rule, dst))
+        return -EFAULT;
+      if (copy_field_from_guest (r, rule, accept))
+        return -EFAULT;
+
+      list_for_each(tmp, &viprules)
+        {
+          node = list_entry(tmp, struct v4v_viptables_rule_node, list);
+          
+          if ((node->src.domain == r->src.domain) &&
+              (node->src.port   == r->src.port)   &&
+              (node->dst.domain == r->dst.domain) &&
+              (node->dst.port   == r->dst.port))
+            {
+              position = 0;
+              break;
+            }
+        }
+      v4v_xfree(r);
+    }
+  else
+    {
+      /* We want to flush the rules! */
+      printk(KERN_ERR "VIPTables: flushing rules\n");
+      list_for_each_safe(tmp, next, &viprules)
+        {
+          node = list_entry(tmp, struct v4v_viptables_rule_node, list);
+          list_del(tmp);
+          v4v_xfree(node);
+        }
+    }
+
+  if (position == 0 && tmp != &viprules)
+    {
+      printk(KERN_ERR "VIPTables: deleting rule: ");
+      node = list_entry(tmp, struct v4v_viptables_rule_node, list);
+      v4v_viptables_print_rule(node);
+      list_del(tmp);
+      v4v_xfree(node);
+    }
+
+  return 0;
+}
+
+static size_t
+v4v_viptables_list (struct domain *src_d, XEN_GUEST_HANDLE(v4v_viptables_list_t) list_hnd)
+{
+  struct list_head *ptr;
+  struct v4v_viptables_rule_node *node;
+  struct v4v_viptables_list rules_list;
+
+  memset(&rules_list, 0, sizeof (rules_list));
+  if (copy_field_from_guest (&rules_list, list_hnd, nb_rules))
+      return -EFAULT;
+
+  ptr = viprules.next;
+  while (rules_list.nb_rules != 0 && ptr->next != &viprules)
+  {
+      ptr = ptr->next;
+      rules_list.nb_rules--;
+  }
+
+  if (rules_list.nb_rules != 0)
+      return -EFAULT;
+
+  while (rules_list.nb_rules < V4V_VIPTABLES_LIST_SIZE &&
+         ptr != &viprules)
+  {
+      node = list_entry(ptr, struct v4v_viptables_rule_node, list);
+
+      rules_list.rules[rules_list.nb_rules].src = node->src;
+      rules_list.rules[rules_list.nb_rules].dst = node->dst;
+      rules_list.rules[rules_list.nb_rules].accept = node->accept;
+
+      rules_list.nb_rules++;
+      ptr = ptr->next;
+  }
+
+  if (copy_to_guest(list_hnd, &rules_list, 1))
+      return -EFAULT;
+
+  return 0;
+}
+
+static size_t
+v4v_viptables_check (v4v_addr_t * src, v4v_addr_t * dst)
+{
+  struct list_head *ptr;
+  struct v4v_viptables_rule_node *node;
+
+  list_for_each(ptr, &viprules)
+    {
+      node = list_entry(ptr, struct v4v_viptables_rule_node, list);
+
+      if ((node->src.domain == DOMID_INVALID || node->src.domain == src->domain) &&
+          (node->src.port   == -1            || node->src.port   == src->port)   &&
+          (node->dst.domain == DOMID_INVALID || node->dst.domain == dst->domain) &&
+          (node->dst.port   == -1            || node->dst.port   == dst->port))
+        return !node->accept;
+    }
+
+  /* Defaulting to ACCEPT */
+  return 0;
+}
 
 /**************************** io ***************************/
 
@@ -1483,6 +1693,15 @@ v4v_send (struct domain *src_d, v4v_addr_t * src_addr,
              src_addr->domain, dst_addr->domain);
       return -ECONNREFUSED;
     }
+  /* VIPTables*/
+  if (v4v_viptables_check(src_addr, dst_addr) != 0)
+    {
+      read_unlock (&v4v_lock);
+      printk(KERN_ERR "V4V: VIPTables REJECTED %i:%u -> %i:%u\n",
+             src_addr->domain, src_addr->port,
+             dst_addr->domain, dst_addr->port);
+      return -ECONNREFUSED;
+    }
 
   do
     {
@@ -1584,6 +1803,15 @@ v4v_sendv (struct domain *src_d, v4v_addr_t * src_addr,
              src_addr->domain, dst_addr->domain);
       return -ECONNREFUSED;
     }
+  /* VIPTables*/
+  if (v4v_viptables_check(src_addr, dst_addr) != 0)
+    {
+      read_unlock (&v4v_lock);
+      printk(KERN_ERR "V4V: VIPTables REJECTED %i:%u -> %i:%u\n",
+             src_addr->domain, src_addr->port,
+             dst_addr->domain, dst_addr->port);
+      return -ECONNREFUSED;
+    }
 
   do
     {
@@ -1640,6 +1868,7 @@ v4v_sendv (struct domain *src_d, v4v_addr_t * src_addr,
   return ret;
 }
 
+
 /**************** hypercall glue ************/
 long
 do_v4v_op (int cmd, XEN_GUEST_HANDLE (void) arg1,
@@ -1740,11 +1969,43 @@ do_v4v_op (int cmd, XEN_GUEST_HANDLE (void) arg1,
         rc = v4v_notify (d, ring_data_hnd);
         break;
       }
+    case V4VOP_viptables_add:
+      {
+        uint32_t position = arg4;
+        XEN_GUEST_HANDLE (v4v_viptables_rule_t) rule_hnd =
+          guest_handle_cast (arg1, v4v_viptables_rule_t);
+        rc = -EPERM;
+        if (!d->is_privileged)
+            goto out;
+        rc = v4v_viptables_add (d, rule_hnd, position);
+        break;        
+      }
+    case V4VOP_viptables_del:
+      {
+        uint32_t position = arg4;
+        XEN_GUEST_HANDLE (v4v_viptables_rule_t) rule_hnd =
+          guest_handle_cast (arg1, v4v_viptables_rule_t);
+        rc = -EPERM;
+        if (!d->is_privileged)
+            goto out;
+        rc = v4v_viptables_del (d, rule_hnd, position);
+        break;        
+      }
+    case V4VOP_viptables_list:
+      {
+        XEN_GUEST_HANDLE (v4v_viptables_list_t) rules_list_hnd =
+            guest_handle_cast(arg1, v4v_viptables_list_t);
+        rc = -EPERM;
+        if (!d->is_privileged)
+            goto out;
+        rc = v4v_viptables_list (d, rules_list_hnd);
+        break;
+      }
     default:
       rc = -ENOSYS;
       break;
     }
-out:
+ out:
   domain_unlock (d);
 #ifdef V4V_DEBUG
   printk (KERN_ERR "<-do_v4v_op()=%d\n", (int) rc);
diff --git a/xen/include/public/v4v.h b/xen/include/public/v4v.h
index 6157c20..5ecc518 100644
--- a/xen/include/public/v4v.h
+++ b/xen/include/public/v4v.h
@@ -74,6 +74,25 @@ typedef struct v4v_addr
 
 DEFINE_XEN_GUEST_HANDLE (v4v_addr_t);
 
+typedef struct v4v_viptables_rule
+{
+    struct v4v_addr src;
+    struct v4v_addr dst;
+    uint32_t accept;
+} V4V_PACKED v4v_viptables_rule_t;
+
+DEFINE_XEN_GUEST_HANDLE (v4v_viptables_rule_t);
+
+#define V4V_VIPTABLES_LIST_SIZE 8
+
+typedef struct v4v_viptables_list
+{
+    struct v4v_viptables_rule rules[V4V_VIPTABLES_LIST_SIZE];
+    uint32_t nb_rules;
+} V4V_PACKED v4v_viptables_list_t;
+
+DEFINE_XEN_GUEST_HANDLE (v4v_viptables_list_t);
+
 typedef struct v4v_ring_id
 {
     struct v4v_addr addr;
@@ -230,6 +249,9 @@ struct v4v_ring_message_header
 /* Identical to V4VOP_send except rather than buf and len it takes 
  * an array of v4v_iov_t and a length of the array */
 
+#define V4VOP_viptables_add     6
+#define V4VOP_viptables_del     7
+#define V4VOP_viptables_list    8
 
 #if !defined(__GNUC__)
 #pragma warning(pop)
diff --git a/xen/include/xen/v4v.h b/xen/include/xen/v4v.h
index 8358c36..3baa827 100644
--- a/xen/include/xen/v4v.h
+++ b/xen/include/xen/v4v.h
@@ -35,7 +35,13 @@ struct v4v_pending_ent
   uint32_t len;
 };
 
-
+struct v4v_viptables_rule_node
+{
+    struct list_head list;
+    struct v4v_addr src;
+    struct v4v_addr dst;
+    uint32_t accept;
+};
 
 struct v4v_ring_info
 {
